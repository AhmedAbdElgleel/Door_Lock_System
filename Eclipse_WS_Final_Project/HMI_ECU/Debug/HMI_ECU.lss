
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00800060  00003132  000031c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080015c  0080015c  000032c2  2**0
                  ALLOC
  3 .stab         00002f64  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002cc7  00000000  00000000  00006228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000902f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000919f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ade8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bcd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ca80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ce6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d63b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__vector_4>
      14:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__vector_9>
      28:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__vector_10>
      2c:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 35       	cpi	r26, 0x5C	; 92
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e5       	ldi	r26, 0x5C	; 92
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 09 	call	0x12cc	; 0x12cc <main>
      8a:	0c 94 97 18 	jmp	0x312e	; 0x312e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e4       	ldi	r26, 0x46	; 70
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 18 	jmp	0x306e	; 0x306e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e4       	ldi	r24, 0x46	; 70
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 18 	jmp	0x306e	; 0x306e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(GPIO_DDRA_REG.Byte,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRA_REG.Byte,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(GPIO_DDRB_REG.Byte,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRB_REG.Byte,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(GPIO_DDRC_REG.Byte,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRC_REG.Byte,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(GPIO_DDRD_REG.Byte,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRD_REG.Byte,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(GPIO_PORTA_REG.Byte,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTA_REG.Byte,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(GPIO_PORTB_REG.Byte,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTB_REG.Byte,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(GPIO_PORTC_REG.Byte,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTC_REG.Byte,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(GPIO_PORTD_REG.Byte,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTD_REG.Byte,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(GPIO_PINA_REG.Byte,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(GPIO_PINB_REG.Byte,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(GPIO_PINC_REG.Byte,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(GPIO_PIND_REG.Byte,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_togglePin>:

void GPIO_togglePin(uint8 port_num, uint8 pin_num)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_togglePin+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_togglePin+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	88 30       	cpi	r24, 0x08	; 8
    103c:	08 f0       	brcs	.+2      	; 0x1040 <GPIO_togglePin+0x18>
    103e:	72 c0       	rjmp	.+228    	; 0x1124 <GPIO_togglePin+0xfc>
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	08 f0       	brcs	.+2      	; 0x1048 <GPIO_togglePin+0x20>
    1046:	6e c0       	rjmp	.+220    	; 0x1124 <GPIO_togglePin+0xfc>
		/* Do Nothing */
	}
	else
	{
		/* toggle the pin value as required */
		switch(port_num)
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	3c 83       	std	Y+4, r19	; 0x04
    1050:	2b 83       	std	Y+3, r18	; 0x03
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	91 05       	cpc	r25, r1
    105a:	49 f1       	breq	.+82     	; 0x10ae <GPIO_togglePin+0x86>
    105c:	2b 81       	ldd	r18, Y+3	; 0x03
    105e:	3c 81       	ldd	r19, Y+4	; 0x04
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	2c f4       	brge	.+10     	; 0x1070 <GPIO_togglePin+0x48>
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	61 f0       	breq	.+24     	; 0x1086 <GPIO_togglePin+0x5e>
    106e:	5a c0       	rjmp	.+180    	; 0x1124 <GPIO_togglePin+0xfc>
    1070:	2b 81       	ldd	r18, Y+3	; 0x03
    1072:	3c 81       	ldd	r19, Y+4	; 0x04
    1074:	22 30       	cpi	r18, 0x02	; 2
    1076:	31 05       	cpc	r19, r1
    1078:	71 f1       	breq	.+92     	; 0x10d6 <GPIO_togglePin+0xae>
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	91 05       	cpc	r25, r1
    1082:	e9 f1       	breq	.+122    	; 0x10fe <GPIO_togglePin+0xd6>
    1084:	4f c0       	rjmp	.+158    	; 0x1124 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(GPIO_PORTA_REG.Byte,pin_num);
    1086:	ab e3       	ldi	r26, 0x3B	; 59
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <GPIO_togglePin+0x7c>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <GPIO_togglePin+0x78>
    10a8:	84 27       	eor	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	3b c0       	rjmp	.+118    	; 0x1124 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(GPIO_PORTB_REG.Byte,pin_num);
    10ae:	a8 e3       	ldi	r26, 0x38	; 56
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e8 e3       	ldi	r30, 0x38	; 56
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <GPIO_togglePin+0xa4>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <GPIO_togglePin+0xa0>
    10d0:	84 27       	eor	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	27 c0       	rjmp	.+78     	; 0x1124 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(GPIO_PORTC_REG.Byte,pin_num);
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <GPIO_togglePin+0xcc>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <GPIO_togglePin+0xc8>
    10f8:	84 27       	eor	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	13 c0       	rjmp	.+38     	; 0x1124 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(GPIO_PORTD_REG.Byte,pin_num);
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_togglePin+0xf4>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_togglePin+0xf0>
    1120:	84 27       	eor	r24, r20
    1122:	8c 93       	st	X, r24
			break;
		}
	}
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <GPIO_setupPortDirection+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <GPIO_setupPortDirection+0x8>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	84 30       	cpi	r24, 0x04	; 4
    1146:	90 f5       	brcc	.+100    	; 0x11ac <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3c 83       	std	Y+4, r19	; 0x04
    1150:	2b 83       	std	Y+3, r18	; 0x03
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	d1 f0       	breq	.+52     	; 0x1190 <GPIO_setupPortDirection+0x5e>
    115c:	2b 81       	ldd	r18, Y+3	; 0x03
    115e:	3c 81       	ldd	r19, Y+4	; 0x04
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <GPIO_setupPortDirection+0x3e>
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <GPIO_setupPortDirection+0x54>
    116e:	1e c0       	rjmp	.+60     	; 0x11ac <GPIO_setupPortDirection+0x7a>
    1170:	2b 81       	ldd	r18, Y+3	; 0x03
    1172:	3c 81       	ldd	r19, Y+4	; 0x04
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	81 f0       	breq	.+32     	; 0x119a <GPIO_setupPortDirection+0x68>
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	81 f0       	breq	.+32     	; 0x11a4 <GPIO_setupPortDirection+0x72>
    1184:	13 c0       	rjmp	.+38     	; 0x11ac <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			GPIO_DDRA_REG.Byte=direction;
    1186:	ea e3       	ldi	r30, 0x3A	; 58
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	80 83       	st	Z, r24
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			GPIO_DDRB_REG.Byte=direction;
    1190:	e7 e3       	ldi	r30, 0x37	; 55
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	80 83       	st	Z, r24
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			GPIO_DDRC_REG.Byte=direction;
    119a:	e4 e3       	ldi	r30, 0x34	; 52
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	80 83       	st	Z, r24
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			GPIO_DDRD_REG.Byte=direction;
    11a4:	e1 e3       	ldi	r30, 0x31	; 49
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	80 83       	st	Z, r24
			break;
		}
	}
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <GPIO_writePort+0x6>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <GPIO_writePort+0x8>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	84 30       	cpi	r24, 0x04	; 4
    11ce:	90 f5       	brcc	.+100    	; 0x1234 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	3c 83       	std	Y+4, r19	; 0x04
    11d8:	2b 83       	std	Y+3, r18	; 0x03
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	91 05       	cpc	r25, r1
    11e2:	d1 f0       	breq	.+52     	; 0x1218 <GPIO_writePort+0x5e>
    11e4:	2b 81       	ldd	r18, Y+3	; 0x03
    11e6:	3c 81       	ldd	r19, Y+4	; 0x04
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <GPIO_writePort+0x3e>
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 f0       	breq	.+24     	; 0x120e <GPIO_writePort+0x54>
    11f6:	1e c0       	rjmp	.+60     	; 0x1234 <GPIO_writePort+0x7a>
    11f8:	2b 81       	ldd	r18, Y+3	; 0x03
    11fa:	3c 81       	ldd	r19, Y+4	; 0x04
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	81 f0       	breq	.+32     	; 0x1222 <GPIO_writePort+0x68>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <GPIO_writePort+0x72>
    120c:	13 c0       	rjmp	.+38     	; 0x1234 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			GPIO_PORTA_REG.Byte = value;
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	80 83       	st	Z, r24
    1216:	0e c0       	rjmp	.+28     	; 0x1234 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			GPIO_PORTB_REG.Byte = value;
    1218:	e8 e3       	ldi	r30, 0x38	; 56
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			GPIO_PORTC_REG.Byte = value;
    1222:	e5 e3       	ldi	r30, 0x35	; 53
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			GPIO_PORTD_REG.Byte = value;
    122c:	e2 e3       	ldi	r30, 0x32	; 50
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
			break;
		}
	}
}
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <GPIO_readPort+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <GPIO_readPort+0x8>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1250:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	84 30       	cpi	r24, 0x04	; 4
    1256:	90 f5       	brcc	.+100    	; 0x12bc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3c 83       	std	Y+4, r19	; 0x04
    1260:	2b 83       	std	Y+3, r18	; 0x03
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	d1 f0       	breq	.+52     	; 0x12a0 <GPIO_readPort+0x5e>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	2c f4       	brge	.+10     	; 0x1280 <GPIO_readPort+0x3e>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	61 f0       	breq	.+24     	; 0x1296 <GPIO_readPort+0x54>
    127e:	1e c0       	rjmp	.+60     	; 0x12bc <GPIO_readPort+0x7a>
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	3c 81       	ldd	r19, Y+4	; 0x04
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	81 f0       	breq	.+32     	; 0x12aa <GPIO_readPort+0x68>
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	91 05       	cpc	r25, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <GPIO_readPort+0x72>
    1294:	13 c0       	rjmp	.+38     	; 0x12bc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = GPIO_PINA_REG.Byte;
    1296:	e9 e3       	ldi	r30, 0x39	; 57
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = GPIO_PINB_REG.Byte;
    12a0:	e6 e3       	ldi	r30, 0x36	; 54
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	09 c0       	rjmp	.+18     	; 0x12bc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = GPIO_PINC_REG.Byte;
    12aa:	e3 e3       	ldi	r30, 0x33	; 51
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = GPIO_PIND_REG.Byte;
    12b4:	e0 e3       	ldi	r30, 0x30	; 48
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <main>:
/*******************************************************************************
 *                      Main Function                         				   *
 *******************************************************************************/

int main(void)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	aa 97       	sbiw	r28, 0x2a	; 42
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61

	/*Just intial values where in this project i will use timer1 in CTC mode with 1024 prescale and Inital value =0 but i
	  I Will change the compare value from time to time*/
	Timer_ConfigType Timer_configuration={0,0,Timer1,TIMER_F_CPU_1024,Compare_Mode};
    12e0:	9e 01       	movw	r18, r28
    12e2:	2f 5e       	subi	r18, 0xEF	; 239
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	3a a3       	std	Y+34, r19	; 0x22
    12e8:	29 a3       	std	Y+33, r18	; 0x21
    12ea:	85 e5       	ldi	r24, 0x55	; 85
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	9c a3       	std	Y+36, r25	; 0x24
    12f0:	8b a3       	std	Y+35, r24	; 0x23
    12f2:	97 e0       	ldi	r25, 0x07	; 7
    12f4:	9d a3       	std	Y+37, r25	; 0x25
    12f6:	eb a1       	ldd	r30, Y+35	; 0x23
    12f8:	fc a1       	ldd	r31, Y+36	; 0x24
    12fa:	00 80       	ld	r0, Z
    12fc:	2b a1       	ldd	r18, Y+35	; 0x23
    12fe:	3c a1       	ldd	r19, Y+36	; 0x24
    1300:	2f 5f       	subi	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	3c a3       	std	Y+36, r19	; 0x24
    1306:	2b a3       	std	Y+35, r18	; 0x23
    1308:	e9 a1       	ldd	r30, Y+33	; 0x21
    130a:	fa a1       	ldd	r31, Y+34	; 0x22
    130c:	00 82       	st	Z, r0
    130e:	29 a1       	ldd	r18, Y+33	; 0x21
    1310:	3a a1       	ldd	r19, Y+34	; 0x22
    1312:	2f 5f       	subi	r18, 0xFF	; 255
    1314:	3f 4f       	sbci	r19, 0xFF	; 255
    1316:	3a a3       	std	Y+34, r19	; 0x22
    1318:	29 a3       	std	Y+33, r18	; 0x21
    131a:	3d a1       	ldd	r19, Y+37	; 0x25
    131c:	31 50       	subi	r19, 0x01	; 1
    131e:	3d a3       	std	Y+37, r19	; 0x25
    1320:	8d a1       	ldd	r24, Y+37	; 0x25
    1322:	88 23       	and	r24, r24
    1324:	41 f7       	brne	.-48     	; 0x12f6 <main+0x2a>

	/*UART Configurations and Initialization*/
	UART_ConfigType Uart_configuration={CHARACTER_SIZE_8,EVEN_PARITY,STOP_1BIT,9600};
    1326:	fe 01       	movw	r30, r28
    1328:	78 96       	adiw	r30, 0x18	; 24
    132a:	ff a3       	std	Y+39, r31	; 0x27
    132c:	ee a3       	std	Y+38, r30	; 0x26
    132e:	2e e4       	ldi	r18, 0x4E	; 78
    1330:	31 e0       	ldi	r19, 0x01	; 1
    1332:	39 a7       	std	Y+41, r19	; 0x29
    1334:	28 a7       	std	Y+40, r18	; 0x28
    1336:	37 e0       	ldi	r19, 0x07	; 7
    1338:	3a a7       	std	Y+42, r19	; 0x2a
    133a:	e8 a5       	ldd	r30, Y+40	; 0x28
    133c:	f9 a5       	ldd	r31, Y+41	; 0x29
    133e:	00 80       	ld	r0, Z
    1340:	28 a5       	ldd	r18, Y+40	; 0x28
    1342:	39 a5       	ldd	r19, Y+41	; 0x29
    1344:	2f 5f       	subi	r18, 0xFF	; 255
    1346:	3f 4f       	sbci	r19, 0xFF	; 255
    1348:	39 a7       	std	Y+41, r19	; 0x29
    134a:	28 a7       	std	Y+40, r18	; 0x28
    134c:	ee a1       	ldd	r30, Y+38	; 0x26
    134e:	ff a1       	ldd	r31, Y+39	; 0x27
    1350:	00 82       	st	Z, r0
    1352:	2e a1       	ldd	r18, Y+38	; 0x26
    1354:	3f a1       	ldd	r19, Y+39	; 0x27
    1356:	2f 5f       	subi	r18, 0xFF	; 255
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	3f a3       	std	Y+39, r19	; 0x27
    135c:	2e a3       	std	Y+38, r18	; 0x26
    135e:	3a a5       	ldd	r19, Y+42	; 0x2a
    1360:	31 50       	subi	r19, 0x01	; 1
    1362:	3a a7       	std	Y+42, r19	; 0x2a
    1364:	8a a5       	ldd	r24, Y+42	; 0x2a
    1366:	88 23       	and	r24, r24
    1368:	41 f7       	brne	.-48     	; 0x133a <main+0x6e>
	UART_init(&Uart_configuration);
    136a:	ce 01       	movw	r24, r28
    136c:	48 96       	adiw	r24, 0x18	; 24
    136e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <UART_init>

	/*Enable Global Interrupt*/
	SREG_REG.Bits.I_Bit=1;
    1372:	ef e5       	ldi	r30, 0x5F	; 95
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 68       	ori	r24, 0x80	; 128
    137a:	80 83       	st	Z, r24

	/*Set timer1 to call back */
	Timer_setCallBack(timer1_SetRequiredCallBackFunction, Timer1);
    137c:	8e eb       	ldi	r24, 0xBE	; 190
    137e:	9c e0       	ldi	r25, 0x0C	; 12
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	0e 94 b3 14 	call	0x2966	; 0x2966 <Timer_setCallBack>

	LCD_init();
    1386:	0e 94 55 0e 	call	0x1caa	; 0x1caa <LCD_init>
	LCD_displayStringRowColumn(0,0,"Door Lock System");
    138a:	20 e6       	ldi	r18, 0x60	; 96
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Ahmed AbdElgleel");
    1398:	21 e7       	ldi	r18, 0x71	; 113
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	a9 01       	movw	r20, r18
    13a2:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e4       	ldi	r25, 0x40	; 64
    13aa:	ac e1       	ldi	r26, 0x1C	; 28
    13ac:	b5 e4       	ldi	r27, 0x45	; 69
    13ae:	8b 87       	std	Y+11, r24	; 0x0b
    13b0:	9c 87       	std	Y+12, r25	; 0x0c
    13b2:	ad 87       	std	Y+13, r26	; 0x0d
    13b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4a ef       	ldi	r20, 0xFA	; 250
    13c4:	54 e4       	ldi	r21, 0x44	; 68
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8f 83       	std	Y+7, r24	; 0x07
    13d0:	98 87       	std	Y+8, r25	; 0x08
    13d2:	a9 87       	std	Y+9, r26	; 0x09
    13d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <main+0x12c>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <main+0x1aa>
	else if (__tmp > 65535)
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	4c f5       	brge	.+82     	; 0x1462 <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	6b 85       	ldd	r22, Y+11	; 0x0b
    1412:	7c 85       	ldd	r23, Y+12	; 0x0c
    1414:	8d 85       	ldd	r24, Y+13	; 0x0d
    1416:	9e 85       	ldd	r25, Y+14	; 0x0e
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <main+0x18c>
    143a:	88 ec       	ldi	r24, 0xC8	; 200
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <main+0x17a>
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f7       	brne	.-38     	; 0x143a <main+0x16e>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1462:	6f 81       	ldd	r22, Y+7	; 0x07
    1464:	78 85       	ldd	r23, Y+8	; 0x08
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <main+0x1b6>
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2500);

	while(1)
	{
		switch(g_MC1_application_sequence)
    148a:	80 91 5c 01 	lds	r24, 0x015C
    148e:	e8 2f       	mov	r30, r24
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	f8 a3       	std	Y+32, r31	; 0x20
    1494:	ef 8f       	std	Y+31, r30	; 0x1f
    1496:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1498:	38 a1       	ldd	r19, Y+32	; 0x20
    149a:	21 30       	cpi	r18, 0x01	; 1
    149c:	31 05       	cpc	r19, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <main+0x1d6>
    14a0:	4c c0       	rjmp	.+152    	; 0x153a <main+0x26e>
    14a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14a4:	98 a1       	ldd	r25, Y+32	; 0x20
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	91 05       	cpc	r25, r1
    14aa:	2c f4       	brge	.+10     	; 0x14b6 <main+0x1ea>
    14ac:	ef 8d       	ldd	r30, Y+31	; 0x1f
    14ae:	f8 a1       	ldd	r31, Y+32	; 0x20
    14b0:	30 97       	sbiw	r30, 0x00	; 0
    14b2:	71 f0       	breq	.+28     	; 0x14d0 <main+0x204>
    14b4:	ea cf       	rjmp	.-44     	; 0x148a <main+0x1be>
    14b6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    14b8:	38 a1       	ldd	r19, Y+32	; 0x20
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <main+0x1f6>
    14c0:	47 c0       	rjmp	.+142    	; 0x1550 <main+0x284>
    14c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14c4:	98 a1       	ldd	r25, Y+32	; 0x20
    14c6:	83 30       	cpi	r24, 0x03	; 3
    14c8:	91 05       	cpc	r25, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <main+0x202>
    14cc:	cf c0       	rjmp	.+414    	; 0x166c <main+0x3a0>
    14ce:	dd cf       	rjmp	.-70     	; 0x148a <main+0x1be>
		{
			case CREATE_PASSWORD_STAGE:
				LCD_clearScreen();
    14d0:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0,"Plz enter pass:");
    14d4:	22 e8       	ldi	r18, 0x82	; 130
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	a9 01       	movw	r20, r18
    14de:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
				LCD_moveCursor(1, 0);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_moveCursor>
				create_Password(g_passwordArray1);
    14ea:	8e e5       	ldi	r24, 0x5E	; 94
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	0e 94 9a 0b 	call	0x1734	; 0x1734 <create_Password>
				LCD_clearScreen();
    14f2:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0,"Plz re-enter the");
    14f6:	22 e9       	ldi	r18, 0x92	; 146
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	a9 01       	movw	r20, r18
    1500:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0,"same pass: ");
    1504:	23 ea       	ldi	r18, 0xA3	; 163
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
				LCD_moveCursor(1, 10);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	6a e0       	ldi	r22, 0x0A	; 10
    1516:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_moveCursor>
				create_Password(g_passwordArray2);
    151a:	83 e6       	ldi	r24, 0x63	; 99
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <create_Password>

				/*Sending the password to Control_ECU*/
				send_Password(g_passwordArray1);
    1522:	8e e5       	ldi	r24, 0x5E	; 94
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <send_Password>

				/*Sending the re-entered password to Control_ECU*/
				send_Password(g_passwordArray2);
    152a:	83 e6       	ldi	r24, 0x63	; 99
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <send_Password>

				/* Increment Stage for next loop (go to checking password stage*/
				g_MC1_application_sequence=CHECKING_PASSWORDS_MATCHING_STAGE;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	80 93 5c 01 	sts	0x015C, r24
    1538:	a8 cf       	rjmp	.-176    	; 0x148a <main+0x1be>
				break;

			case CHECKING_PASSWORDS_MATCHING_STAGE:

				/*Check if the two passwords are matched or not from Control ECU*/
				if(Password_Checker()!=MATCHED)
    153a:	0e 94 80 0c 	call	0x1900	; 0x1900 <Password_Checker>
    153e:	84 36       	cpi	r24, 0x64	; 100
    1540:	19 f0       	breq	.+6      	; 0x1548 <main+0x27c>
				{
					/*return to first stage ( CREATE_PASSWORD_STAGE ) */
					g_MC1_application_sequence=CREATE_PASSWORD_STAGE;
    1542:	10 92 5c 01 	sts	0x015C, r1
    1546:	a1 cf       	rjmp	.-190    	; 0x148a <main+0x1be>
				}
				else
				{
					/*go to next stage */
					g_MC1_application_sequence=MAIN_OPTIONS_STAGE;
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	80 93 5c 01 	sts	0x015C, r24
    154e:	9d cf       	rjmp	.-198    	; 0x148a <main+0x1be>

			case MAIN_OPTIONS_STAGE:
			{
				/*NOTE : i made this block scope bec. i want the local varriables defined in this case just to be local for its case*/
				uint8 userChoiceKey;
				LCD_clearScreen();
    1550:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "+ : OPEN DOOR");
    1554:	2f ea       	ldi	r18, 0xAF	; 175
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
    1562:	2d eb       	ldi	r18, 0xBD	; 189
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	a9 01       	movw	r20, r18
    156c:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
				userChoiceKey=KEYPAD_getPressedKey();
    1570:	0e 94 ca 0c 	call	0x1994	; 0x1994 <KEYPAD_getPressedKey>
    1574:	88 8b       	std	Y+16, r24	; 0x10
				while(userChoiceKey != '+' && userChoiceKey != '-'){};
    1576:	88 89       	ldd	r24, Y+16	; 0x10
    1578:	8b 32       	cpi	r24, 0x2B	; 43
    157a:	19 f0       	breq	.+6      	; 0x1582 <main+0x2b6>
    157c:	88 89       	ldd	r24, Y+16	; 0x10
    157e:	8d 32       	cpi	r24, 0x2D	; 45
    1580:	d1 f7       	brne	.-12     	; 0x1576 <main+0x2aa>
				LCD_clearScreen();
    1582:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0,"Plz enter old");
    1586:	2d ec       	ldi	r18, 0xCD	; 205
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	a9 01       	movw	r20, r18
    1590:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0,"pass :");
    1594:	2b ed       	ldi	r18, 0xDB	; 219
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	a9 01       	movw	r20, r18
    159e:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>

				/*Store the password enterd from user in an array g_passwordArray1*/
				create_Password(g_passwordArray1);
    15a2:	8e e5       	ldi	r24, 0x5E	; 94
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <create_Password>

				/*Send the password enter by user to Control ECU to check the password is matched with the saved one or not*/
				send_Password(g_passwordArray1);
    15aa:	8e e5       	ldi	r24, 0x5E	; 94
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <send_Password>

				/*
				 * if two passwords are matched the Control ECU will send matched
				 */
				if(recieve_Byte()==MATCHED)
    15b2:	0e 94 8f 0c 	call	0x191e	; 0x191e <recieve_Byte>
    15b6:	84 36       	cpi	r24, 0x64	; 100
    15b8:	41 f4       	brne	.+16     	; 0x15ca <main+0x2fe>
				{
					/*Sends the user choice button to Control_ECU what ever he/she choose +/- */
					send_Byte(userChoiceKey);
    15ba:	88 89       	ldd	r24, Y+16	; 0x10
    15bc:	0e 94 a6 0c 	call	0x194c	; 0x194c <send_Byte>

					/*In case HMI ECU send '+' to Control ECU , THE Control ECU will send number 3 as indication for HMI to go to OPEN_DOOR_STAGE
					 * but in case HMI ECU Send '-' to Control ecu, the control ecu will send number 0 as indication for hmi to go to CREATE_PASSWORD_STAGE*/
					g_MC1_application_sequence=recieve_Byte();
    15c0:	0e 94 8f 0c 	call	0x191e	; 0x191e <recieve_Byte>
    15c4:	80 93 5c 01 	sts	0x015C, r24
    15c8:	60 cf       	rjmp	.-320    	; 0x148a <main+0x1be>
					 * and execute the function which is responsible for the choice he chose (Open Door/Change password).

					 * but, if the number of timers that user re-enterd the password are more than 2 times we will
					 * Activate the Buzzer and block the system for 1 minute and After the 1 min ends return to case 3
					*/
					for(count=0;count<2;count++)
    15ca:	1f 86       	std	Y+15, r1	; 0x0f
    15cc:	23 c0       	rjmp	.+70     	; 0x1614 <main+0x348>
					{
						LCD_clearScreen();
    15ce:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0,"Plz enter old");
    15d2:	2d ec       	ldi	r18, 0xCD	; 205
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	a9 01       	movw	r20, r18
    15dc:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0,"pass:");
    15e0:	22 ee       	ldi	r18, 0xE2	; 226
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	a9 01       	movw	r20, r18
    15ea:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>

						create_Password(g_passwordArray1);
    15ee:	8e e5       	ldi	r24, 0x5E	; 94
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <create_Password>
						send_Password(g_passwordArray1);
    15f6:	8e e5       	ldi	r24, 0x5E	; 94
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <send_Password>

						if(recieve_Byte()==MATCHED)
    15fe:	0e 94 8f 0c 	call	0x191e	; 0x191e <recieve_Byte>
    1602:	84 36       	cpi	r24, 0x64	; 100
    1604:	21 f4       	brne	.+8      	; 0x160e <main+0x342>
						{
							/*go to MAIN_MENU_OPTION_STAGE where the user choose again what he want  */
							g_MC1_application_sequence=MAIN_OPTIONS_STAGE;
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	80 93 5c 01 	sts	0x015C, r24
    160c:	06 c0       	rjmp	.+12     	; 0x161a <main+0x34e>
					 * and execute the function which is responsible for the choice he chose (Open Door/Change password).

					 * but, if the number of timers that user re-enterd the password are more than 2 times we will
					 * Activate the Buzzer and block the system for 1 minute and After the 1 min ends return to case 3
					*/
					for(count=0;count<2;count++)
    160e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1610:	8f 5f       	subi	r24, 0xFF	; 255
    1612:	8f 87       	std	Y+15, r24	; 0x0f
    1614:	8f 85       	ldd	r24, Y+15	; 0x0f
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	d0 f2       	brcs	.-76     	; 0x15ce <main+0x302>
						}
					}
					/*this mean that user enterd wrong password more than 2 times so we will
					 * Activate the Buzzer and block the system for 1 minute and After the 1 min ends return to case 3
					*/
					if(2==count)
    161a:	8f 85       	ldd	r24, Y+15	; 0x0f
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	09 f0       	breq	.+2      	; 0x1622 <main+0x356>
    1620:	34 cf       	rjmp	.-408    	; 0x148a <main+0x1be>
					{
						LCD_clearScreen();
    1622:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
						  where F_CPU= 8 MHZ and Timer Prescale = 1024
					      so we need 468750 count from timer to time 1 min
					      so we will put in compare register of timer1 value = 46875
						  we will get an 10 interrupts for time 1 min
						*/
						Timer_configuration.timer_compare_MatchValue=46875;
    1626:	8b e1       	ldi	r24, 0x1B	; 27
    1628:	97 eb       	ldi	r25, 0xB7	; 183
    162a:	9c 8b       	std	Y+20, r25	; 0x14
    162c:	8b 8b       	std	Y+19, r24	; 0x13

						Timer_init(&Timer_configuration);
    162e:	ce 01       	movw	r24, r28
    1630:	41 96       	adiw	r24, 0x11	; 17
    1632:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <Timer_init>

						/*display error message and turn the buzzer one in Control ECU and wait for 1 min as g_Tick will be equal 10 after 1 min*/
						LCD_displayStringRowColumn(0,1,"System LOCKED");
    1636:	28 ee       	ldi	r18, 0xE8	; 232
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	a9 01       	movw	r20, r18
    1640:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"Wait for 1 min");
    1644:	26 ef       	ldi	r18, 0xF6	; 246
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	a9 01       	movw	r20, r18
    164e:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>

						/*Wait for 1 min as will be equal 10 after 1 min*/
						while(g_tick < 10);
    1652:	80 91 5d 01 	lds	r24, 0x015D
    1656:	8a 30       	cpi	r24, 0x0A	; 10
    1658:	e0 f3       	brcs	.-8      	; 0x1652 <main+0x386>
							 *SW code but actually the compiler does't know that g_tick will be incremented via an interrupt
							 *in timer1 Hardware so Kindly define g_tick using keyword volatile */
						}

						/*stop timer1 via using deInit() Function*/
						Timer_DeInit(Timer1);
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Timer_DeInit>

						/*Clear the g_tick for next time*/
						g_tick=0;
    1660:	10 92 5d 01 	sts	0x015D, r1

						/*go to MAIN_MENU_OPTION_STAGE where the user choose again what he want*/
						g_MC1_application_sequence=MAIN_OPTIONS_STAGE;
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	80 93 5c 01 	sts	0x015C, r24
    166a:	0f cf       	rjmp	.-482    	; 0x148a <main+0x1be>
				  so we need 117188 count from timer to time 15 sec
				  so we will put in compare register of timer1 value = 58594
				  we will need 2 interrupts for time 15 sec
				  NOTE Timer Timer_configuration its prescale and ID inital value
				*/
				Timer_configuration.timer_compare_MatchValue=58594;
    166c:	82 ee       	ldi	r24, 0xE2	; 226
    166e:	94 ee       	ldi	r25, 0xE4	; 228
    1670:	9c 8b       	std	Y+20, r25	; 0x14
    1672:	8b 8b       	std	Y+19, r24	; 0x13

				/*Initialize Timer 1*/
				Timer_init(&Timer_configuration);
    1674:	ce 01       	movw	r24, r28
    1676:	41 96       	adiw	r24, 0x11	; 17
    1678:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <Timer_init>

				/*Display Unlocking the door*/
				LCD_clearScreen();
    167c:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
				LCD_displayStringRowColumn(0,1,"Door Unlocking");
    1680:	25 e0       	ldi	r18, 0x05	; 5
    1682:	31 e0       	ldi	r19, 0x01	; 1
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	a9 01       	movw	r20, r18
    168a:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,4,"Please Wait");
    168e:	24 e1       	ldi	r18, 0x14	; 20
    1690:	31 e0       	ldi	r19, 0x01	; 1
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	64 e0       	ldi	r22, 0x04	; 4
    1696:	a9 01       	movw	r20, r18
    1698:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>

				/*Wait for 15 sec Displaying DOOR UNLOCKING*/
				while(g_tick<2){};
    169c:	80 91 5d 01 	lds	r24, 0x015D
    16a0:	82 30       	cpi	r24, 0x02	; 2
    16a2:	e0 f3       	brcs	.-8      	; 0x169c <main+0x3d0>

				/*Stop Timer1*/
				Timer_DeInit(Timer1);
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Timer_DeInit>

				/*Clear the g_tick for next time*/
				g_tick=0;
    16aa:	10 92 5d 01 	sts	0x015D, r1

				LCD_clearScreen();
    16ae:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>

				/*set Compare value = 23438 ,prescale ,timer id,mode as i initialized
				  we will need 1 interrupt within 3 sec*/
				Timer_configuration.timer_compare_MatchValue=23438;
    16b2:	8e e8       	ldi	r24, 0x8E	; 142
    16b4:	9b e5       	ldi	r25, 0x5B	; 91
    16b6:	9c 8b       	std	Y+20, r25	; 0x14
    16b8:	8b 8b       	std	Y+19, r24	; 0x13

				Timer_init(&Timer_configuration);
    16ba:	ce 01       	movw	r24, r28
    16bc:	41 96       	adiw	r24, 0x11	; 17
    16be:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <Timer_init>

				LCD_clearScreen();
    16c2:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"wait for people");
    16c6:	20 e2       	ldi	r18, 0x20	; 32
    16c8:	31 e0       	ldi	r19, 0x01	; 1
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	a9 01       	movw	r20, r18
    16d0:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,3,"To Enter");
    16d4:	20 e3       	ldi	r18, 0x30	; 48
    16d6:	31 e0       	ldi	r19, 0x01	; 1
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	63 e0       	ldi	r22, 0x03	; 3
    16dc:	a9 01       	movw	r20, r18
    16de:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>

				/*wait for 3 sec and the motor is stop*/
				while(g_tick<1){};
    16e2:	80 91 5d 01 	lds	r24, 0x015D
    16e6:	88 23       	and	r24, r24
    16e8:	e1 f3       	breq	.-8      	; 0x16e2 <main+0x416>

				/*Wait Until the COntrol ECU send that their is no motion detected*/
				recieve_Byte();
    16ea:	0e 94 8f 0c 	call	0x191e	; 0x191e <recieve_Byte>

				/*Stop Timer1*/
				Timer_DeInit(Timer1);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Timer_DeInit>

				/*Clear the g_tick for next time*/
				g_tick=0;
    16f4:	10 92 5d 01 	sts	0x015D, r1

				/*Display locking the door*/
				LCD_clearScreen();
    16f8:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
				LCD_displayStringRowColumn(0,2,"Door Locking");
    16fc:	29 e3       	ldi	r18, 0x39	; 57
    16fe:	31 e0       	ldi	r19, 0x01	; 1
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	62 e0       	ldi	r22, 0x02	; 2
    1704:	a9 01       	movw	r20, r18
    1706:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayStringRowColumn>

				Timer_configuration.timer_compare_MatchValue=58594;
    170a:	82 ee       	ldi	r24, 0xE2	; 226
    170c:	94 ee       	ldi	r25, 0xE4	; 228
    170e:	9c 8b       	std	Y+20, r25	; 0x14
    1710:	8b 8b       	std	Y+19, r24	; 0x13
				/*Initialize Timer 1*/
				Timer_init(&Timer_configuration);
    1712:	ce 01       	movw	r24, r28
    1714:	41 96       	adiw	r24, 0x11	; 17
    1716:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <Timer_init>

				/*Wait for 15 sec*/
				while(g_tick<2){};
    171a:	80 91 5d 01 	lds	r24, 0x015D
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	e0 f3       	brcs	.-8      	; 0x171a <main+0x44e>

				/*Stop Timer1*/
				Timer_DeInit(Timer1);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Timer_DeInit>

				/*Clear the g_tick for next time*/
				g_tick=0;
    1728:	10 92 5d 01 	sts	0x015D, r1

				/*go to MAIN_OPTIONS_STAGE where the user choose again what he want*/
				g_MC1_application_sequence=MAIN_OPTIONS_STAGE;
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	80 93 5c 01 	sts	0x015C, r24
    1732:	ab ce       	rjmp	.-682    	; 0x148a <main+0x1be>

00001734 <create_Password>:
/*
 * Function Description :
 * Take the password entered by the user and Store it in the array passed to it
 */
void create_Password(uint8 *a_PasswordArray)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	62 97       	sbiw	r28, 0x12	; 18
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	9a 8b       	std	Y+18, r25	; 0x12
    174a:	89 8b       	std	Y+17, r24	; 0x11
	uint8 counter=0;
    174c:	18 8a       	std	Y+16, r1	; 0x10
	uint8 pressedKey=KEYPAD_getPressedKey();
    174e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <KEYPAD_getPressedKey>
    1752:	8f 87       	std	Y+15, r24	; 0x0f
    1754:	9c c0       	rjmp	.+312    	; 0x188e <create_Password+0x15a>
	while(pressedKey != '=')
	{
		pressedKey=KEYPAD_getPressedKey();
    1756:	0e 94 ca 0c 	call	0x1994	; 0x1994 <KEYPAD_getPressedKey>
    175a:	8f 87       	std	Y+15, r24	; 0x0f
		if( ( pressedKey != '+' && pressedKey!= '-' && pressedKey!= '*' && pressedKey!= '%' && pressedKey!= '=') )
    175c:	8f 85       	ldd	r24, Y+15	; 0x0f
    175e:	8b 32       	cpi	r24, 0x2B	; 43
    1760:	09 f4       	brne	.+2      	; 0x1764 <create_Password+0x30>
    1762:	95 c0       	rjmp	.+298    	; 0x188e <create_Password+0x15a>
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	8d 32       	cpi	r24, 0x2D	; 45
    1768:	09 f4       	brne	.+2      	; 0x176c <create_Password+0x38>
    176a:	91 c0       	rjmp	.+290    	; 0x188e <create_Password+0x15a>
    176c:	8f 85       	ldd	r24, Y+15	; 0x0f
    176e:	8a 32       	cpi	r24, 0x2A	; 42
    1770:	09 f4       	brne	.+2      	; 0x1774 <create_Password+0x40>
    1772:	8d c0       	rjmp	.+282    	; 0x188e <create_Password+0x15a>
    1774:	8f 85       	ldd	r24, Y+15	; 0x0f
    1776:	85 32       	cpi	r24, 0x25	; 37
    1778:	09 f4       	brne	.+2      	; 0x177c <create_Password+0x48>
    177a:	89 c0       	rjmp	.+274    	; 0x188e <create_Password+0x15a>
    177c:	8f 85       	ldd	r24, Y+15	; 0x0f
    177e:	8d 33       	cpi	r24, 0x3D	; 61
    1780:	09 f4       	brne	.+2      	; 0x1784 <create_Password+0x50>
    1782:	85 c0       	rjmp	.+266    	; 0x188e <create_Password+0x15a>
		{
			if(counter < PASSWORD_SIZE )
    1784:	88 89       	ldd	r24, Y+16	; 0x10
    1786:	85 30       	cpi	r24, 0x05	; 5
    1788:	80 f4       	brcc	.+32     	; 0x17aa <create_Password+0x76>
			{
				*(a_PasswordArray+counter)=pressedKey;
    178a:	88 89       	ldd	r24, Y+16	; 0x10
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	89 89       	ldd	r24, Y+17	; 0x11
    1792:	9a 89       	ldd	r25, Y+18	; 0x12
    1794:	fc 01       	movw	r30, r24
    1796:	e2 0f       	add	r30, r18
    1798:	f3 1f       	adc	r31, r19
    179a:	8f 85       	ldd	r24, Y+15	; 0x0f
    179c:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    179e:	8a e2       	ldi	r24, 0x2A	; 42
    17a0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_displayCharacter>
				counter++;
    17a4:	88 89       	ldd	r24, Y+16	; 0x10
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	88 8b       	std	Y+16, r24	; 0x10
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	aa ef       	ldi	r26, 0xFA	; 250
    17b0:	b3 e4       	ldi	r27, 0x43	; 67
    17b2:	8b 87       	std	Y+11, r24	; 0x0b
    17b4:	9c 87       	std	Y+12, r25	; 0x0c
    17b6:	ad 87       	std	Y+13, r26	; 0x0d
    17b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    17bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17be:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	4a ef       	ldi	r20, 0xFA	; 250
    17c8:	54 e4       	ldi	r21, 0x44	; 68
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	8f 83       	std	Y+7, r24	; 0x07
    17d4:	98 87       	std	Y+8, r25	; 0x08
    17d6:	a9 87       	std	Y+9, r26	; 0x09
    17d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17da:	6f 81       	ldd	r22, Y+7	; 0x07
    17dc:	78 85       	ldd	r23, Y+8	; 0x08
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	2c f4       	brge	.+10     	; 0x17fc <create_Password+0xc8>
		__ticks = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	3f c0       	rjmp	.+126    	; 0x187a <create_Password+0x146>
	else if (__tmp > 65535)
    17fc:	6f 81       	ldd	r22, Y+7	; 0x07
    17fe:	78 85       	ldd	r23, Y+8	; 0x08
    1800:	89 85       	ldd	r24, Y+9	; 0x09
    1802:	9a 85       	ldd	r25, Y+10	; 0x0a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	3f ef       	ldi	r19, 0xFF	; 255
    1808:	4f e7       	ldi	r20, 0x7F	; 127
    180a:	57 e4       	ldi	r21, 0x47	; 71
    180c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1810:	18 16       	cp	r1, r24
    1812:	4c f5       	brge	.+82     	; 0x1866 <create_Password+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1814:	6b 85       	ldd	r22, Y+11	; 0x0b
    1816:	7c 85       	ldd	r23, Y+12	; 0x0c
    1818:	8d 85       	ldd	r24, Y+13	; 0x0d
    181a:	9e 85       	ldd	r25, Y+14	; 0x0e
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e2       	ldi	r20, 0x20	; 32
    1822:	51 e4       	ldi	r21, 0x41	; 65
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
    183c:	0f c0       	rjmp	.+30     	; 0x185c <create_Password+0x128>
    183e:	88 ec       	ldi	r24, 0xC8	; 200
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9c 83       	std	Y+4, r25	; 0x04
    1844:	8b 83       	std	Y+3, r24	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <create_Password+0x116>
    184e:	9c 83       	std	Y+4, r25	; 0x04
    1850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	69 f7       	brne	.-38     	; 0x183e <create_Password+0x10a>
    1864:	14 c0       	rjmp	.+40     	; 0x188e <create_Password+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	6f 81       	ldd	r22, Y+7	; 0x07
    1868:	78 85       	ldd	r23, Y+8	; 0x08
    186a:	89 85       	ldd	r24, Y+9	; 0x09
    186c:	9a 85       	ldd	r25, Y+10	; 0x0a
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <create_Password+0x152>
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
 */
void create_Password(uint8 *a_PasswordArray)
{
	uint8 counter=0;
	uint8 pressedKey=KEYPAD_getPressedKey();
	while(pressedKey != '=')
    188e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1890:	8d 33       	cpi	r24, 0x3D	; 61
    1892:	09 f0       	breq	.+2      	; 0x1896 <create_Password+0x162>
    1894:	60 cf       	rjmp	.-320    	; 0x1756 <create_Password+0x22>
			}
			_delay_ms(500);
		}
	}

}
    1896:	62 96       	adiw	r28, 0x12	; 18
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <send_Password>:
 * Description :
 * Function responsible for :
 * 1-Sending Password entered by the user from HMI_ECU TO Control_ECU through UART
 */
void send_Password(uint8 *Password_ptr1)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <send_Password+0x6>
    18ae:	0f 92       	push	r0
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	9b 83       	std	Y+3, r25	; 0x03
    18b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	UART_sendByte(READY);
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <UART_sendByte>
	while(UART_recieveByte()!=READY);
    18be:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART_recieveByte>
    18c2:	8f 3f       	cpi	r24, 0xFF	; 255
    18c4:	e1 f7       	brne	.-8      	; 0x18be <send_Password+0x16>
	for(i=0;i<PASSWORD_SIZE;i++)
    18c6:	19 82       	std	Y+1, r1	; 0x01
    18c8:	0e c0       	rjmp	.+28     	; 0x18e6 <send_Password+0x3e>
	{
		UART_sendByte(Password_ptr1[i]);
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	fc 01       	movw	r30, r24
    18d6:	e2 0f       	add	r30, r18
    18d8:	f3 1f       	adc	r31, r19
    18da:	80 81       	ld	r24, Z
    18dc:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <UART_sendByte>
void send_Password(uint8 *Password_ptr1)
{
	uint8 i;
	UART_sendByte(READY);
	while(UART_recieveByte()!=READY);
	for(i=0;i<PASSWORD_SIZE;i++)
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	85 30       	cpi	r24, 0x05	; 5
    18ea:	78 f3       	brcs	.-34     	; 0x18ca <send_Password+0x22>
	{
		UART_sendByte(Password_ptr1[i]);
	}
	while(UART_recieveByte()!=DONE);
    18ec:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART_recieveByte>
    18f0:	8e 3f       	cpi	r24, 0xFE	; 254
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <send_Password+0x44>

}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <Password_Checker>:
 * Description :
 * Function responsible for :
 * 1-Sending Password entered by the user from HMI_ECU TO Control_ECU through UART
 */
uint8 Password_Checker(void)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	uint8 state=-1;
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	89 83       	std	Y+1, r24	; 0x01
	state= recieve_Byte();
    190e:	0e 94 8f 0c 	call	0x191e	; 0x191e <recieve_Byte>
    1912:	89 83       	std	Y+1, r24	; 0x01
	return state;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
}
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <recieve_Byte>:
 * Function Description :
 * synchronising the UART in the Control_ECU and the UART in HMI_ECU
 * Receiving data from the UART in the HMI_ECU
 */
uint8 recieve_Byte(void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	uint8 byte;
	while(UART_recieveByte() != READY){}
    1928:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART_recieveByte>
    192c:	8f 3f       	cpi	r24, 0xFF	; 255
    192e:	e1 f7       	brne	.-8      	; 0x1928 <recieve_Byte+0xa>
	UART_sendByte(READY);
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <UART_sendByte>
	byte=UART_recieveByte();
    1936:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART_recieveByte>
    193a:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(DONE);
    193c:	8e ef       	ldi	r24, 0xFE	; 254
    193e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <UART_sendByte>
	return byte;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
}
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <send_Byte>:
 * Description :
 * synchronising the UART in the Control_ECU and the UART in HMI_ECU
 * Sending data to the UART in the HMI_ECU
 */
void send_Byte(uint8 byte)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <UART_sendByte>
	while(UART_recieveByte() != READY){}
    195e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART_recieveByte>
    1962:	8f 3f       	cpi	r24, 0xFF	; 255
    1964:	e1 f7       	brne	.-8      	; 0x195e <send_Byte+0x12>
	UART_sendByte(byte);
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <UART_sendByte>
	while(UART_recieveByte() != DONE){}
    196c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART_recieveByte>
    1970:	8e 3f       	cpi	r24, 0xFE	; 254
    1972:	e1 f7       	brne	.-8      	; 0x196c <send_Byte+0x20>
}
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <timer1_SetRequiredCallBackFunction>:
/*
 * Function Description :
 * used to increment a global variable to indicate number of interrupts happend for timer1
 */
void timer1_SetRequiredCallBackFunction(void)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1984:	80 91 5d 01 	lds	r24, 0x015D
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 93 5d 01 	sts	0x015D, r24
}
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	60 97       	sbiw	r28, 0x10	; 16
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	62 e0       	ldi	r22, 0x02	; 2
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	63 e0       	ldi	r22, 0x03	; 3
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	64 e0       	ldi	r22, 0x04	; 4
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	65 e0       	ldi	r22, 0x05	; 5
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	66 e0       	ldi	r22, 0x06	; 6
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19f8:	1f 86       	std	Y+15, r1	; 0x0f
    19fa:	ab c0       	rjmp	.+342    	; 0x1b52 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a10:	18 8a       	std	Y+16, r1	; 0x10
    1a12:	22 c0       	rjmp	.+68     	; 0x1a58 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1a14:	88 89       	ldd	r24, Y+16	; 0x10
    1a16:	98 2f       	mov	r25, r24
    1a18:	9c 5f       	subi	r25, 0xFC	; 252
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	69 2f       	mov	r22, r25
    1a1e:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1a22:	88 23       	and	r24, r24
    1a24:	b1 f4       	brne	.+44     	; 0x1a52 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	98 2f       	mov	r25, r24
    1a36:	88 89       	ldd	r24, Y+16	; 0x10
    1a38:	89 0f       	add	r24, r25
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(15); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1a40:	60 96       	adiw	r28, 0x10	; 16
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a52:	88 89       	ldd	r24, Y+16	; 0x10
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	88 8b       	std	Y+16, r24	; 0x10
    1a58:	88 89       	ldd	r24, Y+16	; 0x10
    1a5a:	84 30       	cpi	r24, 0x04	; 4
    1a5c:	d8 f2       	brcs	.-74     	; 0x1a14 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 e7       	ldi	r26, 0x70	; 112
    1a6e:	b1 e4       	ldi	r27, 0x41	; 65
    1a70:	8b 87       	std	Y+11, r24	; 0x0b
    1a72:	9c 87       	std	Y+12, r25	; 0x0c
    1a74:	ad 87       	std	Y+13, r26	; 0x0d
    1a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	4a ef       	ldi	r20, 0xFA	; 250
    1a86:	54 e4       	ldi	r21, 0x44	; 68
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8f 83       	std	Y+7, r24	; 0x07
    1a92:	98 87       	std	Y+8, r25	; 0x08
    1a94:	a9 87       	std	Y+9, r26	; 0x09
    1a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	2c f4       	brge	.+10     	; 0x1aba <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	3f c0       	rjmp	.+126    	; 0x1b38 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	57 e4       	ldi	r21, 0x47	; 71
    1aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	4c f5       	brge	.+82     	; 0x1b24 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e2       	ldi	r20, 0x20	; 32
    1ae0:	51 e4       	ldi	r21, 0x41	; 65
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <KEYPAD_getPressedKey+0x186>
    1afc:	88 ec       	ldi	r24, 0xC8	; 200
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 83       	std	Y+3, r24	; 0x03
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <KEYPAD_getPressedKey+0x174>
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	69 f7       	brne	.-38     	; 0x1afc <KEYPAD_getPressedKey+0x168>
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <KEYPAD_getPressedKey+0x1b0>
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	8f 87       	std	Y+15, r24	; 0x0f
    1b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	08 f4       	brcc	.+2      	; 0x1b5a <KEYPAD_getPressedKey+0x1c6>
    1b58:	51 cf       	rjmp	.-350    	; 0x19fc <KEYPAD_getPressedKey+0x68>
    1b5a:	4e cf       	rjmp	.-356    	; 0x19f8 <KEYPAD_getPressedKey+0x64>

00001b5c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b6a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	3c 83       	std	Y+4, r19	; 0x04
    1b74:	2b 83       	std	Y+3, r18	; 0x03
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	88 30       	cpi	r24, 0x08	; 8
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b80:	70 c0       	rjmp	.+224    	; 0x1c62 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b82:	2b 81       	ldd	r18, Y+3	; 0x03
    1b84:	3c 81       	ldd	r19, Y+4	; 0x04
    1b86:	29 30       	cpi	r18, 0x09	; 9
    1b88:	31 05       	cpc	r19, r1
    1b8a:	5c f5       	brge	.+86     	; 0x1be2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	84 30       	cpi	r24, 0x04	; 4
    1b92:	91 05       	cpc	r25, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b96:	59 c0       	rjmp	.+178    	; 0x1c4a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b98:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9c:	25 30       	cpi	r18, 0x05	; 5
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	9c f4       	brge	.+38     	; 0x1bc8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	82 30       	cpi	r24, 0x02	; 2
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <KEYPAD_4x4_adjustKeyNumber+0x52>
    1bac:	48 c0       	rjmp	.+144    	; 0x1c3e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	23 30       	cpi	r18, 0x03	; 3
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	0c f0       	brlt	.+2      	; 0x1bba <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1bb8:	45 c0       	rjmp	.+138    	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1bc4:	39 c0       	rjmp	.+114    	; 0x1c38 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1bc6:	67 c0       	rjmp	.+206    	; 0x1c96 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bca:	3c 81       	ldd	r19, Y+4	; 0x04
    1bcc:	26 30       	cpi	r18, 0x06	; 6
    1bce:	31 05       	cpc	r19, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1bd2:	41 c0       	rjmp	.+130    	; 0x1c56 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	87 30       	cpi	r24, 0x07	; 7
    1bda:	91 05       	cpc	r25, r1
    1bdc:	0c f0       	brlt	.+2      	; 0x1be0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1bde:	3e c0       	rjmp	.+124    	; 0x1c5c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1be0:	37 c0       	rjmp	.+110    	; 0x1c50 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	2c 30       	cpi	r18, 0x0C	; 12
    1be8:	31 05       	cpc	r19, r1
    1bea:	09 f4       	brne	.+2      	; 0x1bee <KEYPAD_4x4_adjustKeyNumber+0x92>
    1bec:	46 c0       	rjmp	.+140    	; 0x1c7a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	8d 30       	cpi	r24, 0x0D	; 13
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	5c f4       	brge	.+22     	; 0x1c0e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1bf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfc:	2a 30       	cpi	r18, 0x0A	; 10
    1bfe:	31 05       	cpc	r19, r1
    1c00:	b1 f1       	breq	.+108    	; 0x1c6e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	8b 30       	cpi	r24, 0x0B	; 11
    1c08:	91 05       	cpc	r25, r1
    1c0a:	a4 f5       	brge	.+104    	; 0x1c74 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c0c:	2d c0       	rjmp	.+90     	; 0x1c68 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	2e 30       	cpi	r18, 0x0E	; 14
    1c14:	31 05       	cpc	r19, r1
    1c16:	b9 f1       	breq	.+110    	; 0x1c86 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	8e 30       	cpi	r24, 0x0E	; 14
    1c1e:	91 05       	cpc	r25, r1
    1c20:	7c f1       	brlt	.+94     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c22:	2b 81       	ldd	r18, Y+3	; 0x03
    1c24:	3c 81       	ldd	r19, Y+4	; 0x04
    1c26:	2f 30       	cpi	r18, 0x0F	; 15
    1c28:	31 05       	cpc	r19, r1
    1c2a:	79 f1       	breq	.+94     	; 0x1c8a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	80 31       	cpi	r24, 0x10	; 16
    1c32:	91 05       	cpc	r25, r1
    1c34:	69 f1       	breq	.+90     	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c36:	2f c0       	rjmp	.+94     	; 0x1c96 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1c38:	87 e0       	ldi	r24, 0x07	; 7
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	2e c0       	rjmp	.+92     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1c3e:	88 e0       	ldi	r24, 0x08	; 8
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	2b c0       	rjmp	.+86     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1c44:	89 e0       	ldi	r24, 0x09	; 9
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	28 c0       	rjmp	.+80     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c4a:	85 e2       	ldi	r24, 0x25	; 37
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	25 c0       	rjmp	.+74     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	22 c0       	rjmp	.+68     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c56:	85 e0       	ldi	r24, 0x05	; 5
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	1f c0       	rjmp	.+62     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c5c:	86 e0       	ldi	r24, 0x06	; 6
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	1c c0       	rjmp	.+56     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c62:	8a e2       	ldi	r24, 0x2A	; 42
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	19 c0       	rjmp	.+50     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	16 c0       	rjmp	.+44     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	13 c0       	rjmp	.+38     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	10 c0       	rjmp	.+32     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c7a:	8d e2       	ldi	r24, 0x2D	; 45
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	0d c0       	rjmp	.+26     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c80:	8d e0       	ldi	r24, 0x0D	; 13
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	0a c0       	rjmp	.+20     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c86:	19 82       	std	Y+1, r1	; 0x01
    1c88:	08 c0       	rjmp	.+16     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c8a:	8d e3       	ldi	r24, 0x3D	; 61
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c90:	8b e2       	ldi	r24, 0x2B	; 43
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	2e 97       	sbiw	r28, 0x0e	; 14
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 ea       	ldi	r26, 0xA0	; 160
    1cd8:	b1 e4       	ldi	r27, 0x41	; 65
    1cda:	8b 87       	std	Y+11, r24	; 0x0b
    1cdc:	9c 87       	std	Y+12, r25	; 0x0c
    1cde:	ad 87       	std	Y+13, r26	; 0x0d
    1ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a ef       	ldi	r20, 0xFA	; 250
    1cf0:	54 e4       	ldi	r21, 0x44	; 68
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8f 83       	std	Y+7, r24	; 0x07
    1cfc:	98 87       	std	Y+8, r25	; 0x08
    1cfe:	a9 87       	std	Y+9, r26	; 0x09
    1d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d02:	6f 81       	ldd	r22, Y+7	; 0x07
    1d04:	78 85       	ldd	r23, Y+8	; 0x08
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <LCD_init+0x7a>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	3f c0       	rjmp	.+126    	; 0x1da2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f e7       	ldi	r20, 0x7F	; 127
    1d32:	57 e4       	ldi	r21, 0x47	; 71
    1d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d38:	18 16       	cp	r1, r24
    1d3a:	4c f5       	brge	.+82     	; 0x1d8e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <LCD_init+0xda>
    1d66:	88 ec       	ldi	r24, 0xC8	; 200
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_init+0xc8>
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f7       	brne	.-38     	; 0x1d66 <LCD_init+0xbc>
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_init+0x104>
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	6f ef       	ldi	r22, 0xFF	; 255
    1dba:	0e 94 99 08 	call	0x1132	; 0x1132 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1dbe:	88 e3       	ldi	r24, 0x38	; 56
    1dc0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1dc4:	8c e0       	ldi	r24, 0x0C	; 12
    1dc6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_sendCommand>
}
    1dd0:	2e 96       	adiw	r28, 0x0e	; 14
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 a_command)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	e9 97       	sbiw	r28, 0x39	; 57
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e8       	ldi	r26, 0x80	; 128
    1e08:	bf e3       	ldi	r27, 0x3F	; 63
    1e0a:	8d ab       	std	Y+53, r24	; 0x35
    1e0c:	9e ab       	std	Y+54, r25	; 0x36
    1e0e:	af ab       	std	Y+55, r26	; 0x37
    1e10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e12:	6d a9       	ldd	r22, Y+53	; 0x35
    1e14:	7e a9       	ldd	r23, Y+54	; 0x36
    1e16:	8f a9       	ldd	r24, Y+55	; 0x37
    1e18:	98 ad       	ldd	r25, Y+56	; 0x38
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	4a ef       	ldi	r20, 0xFA	; 250
    1e20:	54 e4       	ldi	r21, 0x44	; 68
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	89 ab       	std	Y+49, r24	; 0x31
    1e2c:	9a ab       	std	Y+50, r25	; 0x32
    1e2e:	ab ab       	std	Y+51, r26	; 0x33
    1e30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e32:	69 a9       	ldd	r22, Y+49	; 0x31
    1e34:	7a a9       	ldd	r23, Y+50	; 0x32
    1e36:	8b a9       	ldd	r24, Y+51	; 0x33
    1e38:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	2c f4       	brge	.+10     	; 0x1e54 <LCD_sendCommand+0x72>
		__ticks = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	98 ab       	std	Y+48, r25	; 0x30
    1e50:	8f a7       	std	Y+47, r24	; 0x2f
    1e52:	3f c0       	rjmp	.+126    	; 0x1ed2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e54:	69 a9       	ldd	r22, Y+49	; 0x31
    1e56:	7a a9       	ldd	r23, Y+50	; 0x32
    1e58:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255
    1e60:	4f e7       	ldi	r20, 0x7F	; 127
    1e62:	57 e4       	ldi	r21, 0x47	; 71
    1e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e68:	18 16       	cp	r1, r24
    1e6a:	4c f5       	brge	.+82     	; 0x1ebe <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e70:	8f a9       	ldd	r24, Y+55	; 0x37
    1e72:	98 ad       	ldd	r25, Y+56	; 0x38
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	98 ab       	std	Y+48, r25	; 0x30
    1e92:	8f a7       	std	Y+47, r24	; 0x2f
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <LCD_sendCommand+0xd2>
    1e96:	88 ec       	ldi	r24, 0xC8	; 200
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9e a7       	std	Y+46, r25	; 0x2e
    1e9c:	8d a7       	std	Y+45, r24	; 0x2d
    1e9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_sendCommand+0xc0>
    1ea6:	9e a7       	std	Y+46, r25	; 0x2e
    1ea8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eac:	98 a9       	ldd	r25, Y+48	; 0x30
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	98 ab       	std	Y+48, r25	; 0x30
    1eb2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	69 f7       	brne	.-38     	; 0x1e96 <LCD_sendCommand+0xb4>
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	98 ab       	std	Y+48, r25	; 0x30
    1ed0:	8f a7       	std	Y+47, r24	; 0x2f
    1ed2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed6:	9c a7       	std	Y+44, r25	; 0x2c
    1ed8:	8b a7       	std	Y+43, r24	; 0x2b
    1eda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1edc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_sendCommand+0xfc>
    1ee2:	9c a7       	std	Y+44, r25	; 0x2c
    1ee4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a0 e8       	ldi	r26, 0x80	; 128
    1ef6:	bf e3       	ldi	r27, 0x3F	; 63
    1ef8:	8f a3       	std	Y+39, r24	; 0x27
    1efa:	98 a7       	std	Y+40, r25	; 0x28
    1efc:	a9 a7       	std	Y+41, r26	; 0x29
    1efe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	6f a1       	ldd	r22, Y+39	; 0x27
    1f02:	78 a5       	ldd	r23, Y+40	; 0x28
    1f04:	89 a5       	ldd	r24, Y+41	; 0x29
    1f06:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a ef       	ldi	r20, 0xFA	; 250
    1f0e:	54 e4       	ldi	r21, 0x44	; 68
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	8b a3       	std	Y+35, r24	; 0x23
    1f1a:	9c a3       	std	Y+36, r25	; 0x24
    1f1c:	ad a3       	std	Y+37, r26	; 0x25
    1f1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f20:	6b a1       	ldd	r22, Y+35	; 0x23
    1f22:	7c a1       	ldd	r23, Y+36	; 0x24
    1f24:	8d a1       	ldd	r24, Y+37	; 0x25
    1f26:	9e a1       	ldd	r25, Y+38	; 0x26
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <LCD_sendCommand+0x160>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9a a3       	std	Y+34, r25	; 0x22
    1f3e:	89 a3       	std	Y+33, r24	; 0x21
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1f42:	6b a1       	ldd	r22, Y+35	; 0x23
    1f44:	7c a1       	ldd	r23, Y+36	; 0x24
    1f46:	8d a1       	ldd	r24, Y+37	; 0x25
    1f48:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9a a3       	std	Y+34, r25	; 0x22
    1f80:	89 a3       	std	Y+33, r24	; 0x21
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <LCD_sendCommand+0x1c0>
    1f84:	88 ec       	ldi	r24, 0xC8	; 200
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	98 a3       	std	Y+32, r25	; 0x20
    1f8a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f8e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_sendCommand+0x1ae>
    1f94:	98 a3       	std	Y+32, r25	; 0x20
    1f96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9a a3       	std	Y+34, r25	; 0x22
    1fa0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <LCD_sendCommand+0x1a2>
    1faa:	14 c0       	rjmp	.+40     	; 0x1fd4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	6b a1       	ldd	r22, Y+35	; 0x23
    1fae:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9a a3       	std	Y+34, r25	; 0x22
    1fbe:	89 a3       	std	Y+33, r24	; 0x21
    1fc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc6:	8d 8f       	std	Y+29, r24	; 0x1d
    1fc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_sendCommand+0x1ea>
    1fd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,a_command); /* out the required command to the data bus D0 --> D7 */
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	69 ad       	ldd	r22, Y+57	; 0x39
    1fd8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_writePort>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a0 e8       	ldi	r26, 0x80	; 128
    1fe2:	bf e3       	ldi	r27, 0x3F	; 63
    1fe4:	89 8f       	std	Y+25, r24	; 0x19
    1fe6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe8:	ab 8f       	std	Y+27, r26	; 0x1b
    1fea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	69 8d       	ldd	r22, Y+25	; 0x19
    1fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a ef       	ldi	r20, 0xFA	; 250
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8d 8b       	std	Y+21, r24	; 0x15
    2006:	9e 8b       	std	Y+22, r25	; 0x16
    2008:	af 8b       	std	Y+23, r26	; 0x17
    200a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    200c:	6d 89       	ldd	r22, Y+21	; 0x15
    200e:	7e 89       	ldd	r23, Y+22	; 0x16
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e8       	ldi	r20, 0x80	; 128
    201a:	5f e3       	ldi	r21, 0x3F	; 63
    201c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2020:	88 23       	and	r24, r24
    2022:	2c f4       	brge	.+10     	; 0x202e <LCD_sendCommand+0x24c>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9c 8b       	std	Y+20, r25	; 0x14
    202a:	8b 8b       	std	Y+19, r24	; 0x13
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    202e:	6d 89       	ldd	r22, Y+21	; 0x15
    2030:	7e 89       	ldd	r23, Y+22	; 0x16
    2032:	8f 89       	ldd	r24, Y+23	; 0x17
    2034:	98 8d       	ldd	r25, Y+24	; 0x18
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	57 e4       	ldi	r21, 0x47	; 71
    203e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	4c f5       	brge	.+82     	; 0x2098 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2046:	69 8d       	ldd	r22, Y+25	; 0x19
    2048:	7a 8d       	ldd	r23, Y+26	; 0x1a
    204a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9c 8b       	std	Y+20, r25	; 0x14
    206c:	8b 8b       	std	Y+19, r24	; 0x13
    206e:	0f c0       	rjmp	.+30     	; 0x208e <LCD_sendCommand+0x2ac>
    2070:	88 ec       	ldi	r24, 0xC8	; 200
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9a 8b       	std	Y+18, r25	; 0x12
    2076:	89 8b       	std	Y+17, r24	; 0x11
    2078:	89 89       	ldd	r24, Y+17	; 0x11
    207a:	9a 89       	ldd	r25, Y+18	; 0x12
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_sendCommand+0x29a>
    2080:	9a 8b       	std	Y+18, r25	; 0x12
    2082:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	8b 89       	ldd	r24, Y+19	; 0x13
    2086:	9c 89       	ldd	r25, Y+20	; 0x14
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	9c 8b       	std	Y+20, r25	; 0x14
    208c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	8b 89       	ldd	r24, Y+19	; 0x13
    2090:	9c 89       	ldd	r25, Y+20	; 0x14
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	69 f7       	brne	.-38     	; 0x2070 <LCD_sendCommand+0x28e>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	6d 89       	ldd	r22, Y+21	; 0x15
    209a:	7e 89       	ldd	r23, Y+22	; 0x16
    209c:	8f 89       	ldd	r24, Y+23	; 0x17
    209e:	98 8d       	ldd	r25, Y+24	; 0x18
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9c 8b       	std	Y+20, r25	; 0x14
    20aa:	8b 8b       	std	Y+19, r24	; 0x13
    20ac:	8b 89       	ldd	r24, Y+19	; 0x13
    20ae:	9c 89       	ldd	r25, Y+20	; 0x14
    20b0:	98 8b       	std	Y+16, r25	; 0x10
    20b2:	8f 87       	std	Y+15, r24	; 0x0f
    20b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b6:	98 89       	ldd	r25, Y+16	; 0x10
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_sendCommand+0x2d6>
    20bc:	98 8b       	std	Y+16, r25	; 0x10
    20be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e8       	ldi	r26, 0x80	; 128
    20d0:	bf e3       	ldi	r27, 0x3F	; 63
    20d2:	8b 87       	std	Y+11, r24	; 0x0b
    20d4:	9c 87       	std	Y+12, r25	; 0x0c
    20d6:	ad 87       	std	Y+13, r26	; 0x0d
    20d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	6b 85       	ldd	r22, Y+11	; 0x0b
    20dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a ef       	ldi	r20, 0xFA	; 250
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8f 83       	std	Y+7, r24	; 0x07
    20f4:	98 87       	std	Y+8, r25	; 0x08
    20f6:	a9 87       	std	Y+9, r26	; 0x09
    20f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fa:	6f 81       	ldd	r22, Y+7	; 0x07
    20fc:	78 85       	ldd	r23, Y+8	; 0x08
    20fe:	89 85       	ldd	r24, Y+9	; 0x09
    2100:	9a 85       	ldd	r25, Y+10	; 0x0a
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <LCD_sendCommand+0x33a>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	3f c0       	rjmp	.+126    	; 0x219a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	6b 85       	ldd	r22, Y+11	; 0x0b
    2136:	7c 85       	ldd	r23, Y+12	; 0x0c
    2138:	8d 85       	ldd	r24, Y+13	; 0x0d
    213a:	9e 85       	ldd	r25, Y+14	; 0x0e
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	0f c0       	rjmp	.+30     	; 0x217c <LCD_sendCommand+0x39a>
    215e:	88 ec       	ldi	r24, 0xC8	; 200
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_sendCommand+0x388>
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <LCD_sendCommand+0x37c>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	8d 83       	std	Y+5, r24	; 0x05
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	9e 81       	ldd	r25, Y+6	; 0x06
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_sendCommand+0x3c4>
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21ae:	e9 96       	adiw	r28, 0x39	; 57
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 a_data)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	e9 97       	sbiw	r28, 0x39	; 57
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e8       	ldi	r26, 0x80	; 128
    21e6:	bf e3       	ldi	r27, 0x3F	; 63
    21e8:	8d ab       	std	Y+53, r24	; 0x35
    21ea:	9e ab       	std	Y+54, r25	; 0x36
    21ec:	af ab       	std	Y+55, r26	; 0x37
    21ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f0:	6d a9       	ldd	r22, Y+53	; 0x35
    21f2:	7e a9       	ldd	r23, Y+54	; 0x36
    21f4:	8f a9       	ldd	r24, Y+55	; 0x37
    21f6:	98 ad       	ldd	r25, Y+56	; 0x38
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a ef       	ldi	r20, 0xFA	; 250
    21fe:	54 e4       	ldi	r21, 0x44	; 68
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	89 ab       	std	Y+49, r24	; 0x31
    220a:	9a ab       	std	Y+50, r25	; 0x32
    220c:	ab ab       	std	Y+51, r26	; 0x33
    220e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2210:	69 a9       	ldd	r22, Y+49	; 0x31
    2212:	7a a9       	ldd	r23, Y+50	; 0x32
    2214:	8b a9       	ldd	r24, Y+51	; 0x33
    2216:	9c a9       	ldd	r25, Y+52	; 0x34
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	2c f4       	brge	.+10     	; 0x2232 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	98 ab       	std	Y+48, r25	; 0x30
    222e:	8f a7       	std	Y+47, r24	; 0x2f
    2230:	3f c0       	rjmp	.+126    	; 0x22b0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2232:	69 a9       	ldd	r22, Y+49	; 0x31
    2234:	7a a9       	ldd	r23, Y+50	; 0x32
    2236:	8b a9       	ldd	r24, Y+51	; 0x33
    2238:	9c a9       	ldd	r25, Y+52	; 0x34
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	4c f5       	brge	.+82     	; 0x229c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224a:	6d a9       	ldd	r22, Y+53	; 0x35
    224c:	7e a9       	ldd	r23, Y+54	; 0x36
    224e:	8f a9       	ldd	r24, Y+55	; 0x37
    2250:	98 ad       	ldd	r25, Y+56	; 0x38
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	51 e4       	ldi	r21, 0x41	; 65
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	98 ab       	std	Y+48, r25	; 0x30
    2270:	8f a7       	std	Y+47, r24	; 0x2f
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <LCD_displayCharacter+0xd2>
    2274:	88 ec       	ldi	r24, 0xC8	; 200
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9e a7       	std	Y+46, r25	; 0x2e
    227a:	8d a7       	std	Y+45, r24	; 0x2d
    227c:	8d a5       	ldd	r24, Y+45	; 0x2d
    227e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_displayCharacter+0xc0>
    2284:	9e a7       	std	Y+46, r25	; 0x2e
    2286:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	8f a5       	ldd	r24, Y+47	; 0x2f
    228a:	98 a9       	ldd	r25, Y+48	; 0x30
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	98 ab       	std	Y+48, r25	; 0x30
    2290:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2292:	8f a5       	ldd	r24, Y+47	; 0x2f
    2294:	98 a9       	ldd	r25, Y+48	; 0x30
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	69 f7       	brne	.-38     	; 0x2274 <LCD_displayCharacter+0xb4>
    229a:	14 c0       	rjmp	.+40     	; 0x22c4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	69 a9       	ldd	r22, Y+49	; 0x31
    229e:	7a a9       	ldd	r23, Y+50	; 0x32
    22a0:	8b a9       	ldd	r24, Y+51	; 0x33
    22a2:	9c a9       	ldd	r25, Y+52	; 0x34
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	98 ab       	std	Y+48, r25	; 0x30
    22ae:	8f a7       	std	Y+47, r24	; 0x2f
    22b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b2:	98 a9       	ldd	r25, Y+48	; 0x30
    22b4:	9c a7       	std	Y+44, r25	; 0x2c
    22b6:	8b a7       	std	Y+43, r24	; 0x2b
    22b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_displayCharacter+0xfc>
    22c0:	9c a7       	std	Y+44, r25	; 0x2c
    22c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 e8       	ldi	r26, 0x80	; 128
    22d4:	bf e3       	ldi	r27, 0x3F	; 63
    22d6:	8f a3       	std	Y+39, r24	; 0x27
    22d8:	98 a7       	std	Y+40, r25	; 0x28
    22da:	a9 a7       	std	Y+41, r26	; 0x29
    22dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22de:	6f a1       	ldd	r22, Y+39	; 0x27
    22e0:	78 a5       	ldd	r23, Y+40	; 0x28
    22e2:	89 a5       	ldd	r24, Y+41	; 0x29
    22e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a ef       	ldi	r20, 0xFA	; 250
    22ec:	54 e4       	ldi	r21, 0x44	; 68
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8b a3       	std	Y+35, r24	; 0x23
    22f8:	9c a3       	std	Y+36, r25	; 0x24
    22fa:	ad a3       	std	Y+37, r26	; 0x25
    22fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2300:	7c a1       	ldd	r23, Y+36	; 0x24
    2302:	8d a1       	ldd	r24, Y+37	; 0x25
    2304:	9e a1       	ldd	r25, Y+38	; 0x26
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	2c f4       	brge	.+10     	; 0x2320 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9a a3       	std	Y+34, r25	; 0x22
    231c:	89 a3       	std	Y+33, r24	; 0x21
    231e:	3f c0       	rjmp	.+126    	; 0x239e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2320:	6b a1       	ldd	r22, Y+35	; 0x23
    2322:	7c a1       	ldd	r23, Y+36	; 0x24
    2324:	8d a1       	ldd	r24, Y+37	; 0x25
    2326:	9e a1       	ldd	r25, Y+38	; 0x26
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	4c f5       	brge	.+82     	; 0x238a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2338:	6f a1       	ldd	r22, Y+39	; 0x27
    233a:	78 a5       	ldd	r23, Y+40	; 0x28
    233c:	89 a5       	ldd	r24, Y+41	; 0x29
    233e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	51 e4       	ldi	r21, 0x41	; 65
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9a a3       	std	Y+34, r25	; 0x22
    235e:	89 a3       	std	Y+33, r24	; 0x21
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <LCD_displayCharacter+0x1c0>
    2362:	88 ec       	ldi	r24, 0xC8	; 200
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	98 a3       	std	Y+32, r25	; 0x20
    2368:	8f 8f       	std	Y+31, r24	; 0x1f
    236a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    236c:	98 a1       	ldd	r25, Y+32	; 0x20
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <LCD_displayCharacter+0x1ae>
    2372:	98 a3       	std	Y+32, r25	; 0x20
    2374:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2376:	89 a1       	ldd	r24, Y+33	; 0x21
    2378:	9a a1       	ldd	r25, Y+34	; 0x22
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	9a a3       	std	Y+34, r25	; 0x22
    237e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2380:	89 a1       	ldd	r24, Y+33	; 0x21
    2382:	9a a1       	ldd	r25, Y+34	; 0x22
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	69 f7       	brne	.-38     	; 0x2362 <LCD_displayCharacter+0x1a2>
    2388:	14 c0       	rjmp	.+40     	; 0x23b2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238a:	6b a1       	ldd	r22, Y+35	; 0x23
    238c:	7c a1       	ldd	r23, Y+36	; 0x24
    238e:	8d a1       	ldd	r24, Y+37	; 0x25
    2390:	9e a1       	ldd	r25, Y+38	; 0x26
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9a a3       	std	Y+34, r25	; 0x22
    239c:	89 a3       	std	Y+33, r24	; 0x21
    239e:	89 a1       	ldd	r24, Y+33	; 0x21
    23a0:	9a a1       	ldd	r25, Y+34	; 0x22
    23a2:	9e 8f       	std	Y+30, r25	; 0x1e
    23a4:	8d 8f       	std	Y+29, r24	; 0x1d
    23a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_displayCharacter+0x1ea>
    23ae:	9e 8f       	std	Y+30, r25	; 0x1e
    23b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,a_data); /* out the required command to the data bus D0 --> D7 */
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	69 ad       	ldd	r22, Y+57	; 0x39
    23b6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_writePort>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e8       	ldi	r26, 0x80	; 128
    23c0:	bf e3       	ldi	r27, 0x3F	; 63
    23c2:	89 8f       	std	Y+25, r24	; 0x19
    23c4:	9a 8f       	std	Y+26, r25	; 0x1a
    23c6:	ab 8f       	std	Y+27, r26	; 0x1b
    23c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	69 8d       	ldd	r22, Y+25	; 0x19
    23cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a ef       	ldi	r20, 0xFA	; 250
    23d8:	54 e4       	ldi	r21, 0x44	; 68
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8d 8b       	std	Y+21, r24	; 0x15
    23e4:	9e 8b       	std	Y+22, r25	; 0x16
    23e6:	af 8b       	std	Y+23, r26	; 0x17
    23e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ea:	6d 89       	ldd	r22, Y+21	; 0x15
    23ec:	7e 89       	ldd	r23, Y+22	; 0x16
    23ee:	8f 89       	ldd	r24, Y+23	; 0x17
    23f0:	98 8d       	ldd	r25, Y+24	; 0x18
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	5f e3       	ldi	r21, 0x3F	; 63
    23fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fe:	88 23       	and	r24, r24
    2400:	2c f4       	brge	.+10     	; 0x240c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 8b       	std	Y+20, r25	; 0x14
    2408:	8b 8b       	std	Y+19, r24	; 0x13
    240a:	3f c0       	rjmp	.+126    	; 0x248a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    240c:	6d 89       	ldd	r22, Y+21	; 0x15
    240e:	7e 89       	ldd	r23, Y+22	; 0x16
    2410:	8f 89       	ldd	r24, Y+23	; 0x17
    2412:	98 8d       	ldd	r25, Y+24	; 0x18
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	4c f5       	brge	.+82     	; 0x2476 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2424:	69 8d       	ldd	r22, Y+25	; 0x19
    2426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e2       	ldi	r20, 0x20	; 32
    2432:	51 e4       	ldi	r21, 0x41	; 65
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
    244c:	0f c0       	rjmp	.+30     	; 0x246c <LCD_displayCharacter+0x2ac>
    244e:	88 ec       	ldi	r24, 0xC8	; 200
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9a 8b       	std	Y+18, r25	; 0x12
    2454:	89 8b       	std	Y+17, r24	; 0x11
    2456:	89 89       	ldd	r24, Y+17	; 0x11
    2458:	9a 89       	ldd	r25, Y+18	; 0x12
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_displayCharacter+0x29a>
    245e:	9a 8b       	std	Y+18, r25	; 0x12
    2460:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	9c 8b       	std	Y+20, r25	; 0x14
    246a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	8b 89       	ldd	r24, Y+19	; 0x13
    246e:	9c 89       	ldd	r25, Y+20	; 0x14
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	69 f7       	brne	.-38     	; 0x244e <LCD_displayCharacter+0x28e>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	6d 89       	ldd	r22, Y+21	; 0x15
    2478:	7e 89       	ldd	r23, Y+22	; 0x16
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	8b 89       	ldd	r24, Y+19	; 0x13
    248c:	9c 89       	ldd	r25, Y+20	; 0x14
    248e:	98 8b       	std	Y+16, r25	; 0x10
    2490:	8f 87       	std	Y+15, r24	; 0x0f
    2492:	8f 85       	ldd	r24, Y+15	; 0x0f
    2494:	98 89       	ldd	r25, Y+16	; 0x10
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_displayCharacter+0x2d6>
    249a:	98 8b       	std	Y+16, r25	; 0x10
    249c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	61 e0       	ldi	r22, 0x01	; 1
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 e8       	ldi	r26, 0x80	; 128
    24ae:	bf e3       	ldi	r27, 0x3F	; 63
    24b0:	8b 87       	std	Y+11, r24	; 0x0b
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	ad 87       	std	Y+13, r26	; 0x0d
    24b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8f 83       	std	Y+7, r24	; 0x07
    24d2:	98 87       	std	Y+8, r25	; 0x08
    24d4:	a9 87       	std	Y+9, r26	; 0x09
    24d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <LCD_displayCharacter+0x33a>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	0f c0       	rjmp	.+30     	; 0x255a <LCD_displayCharacter+0x39a>
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9c 81       	ldd	r25, Y+4	; 0x04
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_displayCharacter+0x388>
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <LCD_displayCharacter+0x37c>
    2562:	14 c0       	rjmp	.+40     	; 0x258c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_displayCharacter+0x3c4>
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    258c:	e9 96       	adiw	r28, 0x39	; 57
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <LCD_displayString+0x6>
    25a4:	0f 92       	push	r0
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	9b 83       	std	Y+3, r25	; 0x03
    25ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25ae:	19 82       	std	Y+1, r1	; 0x01
    25b0:	0e c0       	rjmp	.+28     	; 0x25ce <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	fc 01       	movw	r30, r24
    25be:	e2 0f       	add	r30, r18
    25c0:	f3 1f       	adc	r31, r19
    25c2:	80 81       	ld	r24, Z
    25c4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_displayCharacter>
		i++;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	8f 5f       	subi	r24, 0xFF	; 255
    25cc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	9b 81       	ldd	r25, Y+3	; 0x03
    25d8:	fc 01       	movw	r30, r24
    25da:	e2 0f       	add	r30, r18
    25dc:	f3 1f       	adc	r31, r19
    25de:	80 81       	ld	r24, Z
    25e0:	88 23       	and	r24, r24
    25e2:	39 f7       	brne	.-50     	; 0x25b2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 a_row,uint8 a_col)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <LCD_moveCursor+0x6>
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <LCD_moveCursor+0x8>
    25f8:	0f 92       	push	r0
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	8a 83       	std	Y+2, r24	; 0x02
    2600:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address=0;
    2602:	19 82       	std	Y+1, r1	; 0x01

	/* Calculate the required address in the LCD DDRAM */
	switch(a_row)
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	3d 83       	std	Y+5, r19	; 0x05
    260c:	2c 83       	std	Y+4, r18	; 0x04
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
    2610:	9d 81       	ldd	r25, Y+5	; 0x05
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	91 05       	cpc	r25, r1
    2616:	c1 f0       	breq	.+48     	; 0x2648 <LCD_moveCursor+0x58>
    2618:	2c 81       	ldd	r18, Y+4	; 0x04
    261a:	3d 81       	ldd	r19, Y+5	; 0x05
    261c:	22 30       	cpi	r18, 0x02	; 2
    261e:	31 05       	cpc	r19, r1
    2620:	2c f4       	brge	.+10     	; 0x262c <LCD_moveCursor+0x3c>
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	61 f0       	breq	.+24     	; 0x2642 <LCD_moveCursor+0x52>
    262a:	19 c0       	rjmp	.+50     	; 0x265e <LCD_moveCursor+0x6e>
    262c:	2c 81       	ldd	r18, Y+4	; 0x04
    262e:	3d 81       	ldd	r19, Y+5	; 0x05
    2630:	22 30       	cpi	r18, 0x02	; 2
    2632:	31 05       	cpc	r19, r1
    2634:	69 f0       	breq	.+26     	; 0x2650 <LCD_moveCursor+0x60>
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	83 30       	cpi	r24, 0x03	; 3
    263c:	91 05       	cpc	r25, r1
    263e:	61 f0       	breq	.+24     	; 0x2658 <LCD_moveCursor+0x68>
    2640:	0e c0       	rjmp	.+28     	; 0x265e <LCD_moveCursor+0x6e>
	{
		case 0:
			lcd_memory_address=a_col;
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	0b c0       	rjmp	.+22     	; 0x265e <LCD_moveCursor+0x6e>
				break;
		case 1:
			lcd_memory_address=a_col+0x40;
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	80 5c       	subi	r24, 0xC0	; 192
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	07 c0       	rjmp	.+14     	; 0x265e <LCD_moveCursor+0x6e>
				break;
		case 2:
			lcd_memory_address=a_col+0x10;
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	80 5f       	subi	r24, 0xF0	; 240
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	03 c0       	rjmp	.+6      	; 0x265e <LCD_moveCursor+0x6e>
				break;
		case 3:
			lcd_memory_address=a_col+0x50;
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	80 5b       	subi	r24, 0xB0	; 176
    265c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	80 68       	ori	r24, 0x80	; 128
    2662:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_sendCommand>
}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 a_row,uint8 a_col,const char *Str)
{
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	00 d0       	rcall	.+0      	; 0x267c <LCD_displayStringRowColumn+0x6>
    267c:	00 d0       	rcall	.+0      	; 0x267e <LCD_displayStringRowColumn+0x8>
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	6a 83       	std	Y+2, r22	; 0x02
    2686:	5c 83       	std	Y+4, r21	; 0x04
    2688:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row,a_col); /* go to to the required LCD position */
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	6a 81       	ldd	r22, Y+2	; 0x02
    268e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	0e 94 cf 12 	call	0x259e	; 0x259e <LCD_displayString>
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(sint16 a_data)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	62 97       	sbiw	r28, 0x12	; 18
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	9a 8b       	std	Y+18, r25	; 0x12
    26be:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(a_data,buff,10);
    26c0:	89 89       	ldd	r24, Y+17	; 0x11
    26c2:	9a 89       	ldd	r25, Y+18	; 0x12
    26c4:	9e 01       	movw	r18, r28
    26c6:	2f 5f       	subi	r18, 0xFF	; 255
    26c8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ca:	b9 01       	movw	r22, r18
    26cc:	4a e0       	ldi	r20, 0x0A	; 10
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	0e 94 52 18 	call	0x30a4	; 0x30a4 <itoa>
   	 LCD_displayString(buff);
    26d4:	ce 01       	movw	r24, r28
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	0e 94 cf 12 	call	0x259e	; 0x259e <LCD_displayString>
}
    26dc:	62 96       	adiw	r28, 0x12	; 18
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_sendCommand>
}
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <__vector_11>:

/***************************** TIMER0 **********************************/

/*interrupt service routine for timer0 OverFlow*/
ISR(TIMER0_OVF_vect)
{
    2702:	1f 92       	push	r1
    2704:	0f 92       	push	r0
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	0f 92       	push	r0
    270a:	11 24       	eor	r1, r1
    270c:	2f 93       	push	r18
    270e:	3f 93       	push	r19
    2710:	4f 93       	push	r20
    2712:	5f 93       	push	r21
    2714:	6f 93       	push	r22
    2716:	7f 93       	push	r23
    2718:	8f 93       	push	r24
    271a:	9f 93       	push	r25
    271c:	af 93       	push	r26
    271e:	bf 93       	push	r27
    2720:	ef 93       	push	r30
    2722:	ff 93       	push	r31
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[0] != NULL_PTR)
    272c:	80 91 68 01 	lds	r24, 0x0168
    2730:	90 91 69 01 	lds	r25, 0x0169
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	29 f0       	breq	.+10     	; 0x2742 <__vector_11+0x40>
	{
		g_Timers_callBackPtr[0]();
    2738:	e0 91 68 01 	lds	r30, 0x0168
    273c:	f0 91 69 01 	lds	r31, 0x0169
    2740:	09 95       	icall
	}
}
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	ff 91       	pop	r31
    2748:	ef 91       	pop	r30
    274a:	bf 91       	pop	r27
    274c:	af 91       	pop	r26
    274e:	9f 91       	pop	r25
    2750:	8f 91       	pop	r24
    2752:	7f 91       	pop	r23
    2754:	6f 91       	pop	r22
    2756:	5f 91       	pop	r21
    2758:	4f 91       	pop	r20
    275a:	3f 91       	pop	r19
    275c:	2f 91       	pop	r18
    275e:	0f 90       	pop	r0
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	0f 90       	pop	r0
    2764:	1f 90       	pop	r1
    2766:	18 95       	reti

00002768 <__vector_10>:
/*interrupt service routine for timer0 CTC*/
ISR(TIMER0_COMP_vect)
{
    2768:	1f 92       	push	r1
    276a:	0f 92       	push	r0
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	0f 92       	push	r0
    2770:	11 24       	eor	r1, r1
    2772:	2f 93       	push	r18
    2774:	3f 93       	push	r19
    2776:	4f 93       	push	r20
    2778:	5f 93       	push	r21
    277a:	6f 93       	push	r22
    277c:	7f 93       	push	r23
    277e:	8f 93       	push	r24
    2780:	9f 93       	push	r25
    2782:	af 93       	push	r26
    2784:	bf 93       	push	r27
    2786:	ef 93       	push	r30
    2788:	ff 93       	push	r31
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[0] != NULL_PTR)
    2792:	80 91 68 01 	lds	r24, 0x0168
    2796:	90 91 69 01 	lds	r25, 0x0169
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	29 f0       	breq	.+10     	; 0x27a8 <__vector_10+0x40>
	{
		g_Timers_callBackPtr[0]();
    279e:	e0 91 68 01 	lds	r30, 0x0168
    27a2:	f0 91 69 01 	lds	r31, 0x0169
    27a6:	09 95       	icall
	}
}
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	ff 91       	pop	r31
    27ae:	ef 91       	pop	r30
    27b0:	bf 91       	pop	r27
    27b2:	af 91       	pop	r26
    27b4:	9f 91       	pop	r25
    27b6:	8f 91       	pop	r24
    27b8:	7f 91       	pop	r23
    27ba:	6f 91       	pop	r22
    27bc:	5f 91       	pop	r21
    27be:	4f 91       	pop	r20
    27c0:	3f 91       	pop	r19
    27c2:	2f 91       	pop	r18
    27c4:	0f 90       	pop	r0
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	0f 90       	pop	r0
    27ca:	1f 90       	pop	r1
    27cc:	18 95       	reti

000027ce <__vector_9>:

/*************************** TIMER1 *******************************/

/*interrupt service routine for timer1 Overflow*/
ISR(TIMER1_OVF_vect)
{
    27ce:	1f 92       	push	r1
    27d0:	0f 92       	push	r0
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	0f 92       	push	r0
    27d6:	11 24       	eor	r1, r1
    27d8:	2f 93       	push	r18
    27da:	3f 93       	push	r19
    27dc:	4f 93       	push	r20
    27de:	5f 93       	push	r21
    27e0:	6f 93       	push	r22
    27e2:	7f 93       	push	r23
    27e4:	8f 93       	push	r24
    27e6:	9f 93       	push	r25
    27e8:	af 93       	push	r26
    27ea:	bf 93       	push	r27
    27ec:	ef 93       	push	r30
    27ee:	ff 93       	push	r31
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[1] != NULL_PTR)
    27f8:	80 91 6a 01 	lds	r24, 0x016A
    27fc:	90 91 6b 01 	lds	r25, 0x016B
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	29 f0       	breq	.+10     	; 0x280e <__vector_9+0x40>
	{
		g_Timers_callBackPtr[1]();
    2804:	e0 91 6a 01 	lds	r30, 0x016A
    2808:	f0 91 6b 01 	lds	r31, 0x016B
    280c:	09 95       	icall
	}
}
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	ff 91       	pop	r31
    2814:	ef 91       	pop	r30
    2816:	bf 91       	pop	r27
    2818:	af 91       	pop	r26
    281a:	9f 91       	pop	r25
    281c:	8f 91       	pop	r24
    281e:	7f 91       	pop	r23
    2820:	6f 91       	pop	r22
    2822:	5f 91       	pop	r21
    2824:	4f 91       	pop	r20
    2826:	3f 91       	pop	r19
    2828:	2f 91       	pop	r18
    282a:	0f 90       	pop	r0
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	0f 90       	pop	r0
    2830:	1f 90       	pop	r1
    2832:	18 95       	reti

00002834 <__vector_7>:

/*interrupt service routine for timer1 CTC*/
ISR(TIMER1_COMPA_vect)
{
    2834:	1f 92       	push	r1
    2836:	0f 92       	push	r0
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	0f 92       	push	r0
    283c:	11 24       	eor	r1, r1
    283e:	2f 93       	push	r18
    2840:	3f 93       	push	r19
    2842:	4f 93       	push	r20
    2844:	5f 93       	push	r21
    2846:	6f 93       	push	r22
    2848:	7f 93       	push	r23
    284a:	8f 93       	push	r24
    284c:	9f 93       	push	r25
    284e:	af 93       	push	r26
    2850:	bf 93       	push	r27
    2852:	ef 93       	push	r30
    2854:	ff 93       	push	r31
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[1] != NULL_PTR)
    285e:	80 91 6a 01 	lds	r24, 0x016A
    2862:	90 91 6b 01 	lds	r25, 0x016B
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	29 f0       	breq	.+10     	; 0x2874 <__vector_7+0x40>
	{
		g_Timers_callBackPtr[1]();
    286a:	e0 91 6a 01 	lds	r30, 0x016A
    286e:	f0 91 6b 01 	lds	r31, 0x016B
    2872:	09 95       	icall
	}
}
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	ff 91       	pop	r31
    287a:	ef 91       	pop	r30
    287c:	bf 91       	pop	r27
    287e:	af 91       	pop	r26
    2880:	9f 91       	pop	r25
    2882:	8f 91       	pop	r24
    2884:	7f 91       	pop	r23
    2886:	6f 91       	pop	r22
    2888:	5f 91       	pop	r21
    288a:	4f 91       	pop	r20
    288c:	3f 91       	pop	r19
    288e:	2f 91       	pop	r18
    2890:	0f 90       	pop	r0
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	0f 90       	pop	r0
    2896:	1f 90       	pop	r1
    2898:	18 95       	reti

0000289a <__vector_5>:

/************************** TIMER2 **************************/

/*interrupt service routine for timer2 Overflow*/
ISR(TIMER2_OVF_vect)
{
    289a:	1f 92       	push	r1
    289c:	0f 92       	push	r0
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	0f 92       	push	r0
    28a2:	11 24       	eor	r1, r1
    28a4:	2f 93       	push	r18
    28a6:	3f 93       	push	r19
    28a8:	4f 93       	push	r20
    28aa:	5f 93       	push	r21
    28ac:	6f 93       	push	r22
    28ae:	7f 93       	push	r23
    28b0:	8f 93       	push	r24
    28b2:	9f 93       	push	r25
    28b4:	af 93       	push	r26
    28b6:	bf 93       	push	r27
    28b8:	ef 93       	push	r30
    28ba:	ff 93       	push	r31
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[2] != NULL_PTR)
    28c4:	80 91 6c 01 	lds	r24, 0x016C
    28c8:	90 91 6d 01 	lds	r25, 0x016D
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	29 f0       	breq	.+10     	; 0x28da <__vector_5+0x40>
	{
		g_Timers_callBackPtr[2]();
    28d0:	e0 91 6c 01 	lds	r30, 0x016C
    28d4:	f0 91 6d 01 	lds	r31, 0x016D
    28d8:	09 95       	icall
	}
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	bf 91       	pop	r27
    28e4:	af 91       	pop	r26
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	7f 91       	pop	r23
    28ec:	6f 91       	pop	r22
    28ee:	5f 91       	pop	r21
    28f0:	4f 91       	pop	r20
    28f2:	3f 91       	pop	r19
    28f4:	2f 91       	pop	r18
    28f6:	0f 90       	pop	r0
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	0f 90       	pop	r0
    28fc:	1f 90       	pop	r1
    28fe:	18 95       	reti

00002900 <__vector_4>:

/*interrupt service routine for timer2 CTC*/
ISR(TIMER2_COMP_vect)
{
    2900:	1f 92       	push	r1
    2902:	0f 92       	push	r0
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	0f 92       	push	r0
    2908:	11 24       	eor	r1, r1
    290a:	2f 93       	push	r18
    290c:	3f 93       	push	r19
    290e:	4f 93       	push	r20
    2910:	5f 93       	push	r21
    2912:	6f 93       	push	r22
    2914:	7f 93       	push	r23
    2916:	8f 93       	push	r24
    2918:	9f 93       	push	r25
    291a:	af 93       	push	r26
    291c:	bf 93       	push	r27
    291e:	ef 93       	push	r30
    2920:	ff 93       	push	r31
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[2] != NULL_PTR)
    292a:	80 91 6c 01 	lds	r24, 0x016C
    292e:	90 91 6d 01 	lds	r25, 0x016D
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	29 f0       	breq	.+10     	; 0x2940 <__vector_4+0x40>
	{
		g_Timers_callBackPtr[2]();
    2936:	e0 91 6c 01 	lds	r30, 0x016C
    293a:	f0 91 6d 01 	lds	r31, 0x016D
    293e:	09 95       	icall
	}
}
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	ff 91       	pop	r31
    2946:	ef 91       	pop	r30
    2948:	bf 91       	pop	r27
    294a:	af 91       	pop	r26
    294c:	9f 91       	pop	r25
    294e:	8f 91       	pop	r24
    2950:	7f 91       	pop	r23
    2952:	6f 91       	pop	r22
    2954:	5f 91       	pop	r21
    2956:	4f 91       	pop	r20
    2958:	3f 91       	pop	r19
    295a:	2f 91       	pop	r18
    295c:	0f 90       	pop	r0
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	0f 90       	pop	r0
    2962:	1f 90       	pop	r1
    2964:	18 95       	reti

00002966 <Timer_setCallBack>:
/*
 * Description :
 * A function to set Call back for timers
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	00 d0       	rcall	.+0      	; 0x296c <Timer_setCallBack+0x6>
    296c:	00 d0       	rcall	.+0      	; 0x296e <Timer_setCallBack+0x8>
    296e:	0f 92       	push	r0
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	9a 83       	std	Y+2, r25	; 0x02
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	6b 83       	std	Y+3, r22	; 0x03

	switch(a_timer_ID)
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	28 2f       	mov	r18, r24
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	3d 83       	std	Y+5, r19	; 0x05
    2982:	2c 83       	std	Y+4, r18	; 0x04
    2984:	8c 81       	ldd	r24, Y+4	; 0x04
    2986:	9d 81       	ldd	r25, Y+5	; 0x05
    2988:	81 30       	cpi	r24, 0x01	; 1
    298a:	91 05       	cpc	r25, r1
    298c:	81 f0       	breq	.+32     	; 0x29ae <Timer_setCallBack+0x48>
    298e:	2c 81       	ldd	r18, Y+4	; 0x04
    2990:	3d 81       	ldd	r19, Y+5	; 0x05
    2992:	22 30       	cpi	r18, 0x02	; 2
    2994:	31 05       	cpc	r19, r1
    2996:	91 f0       	breq	.+36     	; 0x29bc <Timer_setCallBack+0x56>
    2998:	8c 81       	ldd	r24, Y+4	; 0x04
    299a:	9d 81       	ldd	r25, Y+5	; 0x05
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	a1 f4       	brne	.+40     	; 0x29c8 <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer0 */
		g_Timers_callBackPtr[0]= a_ptr;
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	90 93 69 01 	sts	0x0169, r25
    29a8:	80 93 68 01 	sts	0x0168, r24
    29ac:	0d c0       	rjmp	.+26     	; 0x29c8 <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer1 */
		g_Timers_callBackPtr[1] = a_ptr;
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	90 93 6b 01 	sts	0x016B, r25
    29b6:	80 93 6a 01 	sts	0x016A, r24
    29ba:	06 c0       	rjmp	.+12     	; 0x29c8 <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer2 */
		g_Timers_callBackPtr[2] = a_ptr;
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	9a 81       	ldd	r25, Y+2	; 0x02
    29c0:	90 93 6d 01 	sts	0x016D, r25
    29c4:	80 93 6c 01 	sts	0x016C, r24
		break;
	}

}
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <Timer_init>:
/*
 * Description :
 * A function to initialize the timers
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	2a 97       	sbiw	r28, 0x0a	; 10
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    29f0:	e9 81       	ldd	r30, Y+1	; 0x01
    29f2:	fa 81       	ldd	r31, Y+2	; 0x02
    29f4:	84 81       	ldd	r24, Z+4	; 0x04
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	3a 87       	std	Y+10, r19	; 0x0a
    29fc:	29 87       	std	Y+9, r18	; 0x09
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	91 05       	cpc	r25, r1
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <Timer_init+0x32>
    2a08:	7d c0       	rjmp	.+250    	; 0x2b04 <Timer_init+0x12c>
    2a0a:	29 85       	ldd	r18, Y+9	; 0x09
    2a0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a0e:	22 30       	cpi	r18, 0x02	; 2
    2a10:	31 05       	cpc	r19, r1
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <Timer_init+0x3e>
    2a14:	fd c0       	rjmp	.+506    	; 0x2c10 <Timer_init+0x238>
    2a16:	89 85       	ldd	r24, Y+9	; 0x09
    2a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <Timer_init+0x48>
    2a1e:	69 c1       	rjmp	.+722    	; 0x2cf2 <Timer_init+0x31a>
	{

	case Timer0:
		/*Clear registers of Timer0 And Interrupts Modules Enable before any access to prevent any mistakes
		 * on changing the mode of same timer as you might forget to use deinit() before init() one more*/
		TIMER0_TCCR0_REG.Byte=0;
    2a20:	e3 e5       	ldi	r30, 0x53	; 83
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	10 82       	st	Z, r1
		TIMER0_TCNT0_REG.Byte=0;
    2a26:	e2 e5       	ldi	r30, 0x52	; 82
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	10 82       	st	Z, r1
		TIMER0_OCR0_REG.Byte=0;
    2a2c:	ec e5       	ldi	r30, 0x5C	; 92
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer0 (OCIE0=0,TOIE0=0)*/
		TIMER_TIMSK_REG.Bits.OCIE0_Bit=0;
    2a32:	e9 e5       	ldi	r30, 0x59	; 89
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8d 7f       	andi	r24, 0xFD	; 253
    2a3a:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE0_Bit=0;
    2a3c:	e9 e5       	ldi	r30, 0x59	; 89
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	8e 7f       	andi	r24, 0xFE	; 254
    2a44:	80 83       	st	Z, r24


		/*Set Intial Value*/
		TIMER0_TCNT0_REG.Byte=((Config_Ptr->timer_InitialValue))&0x00FF;
    2a46:	a2 e5       	ldi	r26, 0x52	; 82
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	8c 93       	st	X, r24
		/*
		 * TIMER Prescaler value for Timer0 in TCCR0 Register
		 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
		 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
		 */
		TIMER0_TCCR0_REG.Byte=((TIMER0_TCCR0_REG.Byte&0xF8)|(Config_Ptr->timer_clock));
    2a54:	a3 e5       	ldi	r26, 0x53	; 83
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e3 e5       	ldi	r30, 0x53	; 83
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	98 2f       	mov	r25, r24
    2a60:	98 7f       	andi	r25, 0xF8	; 248
    2a62:	e9 81       	ldd	r30, Y+1	; 0x01
    2a64:	fa 81       	ldd	r31, Y+2	; 0x02
    2a66:	85 81       	ldd	r24, Z+5	; 0x05
    2a68:	89 2b       	or	r24, r25
    2a6a:	8c 93       	st	X, r24
		 * Compare output mode:
		 * 		OC0 disconnected
		 *      Clear COM00 bit in TCCR0 register
		 *      Clear COM01 bit in TCCR0 register
		 */
		TIMER0_TCCR0_REG.Bits.COM00_Bit=0;
    2a6c:	e3 e5       	ldi	r30, 0x53	; 83
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	8f 7e       	andi	r24, 0xEF	; 239
    2a74:	80 83       	st	Z, r24
		TIMER0_TCCR0_REG.Bits.COM01_Bit=0;
    2a76:	e3 e5       	ldi	r30, 0x53	; 83
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	8f 7d       	andi	r24, 0xDF	; 223
    2a7e:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    2a80:	e9 81       	ldd	r30, Y+1	; 0x01
    2a82:	fa 81       	ldd	r31, Y+2	; 0x02
    2a84:	86 81       	ldd	r24, Z+6	; 0x06
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	38 87       	std	Y+8, r19	; 0x08
    2a8c:	2f 83       	std	Y+7, r18	; 0x07
    2a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a90:	98 85       	ldd	r25, Y+8	; 0x08
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	31 f0       	breq	.+12     	; 0x2aa2 <Timer_init+0xca>
    2a96:	2f 81       	ldd	r18, Y+7	; 0x07
    2a98:	38 85       	ldd	r19, Y+8	; 0x08
    2a9a:	21 30       	cpi	r18, 0x01	; 1
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	b1 f0       	breq	.+44     	; 0x2acc <Timer_init+0xf4>
    2aa0:	28 c1       	rjmp	.+592    	; 0x2cf2 <Timer_init+0x31a>
			/*
			 * Normal (Overflow) mode:
			 * 		Clear WGM00 bit in TCCR0 register
			 *      Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_TCCR0_REG.Bits.WGM00_Bit=0;
    2aa2:	e3 e5       	ldi	r30, 0x53	; 83
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	8f 7b       	andi	r24, 0xBF	; 191
    2aaa:	80 83       	st	Z, r24
			TIMER0_TCCR0_REG.Bits.WGM01_Bit=0;
    2aac:	e3 e5       	ldi	r30, 0x53	; 83
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	87 7f       	andi	r24, 0xF7	; 247
    2ab4:	80 83       	st	Z, r24

			/* SET FOC0 in any mode except PWM mode */
			TIMER0_TCCR0_REG.Bits.FOC0_Bit=1;
    2ab6:	e3 e5       	ldi	r30, 0x53	; 83
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	80 68       	ori	r24, 0x80	; 128
    2abe:	80 83       	st	Z, r24

			/* Enable Timer0 overflow interrupt */
			TIMER_TIMSK_REG.Bits.TOIE0_Bit=1;
    2ac0:	e9 e5       	ldi	r30, 0x59	; 89
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	81 60       	ori	r24, 0x01	; 1
    2ac8:	80 83       	st	Z, r24
    2aca:	13 c1       	rjmp	.+550    	; 0x2cf2 <Timer_init+0x31a>
			/*
			 * Compare mode:
			 * 		Clear WGM00 bit in TCCR0 register
			 *      SET WGM01 bit in TCCR0 register
			 */
			TIMER0_TCCR0_REG.Bits.WGM00_Bit=0;
    2acc:	e3 e5       	ldi	r30, 0x53	; 83
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8f 7b       	andi	r24, 0xBF	; 191
    2ad4:	80 83       	st	Z, r24
			TIMER0_TCCR0_REG.Bits.WGM01_Bit=1;
    2ad6:	e3 e5       	ldi	r30, 0x53	; 83
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	88 60       	ori	r24, 0x08	; 8
    2ade:	80 83       	st	Z, r24

			/* SET FOC0 in any mode except PWM mode */
			TIMER0_TCCR0_REG.Bits.FOC0_Bit=1;
    2ae0:	e3 e5       	ldi	r30, 0x53	; 83
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	80 68       	ori	r24, 0x80	; 128
    2ae8:	80 83       	st	Z, r24

			/* set the compare value in register OCR0 & with 0xFF to make sure that it doesn't exceed 8 bits */
			TIMER0_OCR0_REG.Byte=((Config_Ptr->timer_compare_MatchValue))&0x00FF;
    2aea:	ac e5       	ldi	r26, 0x5C	; 92
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e9 81       	ldd	r30, Y+1	; 0x01
    2af0:	fa 81       	ldd	r31, Y+2	; 0x02
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	8c 93       	st	X, r24

			/* Enable Timer0 compare match interrupt*/
			TIMER_TIMSK_REG.Bits.OCIE0_Bit=1;
    2af8:	e9 e5       	ldi	r30, 0x59	; 89
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	82 60       	ori	r24, 0x02	; 2
    2b00:	80 83       	st	Z, r24
    2b02:	f7 c0       	rjmp	.+494    	; 0x2cf2 <Timer_init+0x31a>

		case Timer1:
			/*Clear registers of Timer1 And Interrupts Modules Enables before any access to prevent any mistakes
			* on changing the mode of same timer as you might forget to use deinit() before init() one more
			* & with 0xC3 to Clear 4 bits of Interrupt modules Enables for timer1 in TIMSK*/
			TIMER1_TCCR1A_REG.Byte=0;
    2b04:	ef e4       	ldi	r30, 0x4F	; 79
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	10 82       	st	Z, r1
			TIMER1_TCCR1B_REG.Byte=0;
    2b0a:	ee e4       	ldi	r30, 0x4E	; 78
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	10 82       	st	Z, r1
			TIMER1_TCNT1_REG.TwoBytes=0;
    2b10:	ec e4       	ldi	r30, 0x4C	; 76
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	11 82       	std	Z+1, r1	; 0x01
    2b16:	10 82       	st	Z, r1
			TIMER1_OCR1A_REG.TwoBytes=0;
    2b18:	ea e4       	ldi	r30, 0x4A	; 74
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	11 82       	std	Z+1, r1	; 0x01
    2b1e:	10 82       	st	Z, r1

			/*Clear all Interrupt modules Enable of Timer1 (TICIE1=0,OCIE1A=0,OCIE1B=0,TOIE1=0)*/
			TIMER_TIMSK_REG.Byte&=0xC3;
    2b20:	a9 e5       	ldi	r26, 0x59	; 89
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e9 e5       	ldi	r30, 0x59	; 89
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	83 7c       	andi	r24, 0xC3	; 195
    2b2c:	8c 93       	st	X, r24

			/*Set Intial Value*/
			TIMER1_TCNT1_REG.TwoBytes=(Config_Ptr->timer_InitialValue);
    2b2e:	ac e4       	ldi	r26, 0x4C	; 76
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e9 81       	ldd	r30, Y+1	; 0x01
    2b34:	fa 81       	ldd	r31, Y+2	; 0x02
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	11 96       	adiw	r26, 0x01	; 1
    2b3c:	9c 93       	st	X, r25
    2b3e:	8e 93       	st	-X, r24
			/*
			 * TIMER Prescaler value for Timer1 in TCCR1B Register
			 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
			 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
			 */
			TIMER1_TCCR1B_REG.Byte=(TIMER1_TCCR1B_REG.Byte&0xF8)|(Config_Ptr->timer_clock);
    2b40:	ae e4       	ldi	r26, 0x4E	; 78
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	ee e4       	ldi	r30, 0x4E	; 78
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	98 2f       	mov	r25, r24
    2b4c:	98 7f       	andi	r25, 0xF8	; 248
    2b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b50:	fa 81       	ldd	r31, Y+2	; 0x02
    2b52:	85 81       	ldd	r24, Z+5	; 0x05
    2b54:	89 2b       	or	r24, r25
    2b56:	8c 93       	st	X, r24
			 * Compare mode:
			 * 		OC1A/OC1B disconnected
			 *      Clear COM1A0/COM1A1 bits in TCCR1A register
			 *      Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_TCCR1A_REG.Byte&=0x0F;
    2b58:	af e4       	ldi	r26, 0x4F	; 79
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	ef e4       	ldi	r30, 0x4F	; 79
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8f 70       	andi	r24, 0x0F	; 15
    2b64:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode)
    2b66:	e9 81       	ldd	r30, Y+1	; 0x01
    2b68:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6a:	86 81       	ldd	r24, Z+6	; 0x06
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	3e 83       	std	Y+6, r19	; 0x06
    2b72:	2d 83       	std	Y+5, r18	; 0x05
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	31 f0       	breq	.+12     	; 0x2b88 <Timer_init+0x1b0>
    2b7c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b7e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b80:	21 30       	cpi	r18, 0x01	; 1
    2b82:	31 05       	cpc	r19, r1
    2b84:	d9 f0       	breq	.+54     	; 0x2bbc <Timer_init+0x1e4>
    2b86:	b5 c0       	rjmp	.+362    	; 0x2cf2 <Timer_init+0x31a>
				/*
				 * Normal Overflow mode:
				 * 		Clear WGM10/WMG11 bit in TCCR1A register
				 *      Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_TCCR1A_REG.Bits.WGM10_Bit=0;
    2b88:	ef e4       	ldi	r30, 0x4F	; 79
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8e 7f       	andi	r24, 0xFE	; 254
    2b90:	80 83       	st	Z, r24
				TIMER1_TCCR1A_REG.Bits.WGM11_Bit=0;
    2b92:	ef e4       	ldi	r30, 0x4F	; 79
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	8d 7f       	andi	r24, 0xFD	; 253
    2b9a:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM12_Bit=0;
    2b9c:	ee e4       	ldi	r30, 0x4E	; 78
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	87 7f       	andi	r24, 0xF7	; 247
    2ba4:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM13_Bit=0;
    2ba6:	ee e4       	ldi	r30, 0x4E	; 78
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	8f 7e       	andi	r24, 0xEF	; 239
    2bae:	80 83       	st	Z, r24

				/* Enable Timer1 overflow interrupt */
				TIMER_TIMSK_REG.Bits.TOIE1_Bit=1;
    2bb0:	e9 e5       	ldi	r30, 0x59	; 89
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	84 60       	ori	r24, 0x04	; 4
    2bb8:	80 83       	st	Z, r24
    2bba:	9b c0       	rjmp	.+310    	; 0x2cf2 <Timer_init+0x31a>
				 *  Compare mode:
				 *  	Clear WGM10/WGM11 bits in TCCR1A register
				 *      Set WGM12 bit in TCCR1B register
				 *      Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_TCCR1A_REG.Byte&=0xFC;
    2bbc:	af e4       	ldi	r26, 0x4F	; 79
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	ef e4       	ldi	r30, 0x4F	; 79
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8c 7f       	andi	r24, 0xFC	; 252
    2bc8:	8c 93       	st	X, r24
				TIMER1_TCCR1B_REG.Bits.WGM12_Bit=1;
    2bca:	ee e4       	ldi	r30, 0x4E	; 78
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	88 60       	ori	r24, 0x08	; 8
    2bd2:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM13_Bit=0;
    2bd4:	ee e4       	ldi	r30, 0x4E	; 78
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	8f 7e       	andi	r24, 0xEF	; 239
    2bdc:	80 83       	st	Z, r24

				/* SET FOC1A/FOC1B in any mode except PWM mode */
				TIMER1_TCCR1A_REG.Bits.FOC1A_Bit=1;
    2bde:	ef e4       	ldi	r30, 0x4F	; 79
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	84 60       	ori	r24, 0x04	; 4
    2be6:	80 83       	st	Z, r24
				TIMER1_TCCR1A_REG.Bits.FOC1B_Bit=1;
    2be8:	ef e4       	ldi	r30, 0x4F	; 79
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	88 60       	ori	r24, 0x08	; 8
    2bf0:	80 83       	st	Z, r24

				/* set the compare value in register OCR1A*/
				TIMER1_OCR1A_REG.TwoBytes = (Config_Ptr->timer_compare_MatchValue);
    2bf2:	aa e4       	ldi	r26, 0x4A	; 74
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	11 96       	adiw	r26, 0x01	; 1
    2c00:	9c 93       	st	X, r25
    2c02:	8e 93       	st	-X, r24

				/* Enable Timer1 compare match module interrupt*/
				TIMER_TIMSK_REG.Bits.OCIE1A_Bit=1;
    2c04:	e9 e5       	ldi	r30, 0x59	; 89
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	80 61       	ori	r24, 0x10	; 16
    2c0c:	80 83       	st	Z, r24
    2c0e:	71 c0       	rjmp	.+226    	; 0x2cf2 <Timer_init+0x31a>

			case Timer2:

				/*Clear registers of Timer2 And Interrupts Modules Enable before any access to prevent any mistakes
				 * on changing the mode of same timer as you might forget to use deinit() before init() one more*/
				TIMER2_TCCR2_REG.Byte=0;
    2c10:	e5 e4       	ldi	r30, 0x45	; 69
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	10 82       	st	Z, r1
				TIMER2_TCNT2_REG.Byte=0;
    2c16:	e4 e4       	ldi	r30, 0x44	; 68
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	10 82       	st	Z, r1
				TIMER2_OCR2_REG.Byte=0;
    2c1c:	e3 e4       	ldi	r30, 0x43	; 67
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	10 82       	st	Z, r1

				/*Clear all Interrupt modules Enable of Timer2 (OCIE2=0,TOIE2=0)*/
				TIMER_TIMSK_REG.Bits.OCIE2_Bit=0;
    2c22:	e9 e5       	ldi	r30, 0x59	; 89
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	8f 77       	andi	r24, 0x7F	; 127
    2c2a:	80 83       	st	Z, r24
				TIMER_TIMSK_REG.Bits.TOIE2_Bit=0;
    2c2c:	e9 e5       	ldi	r30, 0x59	; 89
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	8f 7b       	andi	r24, 0xBF	; 191
    2c34:	80 83       	st	Z, r24

				/*Set Intial Value & with 0xFF to make sure that it doesn't exceed 8 bits */
				TIMER2_TCNT2_REG.Byte=((Config_Ptr->timer_InitialValue))&0x00FF;
    2c36:	a4 e4       	ldi	r26, 0x44	; 68
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	8c 93       	st	X, r24
				/*
				 * TIMER2 Prescaler value for Timer0 in TCCR2 Register
				 * insert the required clock value in the first three bits (CS20, CS21 and CS22)
				 * 0XF8 to make sure that the least 3-bits in TCCR2 register=0
				 */
				TIMER2_TCCR2_REG.Byte=((TIMER2_TCCR2_REG.Byte&0xF8)|(Config_Ptr->timer_clock));
    2c44:	a5 e4       	ldi	r26, 0x45	; 69
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e5 e4       	ldi	r30, 0x45	; 69
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	98 2f       	mov	r25, r24
    2c50:	98 7f       	andi	r25, 0xF8	; 248
    2c52:	e9 81       	ldd	r30, Y+1	; 0x01
    2c54:	fa 81       	ldd	r31, Y+2	; 0x02
    2c56:	85 81       	ldd	r24, Z+5	; 0x05
    2c58:	89 2b       	or	r24, r25
    2c5a:	8c 93       	st	X, r24
				 *  Compare mode:
				 *  	OC2 disconnected
				 *      Clear COM20 bit in TCCR2 register
				 *      Clear COM21 bit in TCCR2 register
				 */
				TIMER2_TCCR2_REG.Bits.COM20_Bit=0;
    2c5c:	e5 e4       	ldi	r30, 0x45	; 69
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	8f 7e       	andi	r24, 0xEF	; 239
    2c64:	80 83       	st	Z, r24
				TIMER2_TCCR2_REG.Bits.COM21_Bit=0;
    2c66:	e5 e4       	ldi	r30, 0x45	; 69
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8f 7d       	andi	r24, 0xDF	; 223
    2c6e:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    2c70:	e9 81       	ldd	r30, Y+1	; 0x01
    2c72:	fa 81       	ldd	r31, Y+2	; 0x02
    2c74:	86 81       	ldd	r24, Z+6	; 0x06
    2c76:	28 2f       	mov	r18, r24
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	3c 83       	std	Y+4, r19	; 0x04
    2c7c:	2b 83       	std	Y+3, r18	; 0x03
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	9c 81       	ldd	r25, Y+4	; 0x04
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	31 f0       	breq	.+12     	; 0x2c92 <Timer_init+0x2ba>
    2c86:	2b 81       	ldd	r18, Y+3	; 0x03
    2c88:	3c 81       	ldd	r19, Y+4	; 0x04
    2c8a:	21 30       	cpi	r18, 0x01	; 1
    2c8c:	31 05       	cpc	r19, r1
    2c8e:	b1 f0       	breq	.+44     	; 0x2cbc <Timer_init+0x2e4>
    2c90:	30 c0       	rjmp	.+96     	; 0x2cf2 <Timer_init+0x31a>
					/*
					 * Normal Overflow mode:
					 * 		Clear WGM20 bit in TCCR2 register
					 *      Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_TCCR2_REG.Bits.WGM20_Bit=0;
    2c92:	e5 e4       	ldi	r30, 0x45	; 69
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	8f 7b       	andi	r24, 0xBF	; 191
    2c9a:	80 83       	st	Z, r24
					TIMER2_TCCR2_REG.Bits.WGM21_Bit=0;
    2c9c:	e5 e4       	ldi	r30, 0x45	; 69
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	87 7f       	andi	r24, 0xF7	; 247
    2ca4:	80 83       	st	Z, r24

					/* SET FOC2 in any mode except PWM mode */
					TIMER2_TCCR2_REG.Bits.FOC2_Bit=1;
    2ca6:	e5 e4       	ldi	r30, 0x45	; 69
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	80 68       	ori	r24, 0x80	; 128
    2cae:	80 83       	st	Z, r24

					/* Enable Timer2 overflow interrupt */
					TIMER_TIMSK_REG.Bits.TOIE2_Bit=1;
    2cb0:	e9 e5       	ldi	r30, 0x59	; 89
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	80 64       	ori	r24, 0x40	; 64
    2cb8:	80 83       	st	Z, r24
    2cba:	1b c0       	rjmp	.+54     	; 0x2cf2 <Timer_init+0x31a>
					/*
					 *  Compare mode:
					 *  	Clear WGM20 bit in TCCR2 register
					 *      SET WGM21 bit in TCCR2 register
					 */
					TIMER2_TCCR2_REG.Bits.WGM20_Bit=0;
    2cbc:	e5 e4       	ldi	r30, 0x45	; 69
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	8f 7b       	andi	r24, 0xBF	; 191
    2cc4:	80 83       	st	Z, r24
					TIMER2_TCCR2_REG.Bits.WGM21_Bit=1;
    2cc6:	e5 e4       	ldi	r30, 0x45	; 69
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	88 60       	ori	r24, 0x08	; 8
    2cce:	80 83       	st	Z, r24

					/* SET FOC2 in any mode except PWM mode */
					TIMER2_TCCR2_REG.Bits.FOC2_Bit=1;
    2cd0:	e5 e4       	ldi	r30, 0x45	; 69
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 68       	ori	r24, 0x80	; 128
    2cd8:	80 83       	st	Z, r24

					/* set the compare value in register OCR2 & with 0xFF to make sure that it doesn't exceed 8 bits */
					TIMER2_OCR2_REG.Byte=((Config_Ptr->timer_compare_MatchValue))&0x00FF;
    2cda:	a3 e4       	ldi	r26, 0x43	; 67
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce2:	82 81       	ldd	r24, Z+2	; 0x02
    2ce4:	93 81       	ldd	r25, Z+3	; 0x03
    2ce6:	8c 93       	st	X, r24

					/* Enable Timer2 compare match interrupt*/
					TIMER_TIMSK_REG.Bits.OCIE2_Bit=1;
    2ce8:	e9 e5       	ldi	r30, 0x59	; 89
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	80 68       	ori	r24, 0x80	; 128
    2cf0:	80 83       	st	Z, r24

				break; /*End of Timer2 case*/

	}/*End of the outer Super switch case*/

}/*End of the Timer_init*/
    2cf2:	2a 96       	adiw	r28, 0x0a	; 10
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <Timer_DeInit>:
/*
 * Description :
 * A function to Deinitialize the timers
 */
void Timer_DeInit(Timer_ID_Type timer_type)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <Timer_DeInit+0x6>
    2d0a:	0f 92       	push	r0
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	3b 83       	std	Y+3, r19	; 0x03
    2d1a:	2a 83       	std	Y+2, r18	; 0x02
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	91 05       	cpc	r25, r1
    2d24:	e9 f0       	breq	.+58     	; 0x2d60 <Timer_DeInit+0x5c>
    2d26:	2a 81       	ldd	r18, Y+2	; 0x02
    2d28:	3b 81       	ldd	r19, Y+3	; 0x03
    2d2a:	22 30       	cpi	r18, 0x02	; 2
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	71 f1       	breq	.+92     	; 0x2d8c <Timer_DeInit+0x88>
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	9b 81       	ldd	r25, Y+3	; 0x03
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	e9 f5       	brne	.+122    	; 0x2db2 <Timer_DeInit+0xae>
	{
	case Timer0:

		/*Clear all register of Timer0*/
		TIMER0_TCCR0_REG.Byte=0;
    2d38:	e3 e5       	ldi	r30, 0x53	; 83
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	10 82       	st	Z, r1
		TIMER0_TCNT0_REG.Byte=0;
    2d3e:	e2 e5       	ldi	r30, 0x52	; 82
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	10 82       	st	Z, r1
		TIMER0_OCR0_REG.Byte=0;
    2d44:	ec e5       	ldi	r30, 0x5C	; 92
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer0 (OCIE0=0,TOIE0=0)*/
		TIMER_TIMSK_REG.Bits.OCIE0_Bit=0;
    2d4a:	e9 e5       	ldi	r30, 0x59	; 89
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	8d 7f       	andi	r24, 0xFD	; 253
    2d52:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE0_Bit=0;
    2d54:	e9 e5       	ldi	r30, 0x59	; 89
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	8e 7f       	andi	r24, 0xFE	; 254
    2d5c:	80 83       	st	Z, r24
    2d5e:	29 c0       	rjmp	.+82     	; 0x2db2 <Timer_DeInit+0xae>
		break;

	case Timer1:

		/*Clear all register of Timer1*/
		TIMER1_TCCR1A_REG.Byte=0;
    2d60:	ef e4       	ldi	r30, 0x4F	; 79
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	10 82       	st	Z, r1
		TIMER1_TCCR1B_REG.Byte=0;
    2d66:	ee e4       	ldi	r30, 0x4E	; 78
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	10 82       	st	Z, r1
		TIMER1_TCNT1_REG.TwoBytes=0;
    2d6c:	ec e4       	ldi	r30, 0x4C	; 76
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	11 82       	std	Z+1, r1	; 0x01
    2d72:	10 82       	st	Z, r1
		TIMER1_OCR1A_REG.TwoBytes=0;
    2d74:	ea e4       	ldi	r30, 0x4A	; 74
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	11 82       	std	Z+1, r1	; 0x01
    2d7a:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer1 (TICIE1=0,OCIE1A=0,OCIE1B=0,TOIE1=0)*/
		TIMER_TIMSK_REG.Byte&=0xC3;
    2d7c:	a9 e5       	ldi	r26, 0x59	; 89
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e9 e5       	ldi	r30, 0x59	; 89
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	83 7c       	andi	r24, 0xC3	; 195
    2d88:	8c 93       	st	X, r24
    2d8a:	13 c0       	rjmp	.+38     	; 0x2db2 <Timer_DeInit+0xae>


	case Timer2:

		/*Clear all register of Timer2*/
		TIMER2_TCCR2_REG.Byte=0;
    2d8c:	e5 e4       	ldi	r30, 0x45	; 69
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	10 82       	st	Z, r1
		TIMER2_TCNT2_REG.Byte=0;
    2d92:	e4 e4       	ldi	r30, 0x44	; 68
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	10 82       	st	Z, r1
		TIMER2_OCR2_REG.Byte=0;
    2d98:	e3 e4       	ldi	r30, 0x43	; 67
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer2 (OCIE2=0,TOIE2=0)*/
		TIMER_TIMSK_REG.Bits.OCIE2_Bit=0;
    2d9e:	e9 e5       	ldi	r30, 0x59	; 89
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	8f 77       	andi	r24, 0x7F	; 127
    2da6:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE2_Bit=0;
    2da8:	e9 e5       	ldi	r30, 0x59	; 89
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	8f 7b       	andi	r24, 0xBF	; 191
    2db0:	80 83       	st	Z, r24
		break;

	}

}
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *UART_Config)
{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <UART_init+0x6>
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <UART_init+0x8>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	9c 83       	std	Y+4, r25	; 0x04
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    2dce:	1a 82       	std	Y+2, r1	; 0x02
    2dd0:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UART_UCSRA_REG.Byte=0;
    2dd2:	eb e2       	ldi	r30, 0x2B	; 43
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	10 82       	st	Z, r1
	UART_UCSRA_REG.Bits.U2X_BIT=1;
    2dd8:	eb e2       	ldi	r30, 0x2B	; 43
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	82 60       	ori	r24, 0x02	; 2
    2de0:	80 83       	st	Z, r24

	/*Enable Sending and transmitting TXEN=1 AND RXEN=1 in register UCSRB*/
	UART_UCSRB_REG.Bits.RXEN_BIT=1;
    2de2:	ea e2       	ldi	r30, 0x2A	; 42
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	80 61       	ori	r24, 0x10	; 16
    2dea:	80 83       	st	Z, r24
	UART_UCSRB_REG.Bits.TXEN_BIT=1;
    2dec:	ea e2       	ldi	r30, 0x2A	; 42
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	88 60       	ori	r24, 0x08	; 8
    2df4:	80 83       	st	Z, r24

	/*Set Bit URSEL (URSEL=1) to access register UCSRC as UCSRC and UBRRH Mapped on same location as  declared in uart private file  */
	UART_UCSRC_REG.Bits.URSEL_BIT=1;
    2df6:	e0 e4       	ldi	r30, 0x40	; 64
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	80 68       	ori	r24, 0x80	; 128
    2dfe:	80 83       	st	Z, r24

	/*Write the Selected Parity*/
	UART_UCSRC_REG.Byte|=(UART_Config->parity);
    2e00:	a0 e4       	ldi	r26, 0x40	; 64
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e0 e4       	ldi	r30, 0x40	; 64
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	90 81       	ld	r25, Z
    2e0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e0e:	81 81       	ldd	r24, Z+1	; 0x01
    2e10:	89 2b       	or	r24, r25
    2e12:	8c 93       	st	X, r24

	/*Write the selected stop bits*/
	UART_UCSRC_REG.Byte|=(UART_Config->stop_bit);
    2e14:	a0 e4       	ldi	r26, 0x40	; 64
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e0 e4       	ldi	r30, 0x40	; 64
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	90 81       	ld	r25, Z
    2e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e20:	fc 81       	ldd	r31, Y+4	; 0x04
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	89 2b       	or	r24, r25
    2e26:	8c 93       	st	X, r24
	 * 		for example if we use 8 bit data
	 * 		(UART_Config->bit)=0011
	 * 		(UART_Config->bit)>>1=0110
	 * 		((UART_Config->bit)>>1)&6=0110 & 0110 = 0110
	 * 		  */
	UART_UCSRC_REG.Byte|=(((UART_Config->bit_data)<<1)&6);
    2e28:	a0 e4       	ldi	r26, 0x40	; 64
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	e0 e4       	ldi	r30, 0x40	; 64
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	28 2f       	mov	r18, r24
    2e34:	eb 81       	ldd	r30, Y+3	; 0x03
    2e36:	fc 81       	ldd	r31, Y+4	; 0x04
    2e38:	80 81       	ld	r24, Z
    2e3a:	88 2f       	mov	r24, r24
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	86 70       	andi	r24, 0x06	; 6
    2e44:	82 2b       	or	r24, r18
    2e46:	8c 93       	st	X, r24
	UART_UCSRC_REG.Byte|=(((UART_Config->bit_data)<<2)&4);
    2e48:	a0 e4       	ldi	r26, 0x40	; 64
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e0 e4       	ldi	r30, 0x40	; 64
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	28 2f       	mov	r18, r24
    2e54:	eb 81       	ldd	r30, Y+3	; 0x03
    2e56:	fc 81       	ldd	r31, Y+4	; 0x04
    2e58:	80 81       	ld	r24, Z
    2e5a:	88 2f       	mov	r24, r24
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	84 70       	andi	r24, 0x04	; 4
    2e68:	82 2b       	or	r24, r18
    2e6a:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config->baud_rate) * 8UL))) - 1);
    2e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e70:	83 81       	ldd	r24, Z+3	; 0x03
    2e72:	94 81       	ldd	r25, Z+4	; 0x04
    2e74:	a5 81       	ldd	r26, Z+5	; 0x05
    2e76:	b6 81       	ldd	r27, Z+6	; 0x06
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	aa 1f       	adc	r26, r26
    2e7e:	bb 1f       	adc	r27, r27
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	aa 1f       	adc	r26, r26
    2e86:	bb 1f       	adc	r27, r27
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	aa 1f       	adc	r26, r26
    2e8e:	bb 1f       	adc	r27, r27
    2e90:	9c 01       	movw	r18, r24
    2e92:	ad 01       	movw	r20, r26
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	92 e1       	ldi	r25, 0x12	; 18
    2e98:	aa e7       	ldi	r26, 0x7A	; 122
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__udivmodsi4>
    2ea4:	da 01       	movw	r26, r20
    2ea6:	c9 01       	movw	r24, r18
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UART_UBRRH_REG.Byte = ubrr_value>>8;
    2eae:	e0 e4       	ldi	r30, 0x40	; 64
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb6:	89 2f       	mov	r24, r25
    2eb8:	99 27       	eor	r25, r25
    2eba:	80 83       	st	Z, r24
	UART_UBRRL_REG.Byte = ubrr_value;
    2ebc:	e9 e2       	ldi	r30, 0x29	; 41
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	80 83       	st	Z, r24
}
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	0f 92       	push	r0
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(!(UART_UCSRA_REG.Bits.UDRE_BIT));
    2ede:	eb e2       	ldi	r30, 0x2B	; 43
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	80 72       	andi	r24, 0x20	; 32
    2ee6:	88 23       	and	r24, r24
    2ee8:	d1 f3       	breq	.-12     	; 0x2ede <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UART_UDR_REG.Byte = data;
    2eea:	ec e2       	ldi	r30, 0x2C	; 44
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	80 83       	st	Z, r24
	UART_UDR_REG.Byte= data;
	while(!(UART_UCSRA_REG.Bits.TXC_BIT)); // Wait until the transmission is complete TXC = 1
	UART_UCSRA_REG.Bits.TXC_BIT=1; // Clear the TXC flag
	*/

}
    2ef2:	0f 90       	pop	r0
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(!(UART_UCSRA_REG.Bits.RXC_BIT));
    2f02:	eb e2       	ldi	r30, 0x2B	; 43
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	80 78       	andi	r24, 0x80	; 128
    2f0a:	88 23       	and	r24, r24
    2f0c:	d1 f3       	breq	.-12     	; 0x2f02 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UART_UDR_REG.Byte;
    2f0e:	ec e2       	ldi	r30, 0x2C	; 44
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
}
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <UART_sendString+0x6>
    2f20:	0f 92       	push	r0
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	9b 83       	std	Y+3, r25	; 0x03
    2f28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f2a:	19 82       	std	Y+1, r1	; 0x01
    2f2c:	0e c0       	rjmp	.+28     	; 0x2f4a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	9b 81       	ldd	r25, Y+3	; 0x03
    2f38:	fc 01       	movw	r30, r24
    2f3a:	e2 0f       	add	r30, r18
    2f3c:	f3 1f       	adc	r31, r19
    2f3e:	80 81       	ld	r24, Z
    2f40:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <UART_sendByte>
		i++;
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	8f 5f       	subi	r24, 0xFF	; 255
    2f48:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	fc 01       	movw	r30, r24
    2f56:	e2 0f       	add	r30, r18
    2f58:	f3 1f       	adc	r31, r19
    2f5a:	80 81       	ld	r24, Z
    2f5c:	88 23       	and	r24, r24
    2f5e:	39 f7       	brne	.-50     	; 0x2f2e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <UART_receiveString+0xa>
    2f76:	0f 92       	push	r0
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	9b 83       	std	Y+3, r25	; 0x03
    2f7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f80:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8c:	8c 01       	movw	r16, r24
    2f8e:	02 0f       	add	r16, r18
    2f90:	13 1f       	adc	r17, r19
    2f92:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART_recieveByte>
    2f96:	f8 01       	movw	r30, r16
    2f98:	80 83       	st	Z, r24
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	8f 5f       	subi	r24, 0xFF	; 255
    2fa0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2faa:	9b 81       	ldd	r25, Y+3	; 0x03
    2fac:	8c 01       	movw	r16, r24
    2fae:	02 0f       	add	r16, r18
    2fb0:	13 1f       	adc	r17, r19
    2fb2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART_recieveByte>
    2fb6:	f8 01       	movw	r30, r16
    2fb8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	e2 0f       	add	r30, r18
    2fc8:	f3 1f       	adc	r31, r19
    2fca:	80 81       	ld	r24, Z
    2fcc:	83 32       	cpi	r24, 0x23	; 35
    2fce:	31 f7       	brne	.-52     	; 0x2f9c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	fc 01       	movw	r30, r24
    2fdc:	e2 0f       	add	r30, r18
    2fde:	f3 1f       	adc	r31, r19
    2fe0:	10 82       	st	Z, r1
}
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	1f 91       	pop	r17
    2fee:	0f 91       	pop	r16
    2ff0:	08 95       	ret

00002ff2 <__udivmodsi4>:
    2ff2:	a1 e2       	ldi	r26, 0x21	; 33
    2ff4:	1a 2e       	mov	r1, r26
    2ff6:	aa 1b       	sub	r26, r26
    2ff8:	bb 1b       	sub	r27, r27
    2ffa:	fd 01       	movw	r30, r26
    2ffc:	0d c0       	rjmp	.+26     	; 0x3018 <__udivmodsi4_ep>

00002ffe <__udivmodsi4_loop>:
    2ffe:	aa 1f       	adc	r26, r26
    3000:	bb 1f       	adc	r27, r27
    3002:	ee 1f       	adc	r30, r30
    3004:	ff 1f       	adc	r31, r31
    3006:	a2 17       	cp	r26, r18
    3008:	b3 07       	cpc	r27, r19
    300a:	e4 07       	cpc	r30, r20
    300c:	f5 07       	cpc	r31, r21
    300e:	20 f0       	brcs	.+8      	; 0x3018 <__udivmodsi4_ep>
    3010:	a2 1b       	sub	r26, r18
    3012:	b3 0b       	sbc	r27, r19
    3014:	e4 0b       	sbc	r30, r20
    3016:	f5 0b       	sbc	r31, r21

00003018 <__udivmodsi4_ep>:
    3018:	66 1f       	adc	r22, r22
    301a:	77 1f       	adc	r23, r23
    301c:	88 1f       	adc	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	1a 94       	dec	r1
    3022:	69 f7       	brne	.-38     	; 0x2ffe <__udivmodsi4_loop>
    3024:	60 95       	com	r22
    3026:	70 95       	com	r23
    3028:	80 95       	com	r24
    302a:	90 95       	com	r25
    302c:	9b 01       	movw	r18, r22
    302e:	ac 01       	movw	r20, r24
    3030:	bd 01       	movw	r22, r26
    3032:	cf 01       	movw	r24, r30
    3034:	08 95       	ret

00003036 <__prologue_saves__>:
    3036:	2f 92       	push	r2
    3038:	3f 92       	push	r3
    303a:	4f 92       	push	r4
    303c:	5f 92       	push	r5
    303e:	6f 92       	push	r6
    3040:	7f 92       	push	r7
    3042:	8f 92       	push	r8
    3044:	9f 92       	push	r9
    3046:	af 92       	push	r10
    3048:	bf 92       	push	r11
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	ca 1b       	sub	r28, r26
    3060:	db 0b       	sbc	r29, r27
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	09 94       	ijmp

0000306e <__epilogue_restores__>:
    306e:	2a 88       	ldd	r2, Y+18	; 0x12
    3070:	39 88       	ldd	r3, Y+17	; 0x11
    3072:	48 88       	ldd	r4, Y+16	; 0x10
    3074:	5f 84       	ldd	r5, Y+15	; 0x0f
    3076:	6e 84       	ldd	r6, Y+14	; 0x0e
    3078:	7d 84       	ldd	r7, Y+13	; 0x0d
    307a:	8c 84       	ldd	r8, Y+12	; 0x0c
    307c:	9b 84       	ldd	r9, Y+11	; 0x0b
    307e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3080:	b9 84       	ldd	r11, Y+9	; 0x09
    3082:	c8 84       	ldd	r12, Y+8	; 0x08
    3084:	df 80       	ldd	r13, Y+7	; 0x07
    3086:	ee 80       	ldd	r14, Y+6	; 0x06
    3088:	fd 80       	ldd	r15, Y+5	; 0x05
    308a:	0c 81       	ldd	r16, Y+4	; 0x04
    308c:	1b 81       	ldd	r17, Y+3	; 0x03
    308e:	aa 81       	ldd	r26, Y+2	; 0x02
    3090:	b9 81       	ldd	r27, Y+1	; 0x01
    3092:	ce 0f       	add	r28, r30
    3094:	d1 1d       	adc	r29, r1
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	ed 01       	movw	r28, r26
    30a2:	08 95       	ret

000030a4 <itoa>:
    30a4:	fb 01       	movw	r30, r22
    30a6:	9f 01       	movw	r18, r30
    30a8:	e8 94       	clt
    30aa:	42 30       	cpi	r20, 0x02	; 2
    30ac:	c4 f0       	brlt	.+48     	; 0x30de <itoa+0x3a>
    30ae:	45 32       	cpi	r20, 0x25	; 37
    30b0:	b4 f4       	brge	.+44     	; 0x30de <itoa+0x3a>
    30b2:	4a 30       	cpi	r20, 0x0A	; 10
    30b4:	29 f4       	brne	.+10     	; 0x30c0 <itoa+0x1c>
    30b6:	97 fb       	bst	r25, 7
    30b8:	1e f4       	brtc	.+6      	; 0x30c0 <itoa+0x1c>
    30ba:	90 95       	com	r25
    30bc:	81 95       	neg	r24
    30be:	9f 4f       	sbci	r25, 0xFF	; 255
    30c0:	64 2f       	mov	r22, r20
    30c2:	77 27       	eor	r23, r23
    30c4:	0e 94 83 18 	call	0x3106	; 0x3106 <__udivmodhi4>
    30c8:	80 5d       	subi	r24, 0xD0	; 208
    30ca:	8a 33       	cpi	r24, 0x3A	; 58
    30cc:	0c f0       	brlt	.+2      	; 0x30d0 <itoa+0x2c>
    30ce:	89 5d       	subi	r24, 0xD9	; 217
    30d0:	81 93       	st	Z+, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	a1 f7       	brne	.-24     	; 0x30c0 <itoa+0x1c>
    30d8:	16 f4       	brtc	.+4      	; 0x30de <itoa+0x3a>
    30da:	5d e2       	ldi	r21, 0x2D	; 45
    30dc:	51 93       	st	Z+, r21
    30de:	10 82       	st	Z, r1
    30e0:	c9 01       	movw	r24, r18
    30e2:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <strrev>

000030e6 <strrev>:
    30e6:	dc 01       	movw	r26, r24
    30e8:	fc 01       	movw	r30, r24
    30ea:	67 2f       	mov	r22, r23
    30ec:	71 91       	ld	r23, Z+
    30ee:	77 23       	and	r23, r23
    30f0:	e1 f7       	brne	.-8      	; 0x30ea <strrev+0x4>
    30f2:	32 97       	sbiw	r30, 0x02	; 2
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <strrev+0x18>
    30f6:	7c 91       	ld	r23, X
    30f8:	6d 93       	st	X+, r22
    30fa:	70 83       	st	Z, r23
    30fc:	62 91       	ld	r22, -Z
    30fe:	ae 17       	cp	r26, r30
    3100:	bf 07       	cpc	r27, r31
    3102:	c8 f3       	brcs	.-14     	; 0x30f6 <strrev+0x10>
    3104:	08 95       	ret

00003106 <__udivmodhi4>:
    3106:	aa 1b       	sub	r26, r26
    3108:	bb 1b       	sub	r27, r27
    310a:	51 e1       	ldi	r21, 0x11	; 17
    310c:	07 c0       	rjmp	.+14     	; 0x311c <__udivmodhi4_ep>

0000310e <__udivmodhi4_loop>:
    310e:	aa 1f       	adc	r26, r26
    3110:	bb 1f       	adc	r27, r27
    3112:	a6 17       	cp	r26, r22
    3114:	b7 07       	cpc	r27, r23
    3116:	10 f0       	brcs	.+4      	; 0x311c <__udivmodhi4_ep>
    3118:	a6 1b       	sub	r26, r22
    311a:	b7 0b       	sbc	r27, r23

0000311c <__udivmodhi4_ep>:
    311c:	88 1f       	adc	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	5a 95       	dec	r21
    3122:	a9 f7       	brne	.-22     	; 0x310e <__udivmodhi4_loop>
    3124:	80 95       	com	r24
    3126:	90 95       	com	r25
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	08 95       	ret

0000312e <_exit>:
    312e:	f8 94       	cli

00003130 <__stop_program>:
    3130:	ff cf       	rjmp	.-2      	; 0x3130 <__stop_program>
