/*
 ================================================================================================================================
 * File Name   : twi_interface.h
 *
 * Module Name : twi_interface
 * 
 * Description : 
 *
 * Created On  : Oct 27, 2023
 *
 * Author Name : Ahmed Abd Elgleel
 ================================================================================================================================
 */
#ifndef TWI_INTERFACE_H_
#define TWI_INTERFACE_H_


#include "std_types.h"

/*******************************************************************************
 *                    		    Definitions                                    *
 *******************************************************************************/

/* I2C Status Bits in the TWSR Register */
#define TWI_START         0x08 /* start has been sent */
#define TWI_REP_START     0x10 /* repeated start */
#define TWI_MT_SLA_W_ACK  0x18 /* Master transmit ( slave address + Write request ) to slave + ACK received from slave. */
#define TWI_MT_SLA_R_ACK  0x40 /* Master transmit ( slave address + Read request ) to slave + ACK received from slave. */
#define TWI_MT_DATA_ACK   0x28 /* Master transmit data and ACK has been received from Slave. */
#define TWI_MR_DATA_ACK   0x50 /* Master received data and send ACK to slave. */
#define TWI_MR_DATA_NACK  0x58 /* Master received data but doesn't send ACK to slave. */


/*******************************************************************************
 *                         Types Declaration                                   *
 *******************************************************************************/
typedef enum
{
	TWI_Prescaler_1,TWI_Prescaler_4,TWI_Prescaler_16,TWI_Prescaler_64
}i2c_prescaler_bits;

typedef struct
{

	uint8 master_slave_address; /*The address of the master when it's going to be a slave*/
	uint8 i2c_bit_rate; /*The bit rate which is going to be stored in the TWI bit rate register*/
	i2c_prescaler_bits i2c_prescaler; /*The prescaler value stored in bit 0 & bit 1 in the TWI status reg*/

}i2c_ConfigType;


/*******************************************************************************
 *                      Functions Prototypes                                   *
 *******************************************************************************/
void TWI_init(const i2c_ConfigType *i2c_config);
void TWI_start(void);
void TWI_stop(void);
void TWI_writeByte(uint8 data);
uint8 TWI_readByteWithACK(void);
uint8 TWI_readByteWithNACK(void);
uint8 TWI_getStatus(void);


#endif /* TWI_H_ */


#endif /* TWI_INTERFACE_H_ */
