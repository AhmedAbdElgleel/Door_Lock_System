/*
 ================================================================================================================================
 * File Name   : HMI.c
 *
 * Module Name : HMI
 * 
 * Description : Source File to The HMI ECU
 *
 * Created On  : Oct 28, 2023
 *
 * Author Name : Ahmed Abd Elgleel
 ================================================================================================================================
 */
#include "hmi_ecu.h"
#include "gpio_interface.h"
#include "lcd.h"
#include "keypad.h"
#include "uart_interface.h"
#include "timer_interface.h"
#include <util/delay.h>
#include "Internal_mapping_register_private.h"  /* For enabling I-bit*/

/*******************************************************************************
 *                      Global Variables									   *
 *******************************************************************************/
static uint8 g_MC1_application_sequence=0; 					/*Controls HMI_ECU MC application Flow*/

static uint8 g_passwordArray1[5],g_passwordArray2[5]; 	/*array to Store password entered by the user*/

static volatile uint8 g_tick=0; 						/* For counting the number of Compare match for timer1*/
/*******************************************************************************
 *                      Main Function                         				   *
 *******************************************************************************/

int main(void)
{

	/*Just intial values where in this project i will use timer1 in CTC mode with 1024 prescale and Inital value =0 but i
	  I Will change the compare value from time to time*/
	Timer_ConfigType Timer_configuration={0,0,Timer1,TIMER_F_CPU_1024,Compare_Mode};

	/*UART Configurations and Initialization*/
	UART_ConfigType Uart_configuration={CHARACTER_SIZE_8,EVEN_PARITY,STOP_1BIT,9600};
	UART_init(&Uart_configuration);

	/*Enable Global Interrupt*/
	SREG_REG.Bits.I_Bit=1;

	/*Set timer1 to call back */
	Timer_setCallBack(timer1_SetRequiredCallBackFunction, Timer1);

	LCD_init();
	LCD_displayStringRowColumn(0,3,"Smart Home");
	LCD_displayStringRowColumn(1,0,"Ahmed AbdElgleel");
	_delay_ms(2500);

	while(1)
	{
		switch(g_MC1_application_sequence)
		{
			case CREATE_PASSWORD_STAGE:
				LCD_clearScreen();
				LCD_displayStringRowColumn(0, 0,"Plz enter pass:");
				LCD_moveCursor(1, 0);
				create_Password(g_passwordArray1);
				LCD_clearScreen();
				LCD_displayStringRowColumn(0, 0,"Plz re-enter the");
				LCD_displayStringRowColumn(1, 0,"same pass: ");
				LCD_moveCursor(1, 10);
				create_Password(g_passwordArray2);

				/*Sending the password to Control_ECU*/
				send_Password(g_passwordArray1);

				/*Sending the re-entered password to Control_ECU*/
				send_Password(g_passwordArray2);

				/* Increment Stage for next loop (go to checking password stage*/
				g_MC1_application_sequence=1;
				break;

			case CHECKING_PASSWORDS_MATCHING_STAGE:

				/*Check if the two passwords are matched or not from Control ECU*/
				if(Password_Checker()!=MATCHED)
				{
					/*return to first stage ( CREATE_PASSWORD_STAGE ) */
					g_MC1_application_sequence=0;
				}
				else
				{
					/*go to next stage */
					g_MC1_application_sequence=2;

				}
				break;

			case MAIN_OPTIONS_STAGE:
			{
				/*NOTE : i made this block scope bec. i want the local varriables defined in this case just to be local for its case*/
				uint8 userChoiceKey;
				LCD_clearScreen();
				LCD_displayStringRowColumn(0, 0, "+ : OPEN DOOR");
				LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
				userChoiceKey=KEYPAD_getPressedKey();
				while(userChoiceKey != '+' && userChoiceKey != '-'){};
				LCD_clearScreen();
				LCD_displayStringRowColumn(0, 0,"Plz enter old");
				LCD_displayStringRowColumn(1, 0,"pass :");

				/*Send user choise for HMI ECU*/
				send_Byte(userChoiceKey);

				/*Store the password enterd from user in an array g_passwordArray1*/
				create_Password(g_passwordArray1);

				/*Send the password enter by user to Control ECU to check the password is matched with the saved one or not*/
				send_Password(g_passwordArray1);

				/*
				 * if two passwords are matched the Control ECU will send matched
				 */
				if(recieve_Byte()==MATCHED)
				{
					/*Sends the user choice button to Control_ECU what ever he/she choose +/- */
					send_Byte(userChoiceKey);

					/*In case HMI ECU send '+' to Control ECU , THE Control ECU will send number 3 as indication for HMI to go to OPEN_DOOR_STAGE
					 * but in case HMI ECU Send '-' to Control ecu, the control ecu will send number 0 as indication for hmi to go to CREATE_PASSWORD_STAGE*/
					g_MC1_application_sequence=recieve_Byte();
				}
				/* else mean that HMI APP receive number 0 so the HMI ECU APP will go to CREATE_PASSWORD_STAGE*/
				else
				{
					uint8 count;
					/*
					 * in case the password entered by user is matched with the oldest one save in EEPROM
					 * and number of times that user re-entered the password equal 2 times or less, the system will continue normally
					 * and execute the function which is responsible for the choice he chose (Open Door/Change password).

					 * but, if the number of timers that user re-enterd the password are more than 2 times we will
					 * Activate the Buzzer and block the system for 1 minute and After the 1 min ends return to case 3
					*/
					for(count=0;count<2;count++)
					{
						LCD_clearScreen();
						LCD_displayStringRowColumn(0, 0,"Plz enter old");
						LCD_displayStringRowColumn(1, 0,"pass:");

						create_Password(g_passwordArray1);
						send_Password(g_passwordArray1);

						if(recieve_Byte()==MATCHED)
						{
							/*go to MAIN_MENU_OPTION_STAGE where the user choose again what he want  */
							g_MC1_application_sequence=2;
							break;
						}
					}
					/*this mean that user enterd wrong password more than 2 times so we will
					 * Activate the Buzzer and block the system for 1 minute and After the 1 min ends return to case 3
					*/
					if(2==count)
					{
						LCD_clearScreen();
						/*Timer1 Configurations and Initialization
						  where F_CPU= 8 MHZ and Timer Prescale = 1024
					      so we need 468750 count from timer to time 1 min
					      so we will put in compare register of timer1 value = 46875
						  we will get an 10 interrupts for time 1 min
						*/
						Timer_configuration.timer_compare_MatchValue=46875;

						Timer_init(&Timer_configuration);

						/*display error message and turn the buzzer one in Control ECU and wait for 1 min as g_Tick will be equal 10 after 1 min*/
						LCD_displayStringRowColumn(0,1,"System LOCKED");
						LCD_displayStringRowColumn(1,0,"Wait for 1 min");

						/*Wait for 1 min as will be equal 10 after 1 min*/
						while(g_tick < 10);
						{
							/*when g_tick=10 this mean that 1 minute passes so exit from the while loop*/
							/*Note g_tick is increment via Timer1 ISR so u should use volatile keyword
							 *on definition the global variable g_tick to turn off any compile optimization on it
							 *bec. the compiler see that the g_tick is a variable that will not be incremented in your
							 *SW code but actually the compiler does't know that g_tick will be incremented via an interrupt
							 *in timer1 Hardware so Kindly define g_tick using keyword volatile */
						}

						/*stop timer1 via using deInit() Function*/
						Timer_DeInit(Timer1);

						/*Clear the g_tick for next time*/
						g_tick=0;

						/*go to MAIN_MENU_OPTION_STAGE where the user choose again what he want*/
						g_MC1_application_sequence=2;
					}/*End of if*/
				}/*end of else*/
			break;
			}
			case OPEN_DOOR_STAGE:
			{
				/*Timer1 Configurations and Initialization
				  where F_CPU= 8 MHZ and Timer Prescale = 1024
				  so we need 117188 count from timer to time 15 sec
				  so we will put in compare register of timer1 value = 58594
				  we will need 2 interrupts for time 15 sec
				  NOTE Timer Timer_configuration its prescale and ID inital value
				*/
				Timer_configuration.timer_compare_MatchValue=58594;

				/*Initialize Timer 1*/
				Timer_init(&Timer_configuration);

				/*Display Unlocking the door*/
				LCD_clearScreen();
				LCD_displayStringRowColumn(0,1,"Door Unlocking");
				LCD_displayStringRowColumn(1,4,"Please Wait");

				/*Wait for 15 sec Displaying DOOR UNLOCKING*/
				while(g_tick<2){};

				/*Stop Timer1*/
				Timer_DeInit(Timer1);

				/*Clear the g_tick for next time*/
				g_tick=0;

				LCD_clearScreen();

				/*set Compare value = 23438 ,prescale ,timer id,mode as i initialized
				  we will need 1 interrupt within 3 sec*/
				Timer_configuration.timer_compare_MatchValue=23438;

				Timer_init(&Timer_configuration);

				LCD_clearScreen();
				LCD_displayStringRowColumn(0,0,"wait for people");
				LCD_displayStringRowColumn(1,3,"To Enter");

				/*wait for 3 sec and the motor is stop*/
				while(g_tick<1){};

				/*Stop Timer1*/
				Timer_DeInit(Timer1);

				/*Clear the g_tick for next time*/
				g_tick=0;

				/*Display locking the door*/
				LCD_clearScreen();
				LCD_displayStringRowColumn(0,2,"Door Locking");

				Timer_configuration.timer_compare_MatchValue=58594;
				/*Initialize Timer 1*/
				Timer_init(&Timer_configuration);

				/*Wait for 15 sec*/
				while(g_tick<2){};

				/*Stop Timer1*/
				Timer_DeInit(Timer1);

				/*Clear the g_tick for next time*/
				g_tick=0;

				/*go to MAIN_OPTIONS_STAGE where the user choose again what he want*/
				g_MC1_application_sequence=2;
				break;

			}/*End of block scope of case OPEN_DOOR_STAGE */
		}/*End of switch scoop*/
		}/*end of while(1) scope*/
}/*End of main scope*/

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*
 * Function Description :
 * Take the password entered by the user and Store it in the array passed to it
 */
void create_Password(uint8 *a_PasswordArray)
{
	uint8 counter=0;
	uint8 pressedKey=KEYPAD_getPressedKey();
	while(pressedKey != '=')
	{
		pressedKey=KEYPAD_getPressedKey();
		if( ( pressedKey != '+' && pressedKey!= '-' && pressedKey!= '*' && pressedKey!= '%' && pressedKey!= '=') )
		{
			if(counter < PASSWORD_SIZE )
			{
				*(a_PasswordArray+counter)=pressedKey;
				LCD_displayCharacter('*');
				counter++;
			}
			_delay_ms(500);
		}
	}

}

/*
 * Description :
 * Function responsible for :
 * 1-Sending Password entered by the user from HMI_ECU TO Control_ECU through UART
 */
void send_Password(uint8 *Password_ptr1)
{
	uint8 i;
	UART_sendByte(READY);
	while(UART_recieveByte()!=READY);
	for(i=0;i<PASSWORD_SIZE;i++)
	{
		UART_sendByte(Password_ptr1[i]);
	}
	while(UART_recieveByte()!=DONE);

}


/*
 * Description :
 * Function responsible for :
 * 1-Sending Password entered by the user from HMI_ECU TO Control_ECU through UART
 */
uint8 Password_Checker(void)
{
	uint8 state=-1;
	state= recieve_Byte();
	return state;
}

/*
 * Function Description :
 * synchronising the UART in the Control_ECU and the UART in HMI_ECU
 * Receiving data from the UART in the HMI_ECU
 */
uint8 recieve_Byte(void)
{
	uint8 byte;
	while(UART_recieveByte() != READY){}
	UART_sendByte(READY);
	byte=UART_recieveByte();
	UART_sendByte(DONE);
	return byte;
}
/*
 * Description :
 * synchronising the UART in the Control_ECU and the UART in HMI_ECU
 * Sending data to the UART in the HMI_ECU
 */
void send_Byte(uint8 byte)
{
	UART_sendByte(READY);
	while(UART_recieveByte() != READY){}
	UART_sendByte(byte);
	while(UART_recieveByte() != DONE){}
}

/*
 * Function Description :
 * used to increment a global variable to indicate number of interrupts happend for timer1
 */
void timer1_SetRequiredCallBackFunction(void)
{
	g_tick++;
}

