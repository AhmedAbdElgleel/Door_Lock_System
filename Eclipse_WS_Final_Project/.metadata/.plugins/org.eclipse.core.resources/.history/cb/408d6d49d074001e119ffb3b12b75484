/*
 ================================================================================================================================
 * File Name   : twi.c
 *
 * Module Name : TWI(I2C)
 * 
 * Description : Source File for TWI Module
 *
 * Created On  : Oct 27, 2023
 *
 * Author Name : Ahmed Abd Elgleel
 ================================================================================================================================
 */

#include "twi_interface.h"
#include "twi_private.h"

void TWI_init(const I2c_ConfigType *i2c_config)
{
	/*
	 * Choose required bit rate & prescaler
	 * SCL frequency = (CPU clock frequency / ((16+2(TWBR))) * 4^TWPS)
	 * &0xFC to clear bits before insertion
	 * &0x03
	 */
	TWI_TWBR_REG.Byte = i2c_config->bit_rate;
	TWI_TWSR_REG.Byte = (TWI_TWSR_REG.Byte & 0xFC) |((i2c_config->i2c_prescaler)&0x03);

	/* Two Wire Bus address my address if any master device want to call me:master_slave_address  (used in case this MC is a slave device)
	   General Call Recognition: Off */
	/* my address = master_slave_address :) */
	TWI_TWAR_REG.Byte = i2c_config->address;

	/* enable TWI */
	TWI_TWCR_REG.Byte=0x04;
}

void TWI_start(void)
{
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1 in TWCR Register
	 * send the start bit by TWSTA=1 in TWCR Register
	 * Enable TWI Module TWEN=1 in TWCR Register
	 */
	TWI_TWCR_REG.Byte=0xA4;
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(!(TWI_TWCR_REG.Bits.TWINT_BIT));

}

void TWI_stop(void)
{
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1 in TWCR Register
	 * send the stop bit by TWSTO=1	in TWCR Register
	 * Enable TWI Module TWEN=1	in TWCR Register
	 */
	TWI_TWCR_REG.Byte=0x94;

}

void TWI_writeByte(uint8 data)
{
    /* Put data On TWI data Register */
    TWI_TWDR_REB = data;
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
}

uint8 TWI_readByteWithACK(void)
{
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}

uint8 TWI_readByteWithNACK(void)
{
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}

uint8 TWI_getStatus(void)
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    return status;
}
