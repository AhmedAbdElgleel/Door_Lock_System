
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000029c8  00002a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080007c  0080007c  00002a78  2**0
                  ALLOC
  3 .stab         00003018  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003467  00000000  00000000  00005a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009037  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000091a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000adf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bcdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ca88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ce75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__vector_4>
      14:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 16 10 	jmp	0x202c	; 0x202c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__vector_9>
      28:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__vector_10>
      2c:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 05 	call	0xbae	; 0xbae <main>
      8a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
/*
 * Description :
 * Function to setup the direction of buzzer as output pin and turn off buzzer initially using gpio.
 */
void BUZZER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, TURN_OFF_BUZZER);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <BUZZER_on>:
/*
 * Description :
 * Function to turn on the buzzer using gpio.
 */
void BUZZER_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, TURN_ON_BUZZER);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_off>:
/*
 * Description :
 * Function to turn off the buzzer using gpio .
 */
void BUZZER_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, TURN_OFF_BUZZER);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <BUZZER_toggle>:
/*
 * Description :
 * Function to Toggle the buzzer sound using gpio .
 */
void BUZZER_toggle(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_togglePin(BUZZER_PORT_ID, BUZZER_PIN_ID);
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	67 e0       	ldi	r22, 0x07	; 7
     ba4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <GPIO_togglePin>
}
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <main>:

/*******************************************************************************
 *                      Main Function                         				   *
 *******************************************************************************/
int main(void)
{
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	ae 97       	sbiw	r28, 0x2e	; 46
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
	/*Note the Prescale of Pwm in this app it doesnt important choose what ever u want bec.
	  i will use Pwm in 100% duty and 0% duty so i have no restriction on the output of pwm
	  i have no certain requirment for the ouput signal frequency so in this app u can choose
	  a pwm prescale what ever u want :) */
	PWM_config Pwm_configuration={PWM0,NON_INVERTING,PWM_F_CPU_1024};
     bc2:	9e 01       	movw	r18, r28
     bc4:	2b 5f       	subi	r18, 0xFB	; 251
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
     bc8:	3c 8f       	std	Y+28, r19	; 0x1c
     bca:	2b 8f       	std	Y+27, r18	; 0x1b
     bcc:	89 e7       	ldi	r24, 0x79	; 121
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	9e 8f       	std	Y+30, r25	; 0x1e
     bd2:	8d 8f       	std	Y+29, r24	; 0x1d
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	9f 8f       	std	Y+31, r25	; 0x1f
     bd8:	ed 8d       	ldd	r30, Y+29	; 0x1d
     bda:	fe 8d       	ldd	r31, Y+30	; 0x1e
     bdc:	00 80       	ld	r0, Z
     bde:	2d 8d       	ldd	r18, Y+29	; 0x1d
     be0:	3e 8d       	ldd	r19, Y+30	; 0x1e
     be2:	2f 5f       	subi	r18, 0xFF	; 255
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	3e 8f       	std	Y+30, r19	; 0x1e
     be8:	2d 8f       	std	Y+29, r18	; 0x1d
     bea:	eb 8d       	ldd	r30, Y+27	; 0x1b
     bec:	fc 8d       	ldd	r31, Y+28	; 0x1c
     bee:	00 82       	st	Z, r0
     bf0:	2b 8d       	ldd	r18, Y+27	; 0x1b
     bf2:	3c 8d       	ldd	r19, Y+28	; 0x1c
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	3c 8f       	std	Y+28, r19	; 0x1c
     bfa:	2b 8f       	std	Y+27, r18	; 0x1b
     bfc:	3f 8d       	ldd	r19, Y+31	; 0x1f
     bfe:	31 50       	subi	r19, 0x01	; 1
     c00:	3f 8f       	std	Y+31, r19	; 0x1f
     c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c04:	88 23       	and	r24, r24
     c06:	41 f7       	brne	.-48     	; 0xbd8 <main+0x2a>

	/*Just intial values where in this project i will use timer1 in CTC mode with 1024 prescale and Inital value =0 but i
	  I Will change the compare value from time to time*/
	Timer_ConfigType Timer_configuration={0,0,Timer1,TIMER_F_CPU_1024,Compare_Mode};
     c08:	fe 01       	movw	r30, r28
     c0a:	38 96       	adiw	r30, 0x08	; 8
     c0c:	f9 a3       	std	Y+33, r31	; 0x21
     c0e:	e8 a3       	std	Y+32, r30	; 0x20
     c10:	22 e7       	ldi	r18, 0x72	; 114
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	3b a3       	std	Y+35, r19	; 0x23
     c16:	2a a3       	std	Y+34, r18	; 0x22
     c18:	37 e0       	ldi	r19, 0x07	; 7
     c1a:	3c a3       	std	Y+36, r19	; 0x24
     c1c:	ea a1       	ldd	r30, Y+34	; 0x22
     c1e:	fb a1       	ldd	r31, Y+35	; 0x23
     c20:	00 80       	ld	r0, Z
     c22:	2a a1       	ldd	r18, Y+34	; 0x22
     c24:	3b a1       	ldd	r19, Y+35	; 0x23
     c26:	2f 5f       	subi	r18, 0xFF	; 255
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	3b a3       	std	Y+35, r19	; 0x23
     c2c:	2a a3       	std	Y+34, r18	; 0x22
     c2e:	e8 a1       	ldd	r30, Y+32	; 0x20
     c30:	f9 a1       	ldd	r31, Y+33	; 0x21
     c32:	00 82       	st	Z, r0
     c34:	28 a1       	ldd	r18, Y+32	; 0x20
     c36:	39 a1       	ldd	r19, Y+33	; 0x21
     c38:	2f 5f       	subi	r18, 0xFF	; 255
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	39 a3       	std	Y+33, r19	; 0x21
     c3e:	28 a3       	std	Y+32, r18	; 0x20
     c40:	3c a1       	ldd	r19, Y+36	; 0x24
     c42:	31 50       	subi	r19, 0x01	; 1
     c44:	3c a3       	std	Y+36, r19	; 0x24
     c46:	8c a1       	ldd	r24, Y+36	; 0x24
     c48:	88 23       	and	r24, r24
     c4a:	41 f7       	brne	.-48     	; 0xc1c <main+0x6e>

	/*UART Configurations and Initialization*/
	UART_ConfigType Uart_configuration={CHARACTER_SIZE_8,EVEN_PARITY,STOP_1BIT,9600};
     c4c:	fe 01       	movw	r30, r28
     c4e:	3f 96       	adiw	r30, 0x0f	; 15
     c50:	fe a3       	std	Y+38, r31	; 0x26
     c52:	ed a3       	std	Y+37, r30	; 0x25
     c54:	2b e6       	ldi	r18, 0x6B	; 107
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	38 a7       	std	Y+40, r19	; 0x28
     c5a:	2f a3       	std	Y+39, r18	; 0x27
     c5c:	37 e0       	ldi	r19, 0x07	; 7
     c5e:	39 a7       	std	Y+41, r19	; 0x29
     c60:	ef a1       	ldd	r30, Y+39	; 0x27
     c62:	f8 a5       	ldd	r31, Y+40	; 0x28
     c64:	00 80       	ld	r0, Z
     c66:	2f a1       	ldd	r18, Y+39	; 0x27
     c68:	38 a5       	ldd	r19, Y+40	; 0x28
     c6a:	2f 5f       	subi	r18, 0xFF	; 255
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
     c6e:	38 a7       	std	Y+40, r19	; 0x28
     c70:	2f a3       	std	Y+39, r18	; 0x27
     c72:	ed a1       	ldd	r30, Y+37	; 0x25
     c74:	fe a1       	ldd	r31, Y+38	; 0x26
     c76:	00 82       	st	Z, r0
     c78:	2d a1       	ldd	r18, Y+37	; 0x25
     c7a:	3e a1       	ldd	r19, Y+38	; 0x26
     c7c:	2f 5f       	subi	r18, 0xFF	; 255
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	3e a3       	std	Y+38, r19	; 0x26
     c82:	2d a3       	std	Y+37, r18	; 0x25
     c84:	39 a5       	ldd	r19, Y+41	; 0x29
     c86:	31 50       	subi	r19, 0x01	; 1
     c88:	39 a7       	std	Y+41, r19	; 0x29
     c8a:	89 a5       	ldd	r24, Y+41	; 0x29
     c8c:	88 23       	and	r24, r24
     c8e:	41 f7       	brne	.-48     	; 0xc60 <main+0xb2>

	/*Intialize TWI*/
	I2c_ConfigType	I2c_configuration= {0x01,0x02,TWI_Prescaler_1};
     c90:	fe 01       	movw	r30, r28
     c92:	76 96       	adiw	r30, 0x16	; 22
     c94:	fb a7       	std	Y+43, r31	; 0x2b
     c96:	ea a7       	std	Y+42, r30	; 0x2a
     c98:	28 e6       	ldi	r18, 0x68	; 104
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	3d a7       	std	Y+45, r19	; 0x2d
     c9e:	2c a7       	std	Y+44, r18	; 0x2c
     ca0:	33 e0       	ldi	r19, 0x03	; 3
     ca2:	3e a7       	std	Y+46, r19	; 0x2e
     ca4:	ec a5       	ldd	r30, Y+44	; 0x2c
     ca6:	fd a5       	ldd	r31, Y+45	; 0x2d
     ca8:	00 80       	ld	r0, Z
     caa:	2c a5       	ldd	r18, Y+44	; 0x2c
     cac:	3d a5       	ldd	r19, Y+45	; 0x2d
     cae:	2f 5f       	subi	r18, 0xFF	; 255
     cb0:	3f 4f       	sbci	r19, 0xFF	; 255
     cb2:	3d a7       	std	Y+45, r19	; 0x2d
     cb4:	2c a7       	std	Y+44, r18	; 0x2c
     cb6:	ea a5       	ldd	r30, Y+42	; 0x2a
     cb8:	fb a5       	ldd	r31, Y+43	; 0x2b
     cba:	00 82       	st	Z, r0
     cbc:	2a a5       	ldd	r18, Y+42	; 0x2a
     cbe:	3b a5       	ldd	r19, Y+43	; 0x2b
     cc0:	2f 5f       	subi	r18, 0xFF	; 255
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	3b a7       	std	Y+43, r19	; 0x2b
     cc6:	2a a7       	std	Y+42, r18	; 0x2a
     cc8:	3e a5       	ldd	r19, Y+46	; 0x2e
     cca:	31 50       	subi	r19, 0x01	; 1
     ccc:	3e a7       	std	Y+46, r19	; 0x2e
     cce:	8e a5       	ldd	r24, Y+46	; 0x2e
     cd0:	88 23       	and	r24, r24
     cd2:	41 f7       	brne	.-48     	; 0xca4 <main+0xf6>
	TWI_init(&I2c_configuration);
     cd4:	ce 01       	movw	r24, r28
     cd6:	46 96       	adiw	r24, 0x16	; 22
     cd8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <TWI_init>

	/*Enable Global Interrupt*/
	SREG_REG.Bits.I_Bit=1;
     cdc:	ef e5       	ldi	r30, 0x5F	; 95
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	80 68       	ori	r24, 0x80	; 128
     ce4:	80 83       	st	Z, r24

	UART_init(&Uart_configuration);
     ce6:	ce 01       	movw	r24, r28
     ce8:	0f 96       	adiw	r24, 0x0f	; 15
     cea:	0e 94 6f 13 	call	0x26de	; 0x26de <UART_init>

	/*Set timer1 to call back */
	Timer_setCallBack(timer1_SetRequiredCallBackFunction, Timer1);
     cee:	80 eb       	ldi	r24, 0xB0	; 176
     cf0:	97 e0       	ldi	r25, 0x07	; 7
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	0e 94 af 10 	call	0x215e	; 0x215e <Timer_setCallBack>

	/*Initialize password*/
	BUZZER_init();
     cf8:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>

	/*Initialize motor*/
	DcMOTOR_init();
     cfc:	0e 94 51 08 	call	0x10a2	; 0x10a2 <DcMOTOR_init>

	while(1)
	{
		switch(g_MC2_application_sequence)
     d00:	80 91 7c 00 	lds	r24, 0x007C
     d04:	e8 2f       	mov	r30, r24
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	fa 8f       	std	Y+26, r31	; 0x1a
     d0a:	e9 8f       	std	Y+25, r30	; 0x19
     d0c:	29 8d       	ldd	r18, Y+25	; 0x19
     d0e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	09 f4       	brne	.+2      	; 0xd18 <main+0x16a>
     d16:	43 c0       	rjmp	.+134    	; 0xd9e <main+0x1f0>
     d18:	89 8d       	ldd	r24, Y+25	; 0x19
     d1a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d1c:	83 30       	cpi	r24, 0x03	; 3
     d1e:	91 05       	cpc	r25, r1
     d20:	54 f4       	brge	.+20     	; 0xd36 <main+0x188>
     d22:	e9 8d       	ldd	r30, Y+25	; 0x19
     d24:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d26:	30 97       	sbiw	r30, 0x00	; 0
     d28:	91 f0       	breq	.+36     	; 0xd4e <main+0x1a0>
     d2a:	29 8d       	ldd	r18, Y+25	; 0x19
     d2c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d2e:	21 30       	cpi	r18, 0x01	; 1
     d30:	31 05       	cpc	r19, r1
     d32:	c9 f0       	breq	.+50     	; 0xd66 <main+0x1b8>
     d34:	e5 cf       	rjmp	.-54     	; 0xd00 <main+0x152>
     d36:	89 8d       	ldd	r24, Y+25	; 0x19
     d38:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	91 05       	cpc	r25, r1
     d3e:	d9 f1       	breq	.+118    	; 0xdb6 <main+0x208>
     d40:	e9 8d       	ldd	r30, Y+25	; 0x19
     d42:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d44:	e4 30       	cpi	r30, 0x04	; 4
     d46:	f1 05       	cpc	r31, r1
     d48:	09 f4       	brne	.+2      	; 0xd4c <main+0x19e>
     d4a:	b0 c0       	rjmp	.+352    	; 0xeac <main+0x2fe>
     d4c:	d9 cf       	rjmp	.-78     	; 0xd00 <main+0x152>
		{
		case RECEIVING_PASSWORDS_STAGE:

			/*Receive the first password enter by user*/
			receive_Password(g_passwordArray1);
     d4e:	8e e7       	ldi	r24, 0x7E	; 126
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 bc 07 	call	0xf78	; 0xf78 <receive_Password>

			/*Receive the re-enterd password enter by user*/
			receive_Password(g_passwordArray2);
     d56:	83 e8       	ldi	r24, 0x83	; 131
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 bc 07 	call	0xf78	; 0xf78 <receive_Password>

			/* Increment Stage for next loop (go to CHECK_PASSWORDS_MATCHING_STAGE )*/
			g_MC2_application_sequence=CHECK_PASSWORDS_MATCHING_STAGE;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 7c 00 	sts	0x007C, r24
     d64:	cd cf       	rjmp	.-102    	; 0xd00 <main+0x152>
		case CHECK_PASSWORDS_MATCHING_STAGE:
		{
			/*NOTE : i made this block scope bec. i want the local variables defined in this case just to be local for its case*/

			/*Check if the two passwords sent via HMI ECU are the same or not*/
			uint8 twoPassowrdState=check_TwoPasswords(g_passwordArray1,g_passwordArray2);
     d66:	8e e7       	ldi	r24, 0x7E	; 126
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	23 e8       	ldi	r18, 0x83	; 131
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	b9 01       	movw	r22, r18
     d70:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <check_TwoPasswords>
     d74:	8c 83       	std	Y+4, r24	; 0x04

			if(twoPassowrdState == MATCHED) /*Two passwords are matched*/
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	84 36       	cpi	r24, 0x64	; 100
     d7a:	39 f4       	brne	.+14     	; 0xd8a <main+0x1dc>
			{
				/*Send to HMI_ECU that the two password are matched*/
				send_Byte(MATCHED);
     d7c:	84 e6       	ldi	r24, 0x64	; 100
     d7e:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

				/* Increment Stage for next loop (go to SAVE_PASSWORD_STAGE )*/
				g_MC2_application_sequence=SAVE_PASSWORD_INTO_EEPROM_STAGE;
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	80 93 7c 00 	sts	0x007C, r24
     d88:	bb cf       	rjmp	.-138    	; 0xd00 <main+0x152>
			}
			else if(twoPassowrdState == NOT_MATCHED)	/*Two passwords are NOT matched*/
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	82 33       	cpi	r24, 0x32	; 50
     d8e:	09 f0       	breq	.+2      	; 0xd92 <main+0x1e4>
     d90:	b7 cf       	rjmp	.-146    	; 0xd00 <main+0x152>
			{
				/*Send to HMI_ECU that the two password are matched*/
				send_Byte(NOT_MATCHED);
     d92:	82 e3       	ldi	r24, 0x32	; 50
     d94:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

				/*Go to RECEIVING_PASSWORDS_STAGE*/
				g_MC2_application_sequence=RECEIVING_PASSWORDS_STAGE;
     d98:	10 92 7c 00 	sts	0x007C, r1
     d9c:	b1 cf       	rjmp	.-158    	; 0xd00 <main+0x152>
			break;
		}
		case SAVE_PASSWORD_INTO_EEPROM_STAGE:

			/*Write the password in EEPROM at index start from 0x0000 to 0x0000+(PASWWORD_SIZE-1)*/
			EEPROM_writeArray(0X0000, g_passwordArray1, PASSWORD_SIZE);
     d9e:	2e e7       	ldi	r18, 0x7E	; 126
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	b9 01       	movw	r22, r18
     da8:	45 e0       	ldi	r20, 0x05	; 5
     daa:	0e 94 80 09 	call	0x1300	; 0x1300 <EEPROM_writeArray>

			/* Increment Stage for next loop (go to MAIN_MENU_OPTION_STAGE )*/
			g_MC2_application_sequence=MAIN_MENU_OPTION_STAGE;
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	80 93 7c 00 	sts	0x007C, r24
     db4:	a5 cf       	rjmp	.-182    	; 0xd00 <main+0x152>
		{
			/*NOTE : i made this block scope bec. i want the local varriables defined in this case just to be local for its case*/
			uint8 twoPasswordState;

			/*Receive the password enter from user after choise an + or - option in main option menu*/
			receive_Password(g_passwordArray2);
     db6:	83 e8       	ldi	r24, 0x83	; 131
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 bc 07 	call	0xf78	; 0xf78 <receive_Password>

			/*read the old password stored in the EEPROM*/
			EEPROM_readArray(0X0000, g_passwordArray1, PASSWORD_SIZE);
     dbe:	2e e7       	ldi	r18, 0x7E	; 126
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	b9 01       	movw	r22, r18
     dc8:	45 e0       	ldi	r20, 0x05	; 5
     dca:	0e 94 29 0a 	call	0x1452	; 0x1452 <EEPROM_readArray>

			/*Compare the oldest password stored in EEPROM with the Password enter via user*/
			twoPasswordState=check_TwoPasswords(g_passwordArray1, g_passwordArray2);
     dce:	8e e7       	ldi	r24, 0x7E	; 126
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	23 e8       	ldi	r18, 0x83	; 131
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	b9 01       	movw	r22, r18
     dd8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <check_TwoPasswords>
     ddc:	8b 83       	std	Y+3, r24	; 0x03

			/*if two password are matched then make for user what he/she choose in main menu option*/
			if(twoPasswordState==MATCHED)
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	84 36       	cpi	r24, 0x64	; 100
     de2:	d1 f4       	brne	.+52     	; 0xe18 <main+0x26a>
			{
				uint8 recieveByte;

				/*Send Matched to HMI ECU*/
				send_Byte(MATCHED);
     de4:	84 e6       	ldi	r24, 0x64	; 100
     de6:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

				recieveByte=recieve_Byte();
     dea:	0e 94 22 08 	call	0x1044	; 0x1044 <recieve_Byte>
     dee:	8a 83       	std	Y+2, r24	; 0x02

				if(recieveByte=='+')
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	8b 32       	cpi	r24, 0x2B	; 43
     df4:	39 f4       	brne	.+14     	; 0xe04 <main+0x256>
				{
					/*send to HMI ECU 3 which is indication for HMI ECU to go to OPEN_DOOR_STAGE in HMI ECU for displaying the required messages */
					send_Byte(3);
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

					/* Increment Stage for next loop (go to OPEN_DOOR_STAGE to unlocking/locking the door )*/
					g_MC2_application_sequence=OPEN_DOOR_STAGE;
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	80 93 7c 00 	sts	0x007C, r24
     e02:	7e cf       	rjmp	.-260    	; 0xd00 <main+0x152>
				}
				else if (recieveByte=='-')
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	8d 32       	cpi	r24, 0x2D	; 45
     e08:	09 f0       	breq	.+2      	; 0xe0c <main+0x25e>
     e0a:	7a cf       	rjmp	.-268    	; 0xd00 <main+0x152>
				{
					/*send to HMI ECU 0 which is indication for HMI ECU to go to CREATE_PASSWORD_STAGE in HMI ECU */
					send_Byte(0);
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

					/* go to first  Stage RECEIVING_PASSWORDS_STAGE in CONTROL ECU to make a new password again*/
					g_MC2_application_sequence=RECEIVING_PASSWORDS_STAGE;
     e12:	10 92 7c 00 	sts	0x007C, r1
     e16:	74 cf       	rjmp	.-280    	; 0xd00 <main+0x152>
				else
				{
					/*Do Nothing*/
				}
			}
			else if (twoPasswordState==NOT_MATCHED)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	82 33       	cpi	r24, 0x32	; 50
     e1c:	09 f0       	breq	.+2      	; 0xe20 <main+0x272>
     e1e:	70 cf       	rjmp	.-288    	; 0xd00 <main+0x152>
			{
				/*Var for counting number of times user entered wrong password*/
				uint8 count;

				/*Send to HMI_ECU that the Entered password and the saved one are not matched*/
				send_Byte(NOT_MATCHED);
     e20:	82 e3       	ldi	r24, 0x32	; 50
     e22:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

				 * but, if the number of timers that user re-enterd the password are more than 2 times we will
				 * Activate the Buzzer and block the system for 1 minute and After the 1 min ends return to case 3
				*/

				for(count=0;count<2;count++)
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	22 c0       	rjmp	.+68     	; 0xe6e <main+0x2c0>
				{
					/*Receive the entered password by user*/
					receive_Password(g_passwordArray2);
     e2a:	83 e8       	ldi	r24, 0x83	; 131
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 bc 07 	call	0xf78	; 0xf78 <receive_Password>

					/*Read the password already stored in External EEPROM*/
					EEPROM_readArray(0X0000, g_passwordArray1, PASSWORD_SIZE);
     e32:	2e e7       	ldi	r18, 0x7E	; 126
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	b9 01       	movw	r22, r18
     e3c:	45 e0       	ldi	r20, 0x05	; 5
     e3e:	0e 94 29 0a 	call	0x1452	; 0x1452 <EEPROM_readArray>

					if(check_TwoPasswords(g_passwordArray1, g_passwordArray2)==MATCHED)
     e42:	8e e7       	ldi	r24, 0x7E	; 126
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	23 e8       	ldi	r18, 0x83	; 131
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	b9 01       	movw	r22, r18
     e4c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <check_TwoPasswords>
     e50:	84 36       	cpi	r24, 0x64	; 100
     e52:	39 f4       	brne	.+14     	; 0xe62 <main+0x2b4>
					{
						/*Send the HMI ECU that two password are matched*/
						send_Byte(MATCHED);
     e54:	84 e6       	ldi	r24, 0x64	; 100
     e56:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

						/*go to MAIN_MENU_OPTION_STAGE where the user choose again what he want  */
						g_MC2_application_sequence=MAIN_MENU_OPTION_STAGE;
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	80 93 7c 00 	sts	0x007C, r24
     e60:	09 c0       	rjmp	.+18     	; 0xe74 <main+0x2c6>
						break;
					}
					else
					{
						send_Byte(NOT_MATCHED);
     e62:	82 e3       	ldi	r24, 0x32	; 50
     e64:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

				 * but, if the number of timers that user re-enterd the password are more than 2 times we will
				 * Activate the Buzzer and block the system for 1 minute and After the 1 min ends return to case 3
				*/

				for(count=0;count<2;count++)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	d8 f2       	brcs	.-74     	; 0xe2a <main+0x27c>
					}
				}
				/*this mean that user enterd wrong password more than 2 times so we will
				 * Activate the Buzzer and block the system for 1 minute and After the 1 min ends return to case 3
				*/
				if(count==2)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	a9 f4       	brne	.+42     	; 0xea4 <main+0x2f6>
					  where F_CPU= 8 MHZ and Timer Prescale = 1024
					  so we need 468750 count from timer to time 1 min
					  so we will put in compare register of timer1 value = 46875
					  we will get an 10 interrupts for time 1 min
					*/
					Timer_configuration.timer_compare_MatchValue=46875;
     e7a:	8b e1       	ldi	r24, 0x1B	; 27
     e7c:	97 eb       	ldi	r25, 0xB7	; 183
     e7e:	9b 87       	std	Y+11, r25	; 0x0b
     e80:	8a 87       	std	Y+10, r24	; 0x0a

					Timer_init(&Timer_configuration);
     e82:	ce 01       	movw	r24, r28
     e84:	08 96       	adiw	r24, 0x08	; 8
     e86:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <Timer_init>

					/*display error message in HMI ECU and turn the buzzer one in Control ECU and wait for 1 min as g_Tick will be equal 10 after 1 min*/
					BUZZER_on();
     e8a:	0e 94 b4 05 	call	0xb68	; 0xb68 <BUZZER_on>
					while(g_tick < 10)
     e8e:	80 91 7d 00 	lds	r24, 0x007D
     e92:	8a 30       	cpi	r24, 0x0A	; 10
     e94:	e0 f3       	brcs	.-8      	; 0xe8e <main+0x2e0>
						 *SW code but actually the compiler does't know that g_tick will be incremented via an interrupt
						 *in timer1 Hardware so Kindly define g_tick using keyword volatile */
					}

					/*stop timer1 via using deInit() Function*/
					Timer_DeInit(Timer1);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Timer_DeInit>

					g_tick=0;
     e9c:	10 92 7d 00 	sts	0x007D, r1

					/*Turn off the buzzer after the 1 min ends*/
					BUZZER_off();
     ea0:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_off>
				}
					/* go to MAIN_MENU_OPTION_STAGE */
					g_MC2_application_sequence=MAIN_MENU_OPTION_STAGE;
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	80 93 7c 00 	sts	0x007C, r24
     eaa:	2a cf       	rjmp	.-428    	; 0xd00 <main+0x152>
			 so we need 117188 count from timer to time 15 sec
			 so we will put in compare register of timer1 value = 58594
			 we will need 2 interrupts for time 15 sec
			 NOTE Timer Timer_configuration its prescale and ID inital value
			*/
			Timer_configuration.timer_compare_MatchValue=58594;
     eac:	82 ee       	ldi	r24, 0xE2	; 226
     eae:	94 ee       	ldi	r25, 0xE4	; 228
     eb0:	9b 87       	std	Y+11, r25	; 0x0b
     eb2:	8a 87       	std	Y+10, r24	; 0x0a

			/*Intialize PWM of timer0*/
			PWM_init(&Pwm_configuration);
     eb4:	ce 01       	movw	r24, r28
     eb6:	05 96       	adiw	r24, 0x05	; 5
     eb8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <PWM_init>

			/*Initialize Timer 1*/
			Timer_init(&Timer_configuration);
     ebc:	ce 01       	movw	r24, r28
     ebe:	08 96       	adiw	r24, 0x08	; 8
     ec0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <Timer_init>

			/*Turn on the motor clockwise */
			DCMOTOR_rotateWithControl(ROTATE_CLOCKWISE, 100, FIRST_DC_MOTOR, PWM0);
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	64 e6       	ldi	r22, 0x64	; 100
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DCMOTOR_rotateWithControl>

			/*Wait for 15 sec Rotating motor clockwise*/
			while(g_tick<2){};
     ed0:	80 91 7d 00 	lds	r24, 0x007D
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	e0 f3       	brcs	.-8      	; 0xed0 <main+0x322>

			/*Stop Timer1*/
			Timer_DeInit(Timer1);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Timer_DeInit>

			g_tick=0;
     ede:	10 92 7d 00 	sts	0x007D, r1

			/*stop the dc motor */
			DCMOTOR_rotateWithControl(STOP_ROTATION, 0, FIRST_DC_MOTOR, PWM0);
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DCMOTOR_rotateWithControl>

			/*set Compare value = 23438 ,prescale ,timer id,mode as i initialized
			 we will need 1 interrupt within 3 sec*/
			Timer_configuration.timer_compare_MatchValue=23438;
     eee:	8e e8       	ldi	r24, 0x8E	; 142
     ef0:	9b e5       	ldi	r25, 0x5B	; 91
     ef2:	9b 87       	std	Y+11, r25	; 0x0b
     ef4:	8a 87       	std	Y+10, r24	; 0x0a
			Timer_init(&Timer_configuration);
     ef6:	ce 01       	movw	r24, r28
     ef8:	08 96       	adiw	r24, 0x08	; 8
     efa:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <Timer_init>

			/*wait for 3 sec and the motor is stop*/
			while(g_tick<1){};
     efe:	80 91 7d 00 	lds	r24, 0x007D
     f02:	88 23       	and	r24, r24
     f04:	e1 f3       	breq	.-8      	; 0xefe <main+0x350>

			/*Keep door open while their is a motion detected from pir as the people still entering*/
			while(PIR_Motion()==MOTION_DECTECTED);
     f06:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <PIR_Motion>
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	e1 f3       	breq	.-8      	; 0xf06 <main+0x358>

			/*When the PEOPLE enter send byte NO_MOTION_DECTECTED */
			send_Byte(NO_MOTION_DECTECTED);
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	0e 94 39 08 	call	0x1072	; 0x1072 <send_Byte>

			/*Stop Timer1*/
			Timer_DeInit(Timer1);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Timer_DeInit>

			g_tick=0;
     f1a:	10 92 7d 00 	sts	0x007D, r1

			/*Turn on the motor clockwise */
			DCMOTOR_rotateWithControl(ROTATE_ANTI_CLOCKWISE, 100, FIRST_DC_MOTOR, PWM0);
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	64 e6       	ldi	r22, 0x64	; 100
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DCMOTOR_rotateWithControl>

			Timer_configuration.timer_compare_MatchValue=58594;
     f2a:	82 ee       	ldi	r24, 0xE2	; 226
     f2c:	94 ee       	ldi	r25, 0xE4	; 228
     f2e:	9b 87       	std	Y+11, r25	; 0x0b
     f30:	8a 87       	std	Y+10, r24	; 0x0a
			/*Initialize Timer 1*/
			Timer_init(&Timer_configuration);
     f32:	ce 01       	movw	r24, r28
     f34:	08 96       	adiw	r24, 0x08	; 8
     f36:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <Timer_init>

			/*Wait for 15 sec*/
			while(g_tick<2){};
     f3a:	80 91 7d 00 	lds	r24, 0x007D
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	e0 f3       	brcs	.-8      	; 0xf3a <main+0x38c>

			/*Stop Timer1*/
			Timer_DeInit(Timer1);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Timer_DeInit>

			g_tick=0;
     f48:	10 92 7d 00 	sts	0x007D, r1
			/*Turn off the motor*/
			DCMOTOR_rotateWithControl(STOP_ROTATION, 0, FIRST_DC_MOTOR, PWM0);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	41 e0       	ldi	r20, 0x01	; 1
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DCMOTOR_rotateWithControl>

			/*go to MAIN_MENU_OPTION_STAGE in next loop*/
			g_MC2_application_sequence=MAIN_MENU_OPTION_STAGE;
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	80 93 7c 00 	sts	0x007C, r24
     f5e:	d0 ce       	rjmp	.-608    	; 0xd00 <main+0x152>

00000f60 <timer1_SetRequiredCallBackFunction>:
/*
 * Function Description :
 * used to increment a global variable to indicate number of interrupts happend for timer1
 */
void timer1_SetRequiredCallBackFunction(void)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     f68:	80 91 7d 00 	lds	r24, 0x007D
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	80 93 7d 00 	sts	0x007D, r24
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <receive_Password>:
/*
 * Function Description :
 * Receiving Password entered by the user from HMI_ECU and store it in array defined global
 */
void receive_Password(uint8* a_PasswordArray)
{
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <receive_Password+0xa>
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9b 83       	std	Y+3, r25	; 0x03
     f8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     f8c:	19 82       	std	Y+1, r1	; 0x01
	while(UART_recieveByte()!=READY);
     f8e:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_recieveByte>
     f92:	8f 3f       	cpi	r24, 0xFF	; 255
     f94:	e1 f7       	brne	.-8      	; 0xf8e <receive_Password+0x16>
	UART_sendByte(READY);
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <UART_sendByte>
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <receive_Password+0x44>
	while(i<PASSWORD_SIZE)
	{
		a_PasswordArray[i]=UART_recieveByte();
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	9b 81       	ldd	r25, Y+3	; 0x03
     fa8:	8c 01       	movw	r16, r24
     faa:	02 0f       	add	r16, r18
     fac:	13 1f       	adc	r17, r19
     fae:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_recieveByte>
     fb2:	f8 01       	movw	r30, r16
     fb4:	80 83       	st	Z, r24
		i++;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	89 83       	std	Y+1, r24	; 0x01
void receive_Password(uint8* a_PasswordArray)
{
	uint8 i=0;
	while(UART_recieveByte()!=READY);
	UART_sendByte(READY);
	while(i<PASSWORD_SIZE)
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	85 30       	cpi	r24, 0x05	; 5
     fc0:	70 f3       	brcs	.-36     	; 0xf9e <receive_Password+0x26>
	{
		a_PasswordArray[i]=UART_recieveByte();
		i++;

	}
	UART_sendByte(DONE);
     fc2:	8e ef       	ldi	r24, 0xFE	; 254
     fc4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <UART_sendByte>
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	08 95       	ret

00000fd8 <check_TwoPasswords>:
 * 1. Taking two passwords
 * 2. Check if both are the same
 * 3. return if they are matched or not
 */
uint8 check_TwoPasswords(uint8 *Password_array1,uint8 *Password_array2)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <check_TwoPasswords+0x6>
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <check_TwoPasswords+0x8>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <check_TwoPasswords+0xa>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9b 83       	std	Y+3, r25	; 0x03
     fe8:	8a 83       	std	Y+2, r24	; 0x02
     fea:	7d 83       	std	Y+5, r23	; 0x05
     fec:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++)
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	1a c0       	rjmp	.+52     	; 0x1026 <check_TwoPasswords+0x4e>
	{
		if(Password_array1[i]!=Password_array2[i])
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	40 81       	ld	r20, Z
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	fc 01       	movw	r30, r24
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	80 81       	ld	r24, Z
    1016:	48 17       	cp	r20, r24
    1018:	19 f0       	breq	.+6      	; 0x1020 <check_TwoPasswords+0x48>
		{
			return NOT_MATCHED;
    101a:	82 e3       	ldi	r24, 0x32	; 50
    101c:	8e 83       	std	Y+6, r24	; 0x06
    101e:	08 c0       	rjmp	.+16     	; 0x1030 <check_TwoPasswords+0x58>
 * 3. return if they are matched or not
 */
uint8 check_TwoPasswords(uint8 *Password_array1,uint8 *Password_array2)
{
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	85 30       	cpi	r24, 0x05	; 5
    102a:	18 f3       	brcs	.-58     	; 0xff2 <check_TwoPasswords+0x1a>
		if(Password_array1[i]!=Password_array2[i])
		{
			return NOT_MATCHED;
		}
	}
	return MATCHED;
    102c:	84 e6       	ldi	r24, 0x64	; 100
    102e:	8e 83       	std	Y+6, r24	; 0x06
    1030:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1032:	26 96       	adiw	r28, 0x06	; 6
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <recieve_Byte>:
 * Function Description :
 * synchronising the UART in the Control_ECU and the UART in HMI_ECU
 * Receiving data from the UART in the HMI_ECU
 */
uint8 recieve_Byte(void)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
	uint8 byte;
	while(UART_recieveByte() != READY){}
    104e:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_recieveByte>
    1052:	8f 3f       	cpi	r24, 0xFF	; 255
    1054:	e1 f7       	brne	.-8      	; 0x104e <recieve_Byte+0xa>
	UART_sendByte(READY);
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <UART_sendByte>
	byte=UART_recieveByte();
    105c:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_recieveByte>
    1060:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(DONE);
    1062:	8e ef       	ldi	r24, 0xFE	; 254
    1064:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <UART_sendByte>
	return byte;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <send_Byte>:
 * Description :
 * synchronising the UART in the Control_ECU and the UART in HMI_ECU
 * Sending data to the UART in the HMI_ECU
 */
void send_Byte(uint8 byte)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	0f 92       	push	r0
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <UART_sendByte>
	while(UART_recieveByte() != READY){}
    1084:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_recieveByte>
    1088:	8f 3f       	cpi	r24, 0xFF	; 255
    108a:	e1 f7       	brne	.-8      	; 0x1084 <send_Byte+0x12>
	UART_sendByte(byte);
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <UART_sendByte>
	while(UART_recieveByte() != DONE){}
    1092:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_recieveByte>
    1096:	8e 3f       	cpi	r24, 0xFE	; 254
    1098:	e1 f7       	brne	.-8      	; 0x1092 <send_Byte+0x20>
}
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <DcMOTOR_init>:
/* Description:
 * The Function to initialize the motors pin and setup the direction for the two motor
 * via using GPIO driver.
 */
void DcMOTOR_init(void)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
#if defined (USE_FIRST_DC_MOTOR_WITH_CONTROL_SPEED)||defined(USE_FIRST_DC_MOTOR_WITHOUT_CONTROL_SPEED)
	/*define FIRST_DC_MOTOR_IN1_PIN_ID and FIRST_DC_MOTOR_IN2_PIN_ID as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	66 e0       	ldi	r22, 0x06	; 6
    10ae:	41 e0       	ldi	r20, 0x01	; 1
    10b0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	67 e0       	ldi	r22, 0x07	; 7
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_setupPinDirection>
	/*Initially Stop the First Motor */
	GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	66 e0       	ldi	r22, 0x06	; 6
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	67 e0       	ldi	r22, 0x07	; 7
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
#ifdef USE_FIRST_DC_MOTOR_WITH_CONTROL_SPEED
	/*define Enable pin of first motor as output pin*/
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT_ID, FIRST_DC_MOTOR_ENABLE_PIN_ID, PIN_OUTPUT);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	63 e0       	ldi	r22, 0x03	; 3
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_setupPinDirection>
#ifdef USE_SECOND_DC_MOTOR_WITH_CONTROL_SPEED
	/*define Enable pin of second motor as output pin*/
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT_ID, SECOND_DC_MOTOR_ENABLE_PIN_ID, PIN_OUTPUT);
#endif
#endif
}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <DCMOTOR_rotateWithControl>:
 * The function that rotate the DC Motor clock wise ,anti-clockwise or stop the motor
 * In this Function we can control the speed via using PWM
 */
#if defined(USE_FIRST_DC_MOTOR_WITH_CONTROL_SPEED) ||defined( USE_SECOND_DC_MOTOR_WITH_CONTROL_SPEED)
void DCMOTOR_rotateWithControl(uint8 a_state,uint8 a_speed,uint8 a_motorNum,uint8 a_PwmNumUsed)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <DCMOTOR_rotateWithControl+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <DCMOTOR_rotateWithControl+0x8>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	6a 83       	std	Y+2, r22	; 0x02
    10f2:	4b 83       	std	Y+3, r20	; 0x03
    10f4:	2c 83       	std	Y+4, r18	; 0x04
	if(a_motorNum==FIRST_DC_MOTOR)
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	71 f5       	brne	.+92     	; 0x1158 <DCMOTOR_rotateWithControl+0x76>
		{
			if(STOP_ROTATION==a_state)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	88 23       	and	r24, r24
    1100:	59 f4       	brne	.+22     	; 0x1118 <DCMOTOR_rotateWithControl+0x36>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	66 e0       	ldi	r22, 0x06	; 6
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    110c:	83 e0       	ldi	r24, 0x03	; 3
    110e:	67 e0       	ldi	r22, 0x07	; 7
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
    1116:	1b c0       	rjmp	.+54     	; 0x114e <DCMOTOR_rotateWithControl+0x6c>
			}
			else if(ROTATE_CLOCKWISE==a_state)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	59 f4       	brne	.+22     	; 0x1134 <DCMOTOR_rotateWithControl+0x52>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	66 e0       	ldi	r22, 0x06	; 6
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	67 e0       	ldi	r22, 0x07	; 7
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
    1132:	0d c0       	rjmp	.+26     	; 0x114e <DCMOTOR_rotateWithControl+0x6c>
			}
			else if(ROTATE_ANTI_CLOCKWISE==a_state)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	51 f4       	brne	.+20     	; 0x114e <DCMOTOR_rotateWithControl+0x6c>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	66 e0       	ldi	r22, 0x06	; 6
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1144:	83 e0       	ldi	r24, 0x03	; 3
    1146:	67 e0       	ldi	r22, 0x07	; 7
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
			}
			else
			{
				/*Do Nothing*/
			}
			PWM_setDutyCycle(a_PwmNumUsed, a_speed);
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	6a 81       	ldd	r22, Y+2	; 0x02
    1152:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <PWM_setDutyCycle>
    1156:	2c c0       	rjmp	.+88     	; 0x11b0 <DCMOTOR_rotateWithControl+0xce>
		}
		else if(a_motorNum==SECOND_DC_MOTOR)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	49 f5       	brne	.+82     	; 0x11b0 <DCMOTOR_rotateWithControl+0xce>
		{
			if(STOP_ROTATION==a_state)
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	88 23       	and	r24, r24
    1162:	59 f4       	brne	.+22     	; 0x117a <DCMOTOR_rotateWithControl+0x98>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN3_PIN_ID, LOGIC_LOW);
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	63 e0       	ldi	r22, 0x03	; 3
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN4_PIN_ID, LOGIC_LOW);
    116e:	83 e0       	ldi	r24, 0x03	; 3
    1170:	64 e0       	ldi	r22, 0x04	; 4
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <DCMOTOR_rotateWithControl+0xce>
			}
			else if(ROTATE_CLOCKWISE==a_state)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	59 f4       	brne	.+22     	; 0x1196 <DCMOTOR_rotateWithControl+0xb4>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN3_PIN_ID, LOGIC_LOW);
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	63 e0       	ldi	r22, 0x03	; 3
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN4_PIN_ID, LOGIC_HIGH);
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	64 e0       	ldi	r22, 0x04	; 4
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
    1194:	0d c0       	rjmp	.+26     	; 0x11b0 <DCMOTOR_rotateWithControl+0xce>
			}
			else if(ROTATE_ANTI_CLOCKWISE==a_state)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	51 f4       	brne	.+20     	; 0x11b0 <DCMOTOR_rotateWithControl+0xce>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN3_PIN_ID, LOGIC_HIGH);
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	63 e0       	ldi	r22, 0x03	; 3
    11a0:	41 e0       	ldi	r20, 0x01	; 1
    11a2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN4_PIN_ID, LOGIC_LOW);
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	64 e0       	ldi	r22, 0x04	; 4
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	0e 94 c0 0b 	call	0x1780	; 0x1780 <GPIO_writePin>
			}
			/*PWM_Timer0_Start( (speed*1.0 / 100) * 255);*/
			/*or implement any other PWM if u use First timer with it*/
		}

}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi_interface.h"
#include "util/delay.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <EEPROM_writeByte+0x6>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <EEPROM_writeByte+0x8>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    11d0:	0e 94 04 13 	call	0x2608	; 0x2608 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    11d4:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    11d8:	88 30       	cpi	r24, 0x08	; 8
    11da:	11 f0       	breq	.+4      	; 0x11e0 <EEPROM_writeByte+0x22>
		return ERROR;
    11dc:	1c 82       	std	Y+4, r1	; 0x04
    11de:	28 c0       	rjmp	.+80     	; 0x1230 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	80 70       	andi	r24, 0x00	; 0
    11e6:	97 70       	andi	r25, 0x07	; 7
    11e8:	88 0f       	add	r24, r24
    11ea:	89 2f       	mov	r24, r25
    11ec:	88 1f       	adc	r24, r24
    11ee:	99 0b       	sbc	r25, r25
    11f0:	91 95       	neg	r25
    11f2:	80 6a       	ori	r24, 0xA0	; 160
    11f4:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11f8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    11fc:	88 31       	cpi	r24, 0x18	; 24
    11fe:	11 f0       	breq	.+4      	; 0x1204 <EEPROM_writeByte+0x46>
		return ERROR;
    1200:	1c 82       	std	Y+4, r1	; 0x04
    1202:	16 c0       	rjmp	.+44     	; 0x1230 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    120a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    120e:	88 32       	cpi	r24, 0x28	; 40
    1210:	11 f0       	breq	.+4      	; 0x1216 <EEPROM_writeByte+0x58>
		return ERROR;
    1212:	1c 82       	std	Y+4, r1	; 0x04
    1214:	0d c0       	rjmp	.+26     	; 0x1230 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    121c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    1220:	88 32       	cpi	r24, 0x28	; 40
    1222:	11 f0       	breq	.+4      	; 0x1228 <EEPROM_writeByte+0x6a>
		return ERROR;
    1224:	1c 82       	std	Y+4, r1	; 0x04
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    1228:	0e 94 15 13 	call	0x262a	; 0x262a <TWI_stop>

	return SUCCESS;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	8c 83       	std	Y+4, r24	; 0x04
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <EEPROM_readByte+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <EEPROM_readByte+0x8>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	7c 83       	std	Y+4, r23	; 0x04
    1254:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1256:	0e 94 04 13 	call	0x2608	; 0x2608 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    125a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	11 f0       	breq	.+4      	; 0x1266 <EEPROM_readByte+0x26>
		return ERROR;
    1262:	1d 82       	std	Y+5, r1	; 0x05
    1264:	44 c0       	rjmp	.+136    	; 0x12ee <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	80 70       	andi	r24, 0x00	; 0
    126c:	97 70       	andi	r25, 0x07	; 7
    126e:	88 0f       	add	r24, r24
    1270:	89 2f       	mov	r24, r25
    1272:	88 1f       	adc	r24, r24
    1274:	99 0b       	sbc	r25, r25
    1276:	91 95       	neg	r25
    1278:	80 6a       	ori	r24, 0xA0	; 160
    127a:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    127e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    1282:	88 31       	cpi	r24, 0x18	; 24
    1284:	11 f0       	breq	.+4      	; 0x128a <EEPROM_readByte+0x4a>
		return ERROR;
    1286:	1d 82       	std	Y+5, r1	; 0x05
    1288:	32 c0       	rjmp	.+100    	; 0x12ee <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1290:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    1294:	88 32       	cpi	r24, 0x28	; 40
    1296:	11 f0       	breq	.+4      	; 0x129c <EEPROM_readByte+0x5c>
		return ERROR;
    1298:	1d 82       	std	Y+5, r1	; 0x05
    129a:	29 c0       	rjmp	.+82     	; 0x12ee <EEPROM_readByte+0xae>

	/* Send the Repeated Start Bit */
	TWI_start();
    129c:	0e 94 04 13 	call	0x2608	; 0x2608 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    12a0:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    12a4:	80 31       	cpi	r24, 0x10	; 16
    12a6:	11 f0       	breq	.+4      	; 0x12ac <EEPROM_readByte+0x6c>
		return ERROR;
    12a8:	1d 82       	std	Y+5, r1	; 0x05
    12aa:	21 c0       	rjmp	.+66     	; 0x12ee <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	80 70       	andi	r24, 0x00	; 0
    12b2:	97 70       	andi	r25, 0x07	; 7
    12b4:	88 0f       	add	r24, r24
    12b6:	89 2f       	mov	r24, r25
    12b8:	88 1f       	adc	r24, r24
    12ba:	99 0b       	sbc	r25, r25
    12bc:	91 95       	neg	r25
    12be:	81 6a       	ori	r24, 0xA1	; 161
    12c0:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12c4:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    12c8:	80 34       	cpi	r24, 0x40	; 64
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <EEPROM_readByte+0x90>
		return ERROR;
    12cc:	1d 82       	std	Y+5, r1	; 0x05
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <EEPROM_readByte+0xae>


	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    12d0:	0e 94 4c 13 	call	0x2698	; 0x2698 <TWI_readByteWithNACK>
    12d4:	eb 81       	ldd	r30, Y+3	; 0x03
    12d6:	fc 81       	ldd	r31, Y+4	; 0x04
    12d8:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12da:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TWI_getStatus>
    12de:	88 35       	cpi	r24, 0x58	; 88
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <EEPROM_readByte+0xa6>
		return ERROR;
    12e2:	1d 82       	std	Y+5, r1	; 0x05
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
    12e6:	0e 94 15 13 	call	0x262a	; 0x262a <TWI_stop>

	return SUCCESS;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <EEPROM_writeArray>:

void EEPROM_writeArray(uint16 startaddress,uint8 *array,uint8 a_arraysize)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	64 97       	sbiw	r28, 0x14	; 20
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	99 8b       	std	Y+17, r25	; 0x11
    1316:	88 8b       	std	Y+16, r24	; 0x10
    1318:	7b 8b       	std	Y+19, r23	; 0x13
    131a:	6a 8b       	std	Y+18, r22	; 0x12
    131c:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 i;
	for(i=0;i<a_arraysize;i++)
    131e:	1f 86       	std	Y+15, r1	; 0x0f
    1320:	8a c0       	rjmp	.+276    	; 0x1436 <EEPROM_writeArray+0x136>
	{
		EEPROM_writeByte((startaddress+i),array[i]);
    1322:	8f 85       	ldd	r24, Y+15	; 0x0f
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	88 89       	ldd	r24, Y+16	; 0x10
    132a:	99 89       	ldd	r25, Y+17	; 0x11
    132c:	a9 01       	movw	r20, r18
    132e:	48 0f       	add	r20, r24
    1330:	59 1f       	adc	r21, r25
    1332:	8f 85       	ldd	r24, Y+15	; 0x0f
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	8a 89       	ldd	r24, Y+18	; 0x12
    133a:	9b 89       	ldd	r25, Y+19	; 0x13
    133c:	fc 01       	movw	r30, r24
    133e:	e2 0f       	add	r30, r18
    1340:	f3 1f       	adc	r31, r19
    1342:	20 81       	ld	r18, Z
    1344:	ca 01       	movw	r24, r20
    1346:	62 2f       	mov	r22, r18
    1348:	0e 94 df 08 	call	0x11be	; 0x11be <EEPROM_writeByte>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a0 e2       	ldi	r26, 0x20	; 32
    1352:	b1 e4       	ldi	r27, 0x41	; 65
    1354:	8b 87       	std	Y+11, r24	; 0x0b
    1356:	9c 87       	std	Y+12, r25	; 0x0c
    1358:	ad 87       	std	Y+13, r26	; 0x0d
    135a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135c:	6b 85       	ldd	r22, Y+11	; 0x0b
    135e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1360:	8d 85       	ldd	r24, Y+13	; 0x0d
    1362:	9e 85       	ldd	r25, Y+14	; 0x0e
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	4a ef       	ldi	r20, 0xFA	; 250
    136a:	54 e4       	ldi	r21, 0x44	; 68
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	8f 83       	std	Y+7, r24	; 0x07
    1376:	98 87       	std	Y+8, r25	; 0x08
    1378:	a9 87       	std	Y+9, r26	; 0x09
    137a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	2c f4       	brge	.+10     	; 0x139e <EEPROM_writeArray+0x9e>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	8d 83       	std	Y+5, r24	; 0x05
    139c:	3f c0       	rjmp	.+126    	; 0x141c <EEPROM_writeArray+0x11c>
	else if (__tmp > 65535)
    139e:	6f 81       	ldd	r22, Y+7	; 0x07
    13a0:	78 85       	ldd	r23, Y+8	; 0x08
    13a2:	89 85       	ldd	r24, Y+9	; 0x09
    13a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	3f ef       	ldi	r19, 0xFF	; 255
    13aa:	4f e7       	ldi	r20, 0x7F	; 127
    13ac:	57 e4       	ldi	r21, 0x47	; 71
    13ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	4c f5       	brge	.+82     	; 0x1408 <EEPROM_writeArray+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e2       	ldi	r20, 0x20	; 32
    13c4:	51 e4       	ldi	r21, 0x41	; 65
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	0f c0       	rjmp	.+30     	; 0x13fe <EEPROM_writeArray+0xfe>
    13e0:	88 ec       	ldi	r24, 0xC8	; 200
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9c 83       	std	Y+4, r25	; 0x04
    13e6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <EEPROM_writeArray+0xec>
    13f0:	9c 83       	std	Y+4, r25	; 0x04
    13f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	9e 83       	std	Y+6, r25	; 0x06
    13fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	69 f7       	brne	.-38     	; 0x13e0 <EEPROM_writeArray+0xe0>
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <EEPROM_writeArray+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1408:	6f 81       	ldd	r22, Y+7	; 0x07
    140a:	78 85       	ldd	r23, Y+8	; 0x08
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <EEPROM_writeArray+0x128>
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_writeArray(uint16 startaddress,uint8 *array,uint8 a_arraysize)
{
	uint8 i;
	for(i=0;i<a_arraysize;i++)
    1430:	8f 85       	ldd	r24, Y+15	; 0x0f
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	8f 87       	std	Y+15, r24	; 0x0f
    1436:	9f 85       	ldd	r25, Y+15	; 0x0f
    1438:	8c 89       	ldd	r24, Y+20	; 0x14
    143a:	98 17       	cp	r25, r24
    143c:	08 f4       	brcc	.+2      	; 0x1440 <EEPROM_writeArray+0x140>
    143e:	71 cf       	rjmp	.-286    	; 0x1322 <EEPROM_writeArray+0x22>
	{
		EEPROM_writeByte((startaddress+i),array[i]);
		_delay_ms(10);
	}
}
    1440:	64 96       	adiw	r28, 0x14	; 20
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <EEPROM_readArray>:

void EEPROM_readArray(uint16 startaddress,uint8 *array,uint8 a_arraysize)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	64 97       	sbiw	r28, 0x14	; 20
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	99 8b       	std	Y+17, r25	; 0x11
    1468:	88 8b       	std	Y+16, r24	; 0x10
    146a:	7b 8b       	std	Y+19, r23	; 0x13
    146c:	6a 8b       	std	Y+18, r22	; 0x12
    146e:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 i;
	for(i=0;i<a_arraysize;i++)
    1470:	1f 86       	std	Y+15, r1	; 0x0f
    1472:	8d c0       	rjmp	.+282    	; 0x158e <EEPROM_readArray+0x13c>
	{
		EEPROM_readByte((startaddress+i),array[i]);
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	88 89       	ldd	r24, Y+16	; 0x10
    147c:	99 89       	ldd	r25, Y+17	; 0x11
    147e:	a9 01       	movw	r20, r18
    1480:	48 0f       	add	r20, r24
    1482:	59 1f       	adc	r21, r25
    1484:	8f 85       	ldd	r24, Y+15	; 0x0f
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	8a 89       	ldd	r24, Y+18	; 0x12
    148c:	9b 89       	ldd	r25, Y+19	; 0x13
    148e:	fc 01       	movw	r30, r24
    1490:	e2 0f       	add	r30, r18
    1492:	f3 1f       	adc	r31, r19
    1494:	80 81       	ld	r24, Z
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9c 01       	movw	r18, r24
    149c:	ca 01       	movw	r24, r20
    149e:	b9 01       	movw	r22, r18
    14a0:	0e 94 20 09 	call	0x1240	; 0x1240 <EEPROM_readByte>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e2       	ldi	r26, 0x20	; 32
    14aa:	b1 e4       	ldi	r27, 0x41	; 65
    14ac:	8b 87       	std	Y+11, r24	; 0x0b
    14ae:	9c 87       	std	Y+12, r25	; 0x0c
    14b0:	ad 87       	std	Y+13, r26	; 0x0d
    14b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a ef       	ldi	r20, 0xFA	; 250
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	98 87       	std	Y+8, r25	; 0x08
    14d0:	a9 87       	std	Y+9, r26	; 0x09
    14d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <EEPROM_readArray+0xa4>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <EEPROM_readArray+0x122>
	else if (__tmp > 65535)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <EEPROM_readArray+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <EEPROM_readArray+0x104>
    1538:	88 ec       	ldi	r24, 0xC8	; 200
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	8b 83       	std	Y+3, r24	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <EEPROM_readArray+0xf2>
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <EEPROM_readArray+0xe6>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <EEPROM_readArray+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <EEPROM_readArray+0x12e>
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_readArray(uint16 startaddress,uint8 *array,uint8 a_arraysize)
{
	uint8 i;
	for(i=0;i<a_arraysize;i++)
    1588:	8f 85       	ldd	r24, Y+15	; 0x0f
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	8f 87       	std	Y+15, r24	; 0x0f
    158e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1590:	8c 89       	ldd	r24, Y+20	; 0x14
    1592:	98 17       	cp	r25, r24
    1594:	08 f4       	brcc	.+2      	; 0x1598 <EEPROM_readArray+0x146>
    1596:	6e cf       	rjmp	.-292    	; 0x1474 <EEPROM_readArray+0x22>
	{
		EEPROM_readByte((startaddress+i),array[i]);
		_delay_ms(10);
	}
}
    1598:	64 96       	adiw	r28, 0x14	; 20
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <GPIO_setupPinDirection+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_setupPinDirection+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6a 83       	std	Y+2, r22	; 0x02
    15bc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <GPIO_setupPinDirection+0x1c>
    15c4:	d5 c0       	rjmp	.+426    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <GPIO_setupPinDirection+0x24>
    15cc:	d1 c0       	rjmp	.+418    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3d 83       	std	Y+5, r19	; 0x05
    15d6:	2c 83       	std	Y+4, r18	; 0x04
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	91 05       	cpc	r25, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <GPIO_setupPinDirection+0x3a>
    15e2:	43 c0       	rjmp	.+134    	; 0x166a <GPIO_setupPinDirection+0xc0>
    15e4:	2c 81       	ldd	r18, Y+4	; 0x04
    15e6:	3d 81       	ldd	r19, Y+5	; 0x05
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <GPIO_setupPinDirection+0x4e>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	71 f0       	breq	.+28     	; 0x1612 <GPIO_setupPinDirection+0x68>
    15f6:	bc c0       	rjmp	.+376    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
    15f8:	2c 81       	ldd	r18, Y+4	; 0x04
    15fa:	3d 81       	ldd	r19, Y+5	; 0x05
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <GPIO_setupPinDirection+0x5a>
    1602:	5f c0       	rjmp	.+190    	; 0x16c2 <GPIO_setupPinDirection+0x118>
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <GPIO_setupPinDirection+0x66>
    160e:	85 c0       	rjmp	.+266    	; 0x171a <GPIO_setupPinDirection+0x170>
    1610:	af c0       	rjmp	.+350    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	a1 f4       	brne	.+40     	; 0x1640 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(GPIO_DDRA_REG.Byte,pin_num);
    1618:	aa e3       	ldi	r26, 0x3A	; 58
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ea e3       	ldi	r30, 0x3A	; 58
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_setupPinDirection+0x8c>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_setupPinDirection+0x88>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	98 c0       	rjmp	.+304    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRA_REG.Byte,pin_num);
    1640:	aa e3       	ldi	r26, 0x3A	; 58
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ea e3       	ldi	r30, 0x3A	; 58
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <GPIO_setupPinDirection+0xb4>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <GPIO_setupPinDirection+0xb0>
    1662:	80 95       	com	r24
    1664:	84 23       	and	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	83 c0       	rjmp	.+262    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	a1 f4       	brne	.+40     	; 0x1698 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(GPIO_DDRB_REG.Byte,pin_num);
    1670:	a7 e3       	ldi	r26, 0x37	; 55
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e7 e3       	ldi	r30, 0x37	; 55
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <GPIO_setupPinDirection+0xe4>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <GPIO_setupPinDirection+0xe0>
    1692:	84 2b       	or	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	6c c0       	rjmp	.+216    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRB_REG.Byte,pin_num);
    1698:	a7 e3       	ldi	r26, 0x37	; 55
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e7 e3       	ldi	r30, 0x37	; 55
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <GPIO_setupPinDirection+0x10c>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <GPIO_setupPinDirection+0x108>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	57 c0       	rjmp	.+174    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	a1 f4       	brne	.+40     	; 0x16f0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(GPIO_DDRC_REG.Byte,pin_num);
    16c8:	a4 e3       	ldi	r26, 0x34	; 52
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e4 e3       	ldi	r30, 0x34	; 52
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <GPIO_setupPinDirection+0x13c>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <GPIO_setupPinDirection+0x138>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	40 c0       	rjmp	.+128    	; 0x1770 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRC_REG.Byte,pin_num);
    16f0:	a4 e3       	ldi	r26, 0x34	; 52
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e4 e3       	ldi	r30, 0x34	; 52
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <GPIO_setupPinDirection+0x164>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <GPIO_setupPinDirection+0x160>
    1712:	80 95       	com	r24
    1714:	84 23       	and	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	2b c0       	rjmp	.+86     	; 0x1770 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	a1 f4       	brne	.+40     	; 0x1748 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(GPIO_DDRD_REG.Byte,pin_num);
    1720:	a1 e3       	ldi	r26, 0x31	; 49
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e1 e3       	ldi	r30, 0x31	; 49
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GPIO_setupPinDirection+0x194>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <GPIO_setupPinDirection+0x190>
    1742:	84 2b       	or	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRD_REG.Byte,pin_num);
    1748:	a1 e3       	ldi	r26, 0x31	; 49
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e1 e3       	ldi	r30, 0x31	; 49
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <GPIO_setupPinDirection+0x1bc>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <GPIO_setupPinDirection+0x1b8>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <GPIO_writePin+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <GPIO_writePin+0x8>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	6a 83       	std	Y+2, r22	; 0x02
    1792:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	88 30       	cpi	r24, 0x08	; 8
    1798:	08 f0       	brcs	.+2      	; 0x179c <GPIO_writePin+0x1c>
    179a:	d5 c0       	rjmp	.+426    	; 0x1946 <GPIO_writePin+0x1c6>
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	84 30       	cpi	r24, 0x04	; 4
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <GPIO_writePin+0x24>
    17a2:	d1 c0       	rjmp	.+418    	; 0x1946 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3d 83       	std	Y+5, r19	; 0x05
    17ac:	2c 83       	std	Y+4, r18	; 0x04
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <GPIO_writePin+0x3a>
    17b8:	43 c0       	rjmp	.+134    	; 0x1840 <GPIO_writePin+0xc0>
    17ba:	2c 81       	ldd	r18, Y+4	; 0x04
    17bc:	3d 81       	ldd	r19, Y+5	; 0x05
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	2c f4       	brge	.+10     	; 0x17ce <GPIO_writePin+0x4e>
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	9d 81       	ldd	r25, Y+5	; 0x05
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	71 f0       	breq	.+28     	; 0x17e8 <GPIO_writePin+0x68>
    17cc:	bc c0       	rjmp	.+376    	; 0x1946 <GPIO_writePin+0x1c6>
    17ce:	2c 81       	ldd	r18, Y+4	; 0x04
    17d0:	3d 81       	ldd	r19, Y+5	; 0x05
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <GPIO_writePin+0x5a>
    17d8:	5f c0       	rjmp	.+190    	; 0x1898 <GPIO_writePin+0x118>
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <GPIO_writePin+0x66>
    17e4:	85 c0       	rjmp	.+266    	; 0x18f0 <GPIO_writePin+0x170>
    17e6:	af c0       	rjmp	.+350    	; 0x1946 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	a1 f4       	brne	.+40     	; 0x1816 <GPIO_writePin+0x96>
			{
				SET_BIT(GPIO_PORTA_REG.Byte,pin_num);
    17ee:	ab e3       	ldi	r26, 0x3B	; 59
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	eb e3       	ldi	r30, 0x3B	; 59
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_writePin+0x8c>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_writePin+0x88>
    1810:	84 2b       	or	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	98 c0       	rjmp	.+304    	; 0x1946 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTA_REG.Byte,pin_num);
    1816:	ab e3       	ldi	r26, 0x3B	; 59
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	eb e3       	ldi	r30, 0x3B	; 59
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <GPIO_writePin+0xb4>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <GPIO_writePin+0xb0>
    1838:	80 95       	com	r24
    183a:	84 23       	and	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	83 c0       	rjmp	.+262    	; 0x1946 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	a1 f4       	brne	.+40     	; 0x186e <GPIO_writePin+0xee>
			{
				SET_BIT(GPIO_PORTB_REG.Byte,pin_num);
    1846:	a8 e3       	ldi	r26, 0x38	; 56
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e8 e3       	ldi	r30, 0x38	; 56
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <GPIO_writePin+0xe4>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <GPIO_writePin+0xe0>
    1868:	84 2b       	or	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	6c c0       	rjmp	.+216    	; 0x1946 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTB_REG.Byte,pin_num);
    186e:	a8 e3       	ldi	r26, 0x38	; 56
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e8 e3       	ldi	r30, 0x38	; 56
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <GPIO_writePin+0x10c>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <GPIO_writePin+0x108>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	57 c0       	rjmp	.+174    	; 0x1946 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	a1 f4       	brne	.+40     	; 0x18c6 <GPIO_writePin+0x146>
			{
				SET_BIT(GPIO_PORTC_REG.Byte,pin_num);
    189e:	a5 e3       	ldi	r26, 0x35	; 53
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <GPIO_writePin+0x13c>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <GPIO_writePin+0x138>
    18c0:	84 2b       	or	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	40 c0       	rjmp	.+128    	; 0x1946 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTC_REG.Byte,pin_num);
    18c6:	a5 e3       	ldi	r26, 0x35	; 53
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e5 e3       	ldi	r30, 0x35	; 53
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <GPIO_writePin+0x164>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <GPIO_writePin+0x160>
    18e8:	80 95       	com	r24
    18ea:	84 23       	and	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	2b c0       	rjmp	.+86     	; 0x1946 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	a1 f4       	brne	.+40     	; 0x191e <GPIO_writePin+0x19e>
			{
				SET_BIT(GPIO_PORTD_REG.Byte,pin_num);
    18f6:	a2 e3       	ldi	r26, 0x32	; 50
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <GPIO_writePin+0x194>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <GPIO_writePin+0x190>
    1918:	84 2b       	or	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	14 c0       	rjmp	.+40     	; 0x1946 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTD_REG.Byte,pin_num);
    191e:	a2 e3       	ldi	r26, 0x32	; 50
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e2 e3       	ldi	r30, 0x32	; 50
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <GPIO_writePin+0x1bc>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <GPIO_writePin+0x1b8>
    1940:	80 95       	com	r24
    1942:	84 23       	and	r24, r20
    1944:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <GPIO_readPin+0x6>
    195c:	00 d0       	rcall	.+0      	; 0x195e <GPIO_readPin+0x8>
    195e:	0f 92       	push	r0
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	8a 83       	std	Y+2, r24	; 0x02
    1966:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1968:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	88 30       	cpi	r24, 0x08	; 8
    196e:	08 f0       	brcs	.+2      	; 0x1972 <GPIO_readPin+0x1c>
    1970:	84 c0       	rjmp	.+264    	; 0x1a7a <GPIO_readPin+0x124>
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	84 30       	cpi	r24, 0x04	; 4
    1976:	08 f0       	brcs	.+2      	; 0x197a <GPIO_readPin+0x24>
    1978:	80 c0       	rjmp	.+256    	; 0x1a7a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	3d 83       	std	Y+5, r19	; 0x05
    1982:	2c 83       	std	Y+4, r18	; 0x04
    1984:	4c 81       	ldd	r20, Y+4	; 0x04
    1986:	5d 81       	ldd	r21, Y+5	; 0x05
    1988:	41 30       	cpi	r20, 0x01	; 1
    198a:	51 05       	cpc	r21, r1
    198c:	79 f1       	breq	.+94     	; 0x19ec <GPIO_readPin+0x96>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	91 05       	cpc	r25, r1
    1996:	34 f4       	brge	.+12     	; 0x19a4 <GPIO_readPin+0x4e>
    1998:	2c 81       	ldd	r18, Y+4	; 0x04
    199a:	3d 81       	ldd	r19, Y+5	; 0x05
    199c:	21 15       	cp	r18, r1
    199e:	31 05       	cpc	r19, r1
    19a0:	69 f0       	breq	.+26     	; 0x19bc <GPIO_readPin+0x66>
    19a2:	6b c0       	rjmp	.+214    	; 0x1a7a <GPIO_readPin+0x124>
    19a4:	4c 81       	ldd	r20, Y+4	; 0x04
    19a6:	5d 81       	ldd	r21, Y+5	; 0x05
    19a8:	42 30       	cpi	r20, 0x02	; 2
    19aa:	51 05       	cpc	r21, r1
    19ac:	b9 f1       	breq	.+110    	; 0x1a1c <GPIO_readPin+0xc6>
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	83 30       	cpi	r24, 0x03	; 3
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <GPIO_readPin+0x64>
    19b8:	49 c0       	rjmp	.+146    	; 0x1a4c <GPIO_readPin+0xf6>
    19ba:	5f c0       	rjmp	.+190    	; 0x1a7a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(GPIO_PINA_REG.Byte,pin_num))
    19bc:	e9 e3       	ldi	r30, 0x39	; 57
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <GPIO_readPin+0x7e>
    19d0:	55 95       	asr	r21
    19d2:	47 95       	ror	r20
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <GPIO_readPin+0x7a>
    19d8:	ca 01       	movw	r24, r20
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	88 23       	and	r24, r24
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	49 c0       	rjmp	.+146    	; 0x1a7a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19e8:	19 82       	std	Y+1, r1	; 0x01
    19ea:	47 c0       	rjmp	.+142    	; 0x1a7a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(GPIO_PINB_REG.Byte,pin_num))
    19ec:	e6 e3       	ldi	r30, 0x36	; 54
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	88 2f       	mov	r24, r24
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a9 01       	movw	r20, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <GPIO_readPin+0xae>
    1a00:	55 95       	asr	r21
    1a02:	47 95       	ror	r20
    1a04:	8a 95       	dec	r24
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <GPIO_readPin+0xaa>
    1a08:	ca 01       	movw	r24, r20
    1a0a:	81 70       	andi	r24, 0x01	; 1
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	88 23       	and	r24, r24
    1a10:	19 f0       	breq	.+6      	; 0x1a18 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	31 c0       	rjmp	.+98     	; 0x1a7a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a18:	19 82       	std	Y+1, r1	; 0x01
    1a1a:	2f c0       	rjmp	.+94     	; 0x1a7a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(GPIO_PINC_REG.Byte,pin_num))
    1a1c:	e3 e3       	ldi	r30, 0x33	; 51
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a9 01       	movw	r20, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <GPIO_readPin+0xde>
    1a30:	55 95       	asr	r21
    1a32:	47 95       	ror	r20
    1a34:	8a 95       	dec	r24
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <GPIO_readPin+0xda>
    1a38:	ca 01       	movw	r24, r20
    1a3a:	81 70       	andi	r24, 0x01	; 1
    1a3c:	90 70       	andi	r25, 0x00	; 0
    1a3e:	88 23       	and	r24, r24
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	19 c0       	rjmp	.+50     	; 0x1a7a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a48:	19 82       	std	Y+1, r1	; 0x01
    1a4a:	17 c0       	rjmp	.+46     	; 0x1a7a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(GPIO_PIND_REG.Byte,pin_num))
    1a4c:	e0 e3       	ldi	r30, 0x30	; 48
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <GPIO_readPin+0x10e>
    1a60:	55 95       	asr	r21
    1a62:	47 95       	ror	r20
    1a64:	8a 95       	dec	r24
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <GPIO_readPin+0x10a>
    1a68:	ca 01       	movw	r24, r20
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	88 23       	and	r24, r24
    1a70:	19 f0       	breq	.+6      	; 0x1a78 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a78:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <GPIO_togglePin>:

void GPIO_togglePin(uint8 port_num, uint8 pin_num)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <GPIO_togglePin+0x6>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <GPIO_togglePin+0x8>
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <GPIO_togglePin+0x18>
    1aa2:	72 c0       	rjmp	.+228    	; 0x1b88 <GPIO_togglePin+0xfc>
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <GPIO_togglePin+0x20>
    1aaa:	6e c0       	rjmp	.+220    	; 0x1b88 <GPIO_togglePin+0xfc>
		/* Do Nothing */
	}
	else
	{
		/* toggle the pin value as required */
		switch(port_num)
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3c 83       	std	Y+4, r19	; 0x04
    1ab4:	2b 83       	std	Y+3, r18	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	49 f1       	breq	.+82     	; 0x1b12 <GPIO_togglePin+0x86>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <GPIO_togglePin+0x48>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	61 f0       	breq	.+24     	; 0x1aea <GPIO_togglePin+0x5e>
    1ad2:	5a c0       	rjmp	.+180    	; 0x1b88 <GPIO_togglePin+0xfc>
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	71 f1       	breq	.+92     	; 0x1b3a <GPIO_togglePin+0xae>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	e9 f1       	breq	.+122    	; 0x1b62 <GPIO_togglePin+0xd6>
    1ae8:	4f c0       	rjmp	.+158    	; 0x1b88 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(GPIO_PORTA_REG.Byte,pin_num);
    1aea:	ab e3       	ldi	r26, 0x3B	; 59
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e3       	ldi	r30, 0x3B	; 59
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_togglePin+0x7c>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_togglePin+0x78>
    1b0c:	84 27       	eor	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	3b c0       	rjmp	.+118    	; 0x1b88 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(GPIO_PORTB_REG.Byte,pin_num);
    1b12:	a8 e3       	ldi	r26, 0x38	; 56
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e8 e3       	ldi	r30, 0x38	; 56
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <GPIO_togglePin+0xa4>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <GPIO_togglePin+0xa0>
    1b34:	84 27       	eor	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	27 c0       	rjmp	.+78     	; 0x1b88 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(GPIO_PORTC_REG.Byte,pin_num);
    1b3a:	a5 e3       	ldi	r26, 0x35	; 53
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e5 e3       	ldi	r30, 0x35	; 53
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_togglePin+0xcc>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_togglePin+0xc8>
    1b5c:	84 27       	eor	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	13 c0       	rjmp	.+38     	; 0x1b88 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(GPIO_PORTD_REG.Byte,pin_num);
    1b62:	a2 e3       	ldi	r26, 0x32	; 50
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e2 e3       	ldi	r30, 0x32	; 50
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GPIO_togglePin+0xf4>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <GPIO_togglePin+0xf0>
    1b84:	84 27       	eor	r24, r20
    1b86:	8c 93       	st	X, r24
			break;
		}
	}
}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <GPIO_setupPortDirection+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <GPIO_setupPortDirection+0x8>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	84 30       	cpi	r24, 0x04	; 4
    1baa:	90 f5       	brcc	.+100    	; 0x1c10 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	3c 83       	std	Y+4, r19	; 0x04
    1bb4:	2b 83       	std	Y+3, r18	; 0x03
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	d1 f0       	breq	.+52     	; 0x1bf4 <GPIO_setupPortDirection+0x5e>
    1bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc4:	22 30       	cpi	r18, 0x02	; 2
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	2c f4       	brge	.+10     	; 0x1bd4 <GPIO_setupPortDirection+0x3e>
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	61 f0       	breq	.+24     	; 0x1bea <GPIO_setupPortDirection+0x54>
    1bd2:	1e c0       	rjmp	.+60     	; 0x1c10 <GPIO_setupPortDirection+0x7a>
    1bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd8:	22 30       	cpi	r18, 0x02	; 2
    1bda:	31 05       	cpc	r19, r1
    1bdc:	81 f0       	breq	.+32     	; 0x1bfe <GPIO_setupPortDirection+0x68>
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	83 30       	cpi	r24, 0x03	; 3
    1be4:	91 05       	cpc	r25, r1
    1be6:	81 f0       	breq	.+32     	; 0x1c08 <GPIO_setupPortDirection+0x72>
    1be8:	13 c0       	rjmp	.+38     	; 0x1c10 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			GPIO_DDRA_REG.Byte=direction;
    1bea:	ea e3       	ldi	r30, 0x3A	; 58
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	80 83       	st	Z, r24
    1bf2:	0e c0       	rjmp	.+28     	; 0x1c10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			GPIO_DDRB_REG.Byte=direction;
    1bf4:	e7 e3       	ldi	r30, 0x37	; 55
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	80 83       	st	Z, r24
    1bfc:	09 c0       	rjmp	.+18     	; 0x1c10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			GPIO_DDRC_REG.Byte=direction;
    1bfe:	e4 e3       	ldi	r30, 0x34	; 52
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	80 83       	st	Z, r24
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			GPIO_DDRD_REG.Byte=direction;
    1c08:	e1 e3       	ldi	r30, 0x31	; 49
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <GPIO_writePort+0x6>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <GPIO_writePort+0x8>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	84 30       	cpi	r24, 0x04	; 4
    1c32:	90 f5       	brcc	.+100    	; 0x1c98 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3c 83       	std	Y+4, r19	; 0x04
    1c3c:	2b 83       	std	Y+3, r18	; 0x03
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	91 05       	cpc	r25, r1
    1c46:	d1 f0       	breq	.+52     	; 0x1c7c <GPIO_writePort+0x5e>
    1c48:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4c:	22 30       	cpi	r18, 0x02	; 2
    1c4e:	31 05       	cpc	r19, r1
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <GPIO_writePort+0x3e>
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <GPIO_writePort+0x54>
    1c5a:	1e c0       	rjmp	.+60     	; 0x1c98 <GPIO_writePort+0x7a>
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	81 f0       	breq	.+32     	; 0x1c86 <GPIO_writePort+0x68>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	81 f0       	breq	.+32     	; 0x1c90 <GPIO_writePort+0x72>
    1c70:	13 c0       	rjmp	.+38     	; 0x1c98 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			GPIO_PORTA_REG.Byte = value;
    1c72:	eb e3       	ldi	r30, 0x3B	; 59
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	80 83       	st	Z, r24
    1c7a:	0e c0       	rjmp	.+28     	; 0x1c98 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			GPIO_PORTB_REG.Byte = value;
    1c7c:	e8 e3       	ldi	r30, 0x38	; 56
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	80 83       	st	Z, r24
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			GPIO_PORTC_REG.Byte = value;
    1c86:	e5 e3       	ldi	r30, 0x35	; 53
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	80 83       	st	Z, r24
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			GPIO_PORTD_REG.Byte = value;
    1c90:	e2 e3       	ldi	r30, 0x32	; 50
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <GPIO_readPort+0x6>
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <GPIO_readPort+0x8>
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1cb4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	90 f5       	brcc	.+100    	; 0x1d20 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	3c 83       	std	Y+4, r19	; 0x04
    1cc4:	2b 83       	std	Y+3, r18	; 0x03
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	91 05       	cpc	r25, r1
    1cce:	d1 f0       	breq	.+52     	; 0x1d04 <GPIO_readPort+0x5e>
    1cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd4:	22 30       	cpi	r18, 0x02	; 2
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <GPIO_readPort+0x3e>
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	61 f0       	breq	.+24     	; 0x1cfa <GPIO_readPort+0x54>
    1ce2:	1e c0       	rjmp	.+60     	; 0x1d20 <GPIO_readPort+0x7a>
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	81 f0       	breq	.+32     	; 0x1d0e <GPIO_readPort+0x68>
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <GPIO_readPort+0x72>
    1cf8:	13 c0       	rjmp	.+38     	; 0x1d20 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = GPIO_PINA_REG.Byte;
    1cfa:	e9 e3       	ldi	r30, 0x39	; 57
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	0e c0       	rjmp	.+28     	; 0x1d20 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = GPIO_PINB_REG.Byte;
    1d04:	e6 e3       	ldi	r30, 0x36	; 54
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	09 c0       	rjmp	.+18     	; 0x1d20 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = GPIO_PINC_REG.Byte;
    1d0e:	e3 e3       	ldi	r30, 0x33	; 51
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = GPIO_PIND_REG.Byte;
    1d18:	e0 e3       	ldi	r30, 0x30	; 48
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <PIR_init>:
 ================================================================================================================================
 */
#include "pir.h"

void PIR_init()
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT_ID, PIR_PIN_ID, PIN_INPUT);
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	62 e0       	ldi	r22, 0x02	; 2
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_setupPinDirection>
}
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <PIR_Motion>:

uint8 PIR_Motion(void)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	0f 92       	push	r0
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	uint8 motion ;
	motion=GPIO_readPin(PIR_PORT_ID, PIR_PIN_ID);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	62 e0       	ldi	r22, 0x02	; 2
    1d56:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GPIO_readPin>
    1d5a:	89 83       	std	Y+1, r24	; 0x01

	/*if their is a motion we will return MOTION_DETECTED else we will return NO_MOTION_DETECTED */
	return motion;
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <PWM_init>:
/*******************************************************************************
 *                         FUNCTIONS definition	                               *
 *******************************************************************************/

void PWM_init(const PWM_config *Config_Ptr)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <PWM_init+0x6>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->num == PWM0)
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	80 81       	ld	r24, Z
    1d7a:	88 23       	and	r24, r24
    1d7c:	61 f5       	brne	.+88     	; 0x1dd6 <PWM_init+0x70>
	{
		/*Clear FOC0 bit in case using pwm mode FOC0=0 IN TCCR0*/
		TIMER0_TCCR0_REG.Bits.FOC0_Bit=0;
    1d7e:	e3 e5       	ldi	r30, 0x53	; 83
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 77       	andi	r24, 0x7F	; 127
    1d86:	80 83       	st	Z, r24

		/*Choose Fast Pwm Mode via set WGM00=1 AND WGM01=1 IN TCCR0*/
		TIMER0_TCCR0_REG.Bits.WGM00_Bit=1;
    1d88:	e3 e5       	ldi	r30, 0x53	; 83
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 64       	ori	r24, 0x40	; 64
    1d90:	80 83       	st	Z, r24
		TIMER0_TCCR0_REG.Bits.WGM01_Bit=1;
    1d92:	e3 e5       	ldi	r30, 0x53	; 83
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	88 60       	ori	r24, 0x08	; 8
    1d9a:	80 83       	st	Z, r24

		/*choose the mode inverting or non inverting*/
		TIMER0_TCCR0_REG.Byte|=(Config_Ptr->mode);
    1d9c:	a3 e5       	ldi	r26, 0x53	; 83
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e3 e5       	ldi	r30, 0x53	; 83
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	90 81       	ld	r25, Z
    1da6:	e9 81       	ldd	r30, Y+1	; 0x01
    1da8:	fa 81       	ldd	r31, Y+2	; 0x02
    1daa:	81 81       	ldd	r24, Z+1	; 0x01
    1dac:	89 2b       	or	r24, r25
    1dae:	8c 93       	st	X, r24

		/*choose prescale*/
		TIMER0_TCCR0_REG.Byte|=(Config_Ptr->prescaleTimer);
    1db0:	a3 e5       	ldi	r26, 0x53	; 83
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e3 e5       	ldi	r30, 0x53	; 83
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	90 81       	ld	r25, Z
    1dba:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	89 2b       	or	r24, r25
    1dc2:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	63 e0       	ldi	r22, 0x03	; 3
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_setupPinDirection>

		/*Just Initially*/
		TIMER0_OCR0_REG.Byte=0;
    1dce:	ec e5       	ldi	r30, 0x5C	; 92
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	10 82       	st	Z, r1
    1dd4:	30 c0       	rjmp	.+96     	; 0x1e36 <PWM_init+0xd0>

	}

	else if(Config_Ptr->num == PWM2)
    1dd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dda:	80 81       	ld	r24, Z
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	59 f5       	brne	.+86     	; 0x1e36 <PWM_init+0xd0>
	{
		/*Clear FOC2 bit in case using pwm mode FOC2=0 IN TCCR2*/
		TIMER2_TCCR2_REG.Bits.FOC2_Bit=0;
    1de0:	e5 e4       	ldi	r30, 0x45	; 69
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8f 77       	andi	r24, 0x7F	; 127
    1de8:	80 83       	st	Z, r24

		/*Choose Fast Pwm Mode via set WGM20=1 AND WGM21=1 IN TCCR2*/
		TIMER2_TCCR2_REG.Bits.WGM20_Bit=1;
    1dea:	e5 e4       	ldi	r30, 0x45	; 69
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 64       	ori	r24, 0x40	; 64
    1df2:	80 83       	st	Z, r24
		TIMER2_TCCR2_REG.Bits.WGM21_Bit=1;
    1df4:	e5 e4       	ldi	r30, 0x45	; 69
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 60       	ori	r24, 0x08	; 8
    1dfc:	80 83       	st	Z, r24

		/*choose the mode inverting or non inverting*/
		TIMER2_TCCR2_REG.Byte|=(Config_Ptr->mode);
    1dfe:	a5 e4       	ldi	r26, 0x45	; 69
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e5 e4       	ldi	r30, 0x45	; 69
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	90 81       	ld	r25, Z
    1e08:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0c:	81 81       	ldd	r24, Z+1	; 0x01
    1e0e:	89 2b       	or	r24, r25
    1e10:	8c 93       	st	X, r24

		/*choose prescale*/
		TIMER2_TCCR2_REG.Byte|=(Config_Ptr->prescaleTimer);
    1e12:	a5 e4       	ldi	r26, 0x45	; 69
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e5 e4       	ldi	r30, 0x45	; 69
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	90 81       	ld	r25, Z
    1e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	89 2b       	or	r24, r25
    1e24:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	67 e0       	ldi	r22, 0x07	; 7
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_setupPinDirection>

		/*Just Initially*/
		TIMER2_OCR2_REG.Byte=0;
    1e30:	e3 e4       	ldi	r30, 0x43	; 67
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	10 82       	st	Z, r1

	}
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <PWM_setDutyCycle>:

void PWM_setDutyCycle(Pwm_Number a_pwmNum,uint8 a_duty)
{
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <PWM_setDutyCycle+0xa>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	6a 83       	std	Y+2, r22	; 0x02
	if(a_pwmNum == PWM0)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	88 23       	and	r24, r24
    1e56:	21 f5       	brne	.+72     	; 0x1ea0 <PWM_setDutyCycle+0x60>
	{
		TIMER0_OCR0_REG.Byte=((uint32)(a_duty* 255) / 100);
    1e58:	0c e5       	ldi	r16, 0x5C	; 92
    1e5a:	10 e0       	ldi	r17, 0x00	; 0
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	48 2f       	mov	r20, r24
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	ca 01       	movw	r24, r20
    1e64:	9c 01       	movw	r18, r24
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    1e6a:	c9 01       	movw	r24, r18
    1e6c:	96 95       	lsr	r25
    1e6e:	98 2f       	mov	r25, r24
    1e70:	88 27       	eor	r24, r24
    1e72:	97 95       	ror	r25
    1e74:	87 95       	ror	r24
    1e76:	82 1b       	sub	r24, r18
    1e78:	93 0b       	sbc	r25, r19
    1e7a:	84 0f       	add	r24, r20
    1e7c:	95 1f       	adc	r25, r21
    1e7e:	aa 27       	eor	r26, r26
    1e80:	97 fd       	sbrc	r25, 7
    1e82:	a0 95       	com	r26
    1e84:	ba 2f       	mov	r27, r26
    1e86:	24 e6       	ldi	r18, 0x64	; 100
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 89 14 	call	0x2912	; 0x2912 <__udivmodsi4>
    1e96:	da 01       	movw	r26, r20
    1e98:	c9 01       	movw	r24, r18
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 83       	st	Z, r24
    1e9e:	26 c0       	rjmp	.+76     	; 0x1eec <PWM_setDutyCycle+0xac>
	}

	else if(a_pwmNum == PWM2)
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	19 f5       	brne	.+70     	; 0x1eec <PWM_setDutyCycle+0xac>
	{
		TIMER2_OCR2_REG.Byte=((uint32)(a_duty* 255) / 100);
    1ea6:	03 e4       	ldi	r16, 0x43	; 67
    1ea8:	10 e0       	ldi	r17, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	48 2f       	mov	r20, r24
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	9c 01       	movw	r18, r24
    1eb4:	22 0f       	add	r18, r18
    1eb6:	33 1f       	adc	r19, r19
    1eb8:	c9 01       	movw	r24, r18
    1eba:	96 95       	lsr	r25
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	88 27       	eor	r24, r24
    1ec0:	97 95       	ror	r25
    1ec2:	87 95       	ror	r24
    1ec4:	82 1b       	sub	r24, r18
    1ec6:	93 0b       	sbc	r25, r19
    1ec8:	84 0f       	add	r24, r20
    1eca:	95 1f       	adc	r25, r21
    1ecc:	aa 27       	eor	r26, r26
    1ece:	97 fd       	sbrc	r25, 7
    1ed0:	a0 95       	com	r26
    1ed2:	ba 2f       	mov	r27, r26
    1ed4:	24 e6       	ldi	r18, 0x64	; 100
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 89 14 	call	0x2912	; 0x2912 <__udivmodsi4>
    1ee4:	da 01       	movw	r26, r20
    1ee6:	c9 01       	movw	r24, r18
    1ee8:	f8 01       	movw	r30, r16
    1eea:	80 83       	st	Z, r24
	}
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	08 95       	ret

00001efa <__vector_11>:

/***************************** TIMER0 **********************************/

/*interrupt service routine for timer0 OverFlow*/
ISR(TIMER0_OVF_vect)
{
    1efa:	1f 92       	push	r1
    1efc:	0f 92       	push	r0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	0f 92       	push	r0
    1f02:	11 24       	eor	r1, r1
    1f04:	2f 93       	push	r18
    1f06:	3f 93       	push	r19
    1f08:	4f 93       	push	r20
    1f0a:	5f 93       	push	r21
    1f0c:	6f 93       	push	r22
    1f0e:	7f 93       	push	r23
    1f10:	8f 93       	push	r24
    1f12:	9f 93       	push	r25
    1f14:	af 93       	push	r26
    1f16:	bf 93       	push	r27
    1f18:	ef 93       	push	r30
    1f1a:	ff 93       	push	r31
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[0] != NULL_PTR)
    1f24:	80 91 88 00 	lds	r24, 0x0088
    1f28:	90 91 89 00 	lds	r25, 0x0089
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	29 f0       	breq	.+10     	; 0x1f3a <__vector_11+0x40>
	{
		g_Timers_callBackPtr[0]();
    1f30:	e0 91 88 00 	lds	r30, 0x0088
    1f34:	f0 91 89 00 	lds	r31, 0x0089
    1f38:	09 95       	icall
	}
}
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	ff 91       	pop	r31
    1f40:	ef 91       	pop	r30
    1f42:	bf 91       	pop	r27
    1f44:	af 91       	pop	r26
    1f46:	9f 91       	pop	r25
    1f48:	8f 91       	pop	r24
    1f4a:	7f 91       	pop	r23
    1f4c:	6f 91       	pop	r22
    1f4e:	5f 91       	pop	r21
    1f50:	4f 91       	pop	r20
    1f52:	3f 91       	pop	r19
    1f54:	2f 91       	pop	r18
    1f56:	0f 90       	pop	r0
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	0f 90       	pop	r0
    1f5c:	1f 90       	pop	r1
    1f5e:	18 95       	reti

00001f60 <__vector_10>:
/*interrupt service routine for timer0 CTC*/
ISR(TIMER0_COMP_vect)
{
    1f60:	1f 92       	push	r1
    1f62:	0f 92       	push	r0
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	0f 92       	push	r0
    1f68:	11 24       	eor	r1, r1
    1f6a:	2f 93       	push	r18
    1f6c:	3f 93       	push	r19
    1f6e:	4f 93       	push	r20
    1f70:	5f 93       	push	r21
    1f72:	6f 93       	push	r22
    1f74:	7f 93       	push	r23
    1f76:	8f 93       	push	r24
    1f78:	9f 93       	push	r25
    1f7a:	af 93       	push	r26
    1f7c:	bf 93       	push	r27
    1f7e:	ef 93       	push	r30
    1f80:	ff 93       	push	r31
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[0] != NULL_PTR)
    1f8a:	80 91 88 00 	lds	r24, 0x0088
    1f8e:	90 91 89 00 	lds	r25, 0x0089
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	29 f0       	breq	.+10     	; 0x1fa0 <__vector_10+0x40>
	{
		g_Timers_callBackPtr[0]();
    1f96:	e0 91 88 00 	lds	r30, 0x0088
    1f9a:	f0 91 89 00 	lds	r31, 0x0089
    1f9e:	09 95       	icall
	}
}
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	ff 91       	pop	r31
    1fa6:	ef 91       	pop	r30
    1fa8:	bf 91       	pop	r27
    1faa:	af 91       	pop	r26
    1fac:	9f 91       	pop	r25
    1fae:	8f 91       	pop	r24
    1fb0:	7f 91       	pop	r23
    1fb2:	6f 91       	pop	r22
    1fb4:	5f 91       	pop	r21
    1fb6:	4f 91       	pop	r20
    1fb8:	3f 91       	pop	r19
    1fba:	2f 91       	pop	r18
    1fbc:	0f 90       	pop	r0
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	0f 90       	pop	r0
    1fc2:	1f 90       	pop	r1
    1fc4:	18 95       	reti

00001fc6 <__vector_9>:

/*************************** TIMER1 *******************************/

/*interrupt service routine for timer1 Overflow*/
ISR(TIMER1_OVF_vect)
{
    1fc6:	1f 92       	push	r1
    1fc8:	0f 92       	push	r0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	0f 92       	push	r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	2f 93       	push	r18
    1fd2:	3f 93       	push	r19
    1fd4:	4f 93       	push	r20
    1fd6:	5f 93       	push	r21
    1fd8:	6f 93       	push	r22
    1fda:	7f 93       	push	r23
    1fdc:	8f 93       	push	r24
    1fde:	9f 93       	push	r25
    1fe0:	af 93       	push	r26
    1fe2:	bf 93       	push	r27
    1fe4:	ef 93       	push	r30
    1fe6:	ff 93       	push	r31
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[1] != NULL_PTR)
    1ff0:	80 91 8a 00 	lds	r24, 0x008A
    1ff4:	90 91 8b 00 	lds	r25, 0x008B
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	29 f0       	breq	.+10     	; 0x2006 <__vector_9+0x40>
	{
		g_Timers_callBackPtr[1]();
    1ffc:	e0 91 8a 00 	lds	r30, 0x008A
    2000:	f0 91 8b 00 	lds	r31, 0x008B
    2004:	09 95       	icall
	}
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	ff 91       	pop	r31
    200c:	ef 91       	pop	r30
    200e:	bf 91       	pop	r27
    2010:	af 91       	pop	r26
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	7f 91       	pop	r23
    2018:	6f 91       	pop	r22
    201a:	5f 91       	pop	r21
    201c:	4f 91       	pop	r20
    201e:	3f 91       	pop	r19
    2020:	2f 91       	pop	r18
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	0f 90       	pop	r0
    2028:	1f 90       	pop	r1
    202a:	18 95       	reti

0000202c <__vector_7>:

/*interrupt service routine for timer1 CTC*/
ISR(TIMER1_COMPA_vect)
{
    202c:	1f 92       	push	r1
    202e:	0f 92       	push	r0
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	0f 92       	push	r0
    2034:	11 24       	eor	r1, r1
    2036:	2f 93       	push	r18
    2038:	3f 93       	push	r19
    203a:	4f 93       	push	r20
    203c:	5f 93       	push	r21
    203e:	6f 93       	push	r22
    2040:	7f 93       	push	r23
    2042:	8f 93       	push	r24
    2044:	9f 93       	push	r25
    2046:	af 93       	push	r26
    2048:	bf 93       	push	r27
    204a:	ef 93       	push	r30
    204c:	ff 93       	push	r31
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[1] != NULL_PTR)
    2056:	80 91 8a 00 	lds	r24, 0x008A
    205a:	90 91 8b 00 	lds	r25, 0x008B
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	29 f0       	breq	.+10     	; 0x206c <__vector_7+0x40>
	{
		g_Timers_callBackPtr[1]();
    2062:	e0 91 8a 00 	lds	r30, 0x008A
    2066:	f0 91 8b 00 	lds	r31, 0x008B
    206a:	09 95       	icall
	}
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	ff 91       	pop	r31
    2072:	ef 91       	pop	r30
    2074:	bf 91       	pop	r27
    2076:	af 91       	pop	r26
    2078:	9f 91       	pop	r25
    207a:	8f 91       	pop	r24
    207c:	7f 91       	pop	r23
    207e:	6f 91       	pop	r22
    2080:	5f 91       	pop	r21
    2082:	4f 91       	pop	r20
    2084:	3f 91       	pop	r19
    2086:	2f 91       	pop	r18
    2088:	0f 90       	pop	r0
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	0f 90       	pop	r0
    208e:	1f 90       	pop	r1
    2090:	18 95       	reti

00002092 <__vector_5>:

/************************** TIMER2 **************************/

/*interrupt service routine for timer2 Overflow*/
ISR(TIMER2_OVF_vect)
{
    2092:	1f 92       	push	r1
    2094:	0f 92       	push	r0
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	0f 92       	push	r0
    209a:	11 24       	eor	r1, r1
    209c:	2f 93       	push	r18
    209e:	3f 93       	push	r19
    20a0:	4f 93       	push	r20
    20a2:	5f 93       	push	r21
    20a4:	6f 93       	push	r22
    20a6:	7f 93       	push	r23
    20a8:	8f 93       	push	r24
    20aa:	9f 93       	push	r25
    20ac:	af 93       	push	r26
    20ae:	bf 93       	push	r27
    20b0:	ef 93       	push	r30
    20b2:	ff 93       	push	r31
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[2] != NULL_PTR)
    20bc:	80 91 8c 00 	lds	r24, 0x008C
    20c0:	90 91 8d 00 	lds	r25, 0x008D
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	29 f0       	breq	.+10     	; 0x20d2 <__vector_5+0x40>
	{
		g_Timers_callBackPtr[2]();
    20c8:	e0 91 8c 00 	lds	r30, 0x008C
    20cc:	f0 91 8d 00 	lds	r31, 0x008D
    20d0:	09 95       	icall
	}
}
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	ff 91       	pop	r31
    20d8:	ef 91       	pop	r30
    20da:	bf 91       	pop	r27
    20dc:	af 91       	pop	r26
    20de:	9f 91       	pop	r25
    20e0:	8f 91       	pop	r24
    20e2:	7f 91       	pop	r23
    20e4:	6f 91       	pop	r22
    20e6:	5f 91       	pop	r21
    20e8:	4f 91       	pop	r20
    20ea:	3f 91       	pop	r19
    20ec:	2f 91       	pop	r18
    20ee:	0f 90       	pop	r0
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	0f 90       	pop	r0
    20f4:	1f 90       	pop	r1
    20f6:	18 95       	reti

000020f8 <__vector_4>:

/*interrupt service routine for timer2 CTC*/
ISR(TIMER2_COMP_vect)
{
    20f8:	1f 92       	push	r1
    20fa:	0f 92       	push	r0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	0f 92       	push	r0
    2100:	11 24       	eor	r1, r1
    2102:	2f 93       	push	r18
    2104:	3f 93       	push	r19
    2106:	4f 93       	push	r20
    2108:	5f 93       	push	r21
    210a:	6f 93       	push	r22
    210c:	7f 93       	push	r23
    210e:	8f 93       	push	r24
    2110:	9f 93       	push	r25
    2112:	af 93       	push	r26
    2114:	bf 93       	push	r27
    2116:	ef 93       	push	r30
    2118:	ff 93       	push	r31
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[2] != NULL_PTR)
    2122:	80 91 8c 00 	lds	r24, 0x008C
    2126:	90 91 8d 00 	lds	r25, 0x008D
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	29 f0       	breq	.+10     	; 0x2138 <__vector_4+0x40>
	{
		g_Timers_callBackPtr[2]();
    212e:	e0 91 8c 00 	lds	r30, 0x008C
    2132:	f0 91 8d 00 	lds	r31, 0x008D
    2136:	09 95       	icall
	}
}
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	ff 91       	pop	r31
    213e:	ef 91       	pop	r30
    2140:	bf 91       	pop	r27
    2142:	af 91       	pop	r26
    2144:	9f 91       	pop	r25
    2146:	8f 91       	pop	r24
    2148:	7f 91       	pop	r23
    214a:	6f 91       	pop	r22
    214c:	5f 91       	pop	r21
    214e:	4f 91       	pop	r20
    2150:	3f 91       	pop	r19
    2152:	2f 91       	pop	r18
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <Timer_setCallBack>:
/*
 * Description :
 * A function to set Call back for timers
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	00 d0       	rcall	.+0      	; 0x2164 <Timer_setCallBack+0x6>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <Timer_setCallBack+0x8>
    2166:	0f 92       	push	r0
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	6b 83       	std	Y+3, r22	; 0x03

	switch(a_timer_ID)
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	3d 83       	std	Y+5, r19	; 0x05
    217a:	2c 83       	std	Y+4, r18	; 0x04
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	9d 81       	ldd	r25, Y+5	; 0x05
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	81 f0       	breq	.+32     	; 0x21a6 <Timer_setCallBack+0x48>
    2186:	2c 81       	ldd	r18, Y+4	; 0x04
    2188:	3d 81       	ldd	r19, Y+5	; 0x05
    218a:	22 30       	cpi	r18, 0x02	; 2
    218c:	31 05       	cpc	r19, r1
    218e:	91 f0       	breq	.+36     	; 0x21b4 <Timer_setCallBack+0x56>
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	a1 f4       	brne	.+40     	; 0x21c0 <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer0 */
		g_Timers_callBackPtr[0]= a_ptr;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	90 93 89 00 	sts	0x0089, r25
    21a0:	80 93 88 00 	sts	0x0088, r24
    21a4:	0d c0       	rjmp	.+26     	; 0x21c0 <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer1 */
		g_Timers_callBackPtr[1] = a_ptr;
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	90 93 8b 00 	sts	0x008B, r25
    21ae:	80 93 8a 00 	sts	0x008A, r24
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer2 */
		g_Timers_callBackPtr[2] = a_ptr;
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	90 93 8d 00 	sts	0x008D, r25
    21bc:	80 93 8c 00 	sts	0x008C, r24
		break;
	}

}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <Timer_init>:
/*
 * Description :
 * A function to initialize the timers
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	2a 97       	sbiw	r28, 0x0a	; 10
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    21e8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ea:	fa 81       	ldd	r31, Y+2	; 0x02
    21ec:	84 81       	ldd	r24, Z+4	; 0x04
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	3a 87       	std	Y+10, r19	; 0x0a
    21f4:	29 87       	std	Y+9, r18	; 0x09
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <Timer_init+0x32>
    2200:	7d c0       	rjmp	.+250    	; 0x22fc <Timer_init+0x12c>
    2202:	29 85       	ldd	r18, Y+9	; 0x09
    2204:	3a 85       	ldd	r19, Y+10	; 0x0a
    2206:	22 30       	cpi	r18, 0x02	; 2
    2208:	31 05       	cpc	r19, r1
    220a:	09 f4       	brne	.+2      	; 0x220e <Timer_init+0x3e>
    220c:	fd c0       	rjmp	.+506    	; 0x2408 <Timer_init+0x238>
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	09 f0       	breq	.+2      	; 0x2218 <Timer_init+0x48>
    2216:	69 c1       	rjmp	.+722    	; 0x24ea <Timer_init+0x31a>
	{

	case Timer0:
		/*Clear registers of Timer0 And Interrupts Modules Enable before any access to prevent any mistakes
		 * on changing the mode of same timer as you might forget to use deinit() before init() one more*/
		TIMER0_TCCR0_REG.Byte=0;
    2218:	e3 e5       	ldi	r30, 0x53	; 83
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	10 82       	st	Z, r1
		TIMER0_TCNT0_REG.Byte=0;
    221e:	e2 e5       	ldi	r30, 0x52	; 82
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	10 82       	st	Z, r1
		TIMER0_OCR0_REG.Byte=0;
    2224:	ec e5       	ldi	r30, 0x5C	; 92
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer0 (OCIE0=0,TOIE0=0)*/
		TIMER_TIMSK_REG.Bits.OCIE0_Bit=0;
    222a:	e9 e5       	ldi	r30, 0x59	; 89
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8d 7f       	andi	r24, 0xFD	; 253
    2232:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE0_Bit=0;
    2234:	e9 e5       	ldi	r30, 0x59	; 89
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8e 7f       	andi	r24, 0xFE	; 254
    223c:	80 83       	st	Z, r24


		/*Set Intial Value*/
		TIMER0_TCNT0_REG.Byte=((Config_Ptr->timer_InitialValue))&0x00FF;
    223e:	a2 e5       	ldi	r26, 0x52	; 82
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	8c 93       	st	X, r24
		/*
		 * TIMER Prescaler value for Timer0 in TCCR0 Register
		 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
		 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
		 */
		TIMER0_TCCR0_REG.Byte=((TIMER0_TCCR0_REG.Byte&0xF8)|(Config_Ptr->timer_clock));
    224c:	a3 e5       	ldi	r26, 0x53	; 83
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e3 e5       	ldi	r30, 0x53	; 83
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	98 2f       	mov	r25, r24
    2258:	98 7f       	andi	r25, 0xF8	; 248
    225a:	e9 81       	ldd	r30, Y+1	; 0x01
    225c:	fa 81       	ldd	r31, Y+2	; 0x02
    225e:	85 81       	ldd	r24, Z+5	; 0x05
    2260:	89 2b       	or	r24, r25
    2262:	8c 93       	st	X, r24
		 * Compare output mode:
		 * 		OC0 disconnected
		 *      Clear COM00 bit in TCCR0 register
		 *      Clear COM01 bit in TCCR0 register
		 */
		TIMER0_TCCR0_REG.Bits.COM00_Bit=0;
    2264:	e3 e5       	ldi	r30, 0x53	; 83
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	8f 7e       	andi	r24, 0xEF	; 239
    226c:	80 83       	st	Z, r24
		TIMER0_TCCR0_REG.Bits.COM01_Bit=0;
    226e:	e3 e5       	ldi	r30, 0x53	; 83
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	8f 7d       	andi	r24, 0xDF	; 223
    2276:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	86 81       	ldd	r24, Z+6	; 0x06
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	38 87       	std	Y+8, r19	; 0x08
    2284:	2f 83       	std	Y+7, r18	; 0x07
    2286:	8f 81       	ldd	r24, Y+7	; 0x07
    2288:	98 85       	ldd	r25, Y+8	; 0x08
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	31 f0       	breq	.+12     	; 0x229a <Timer_init+0xca>
    228e:	2f 81       	ldd	r18, Y+7	; 0x07
    2290:	38 85       	ldd	r19, Y+8	; 0x08
    2292:	21 30       	cpi	r18, 0x01	; 1
    2294:	31 05       	cpc	r19, r1
    2296:	b1 f0       	breq	.+44     	; 0x22c4 <Timer_init+0xf4>
    2298:	28 c1       	rjmp	.+592    	; 0x24ea <Timer_init+0x31a>
			/*
			 * Normal (Overflow) mode:
			 * 		Clear WGM00 bit in TCCR0 register
			 *      Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_TCCR0_REG.Bits.WGM00_Bit=0;
    229a:	e3 e5       	ldi	r30, 0x53	; 83
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8f 7b       	andi	r24, 0xBF	; 191
    22a2:	80 83       	st	Z, r24
			TIMER0_TCCR0_REG.Bits.WGM01_Bit=0;
    22a4:	e3 e5       	ldi	r30, 0x53	; 83
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	87 7f       	andi	r24, 0xF7	; 247
    22ac:	80 83       	st	Z, r24

			/* SET FOC0 in any mode except PWM mode */
			TIMER0_TCCR0_REG.Bits.FOC0_Bit=1;
    22ae:	e3 e5       	ldi	r30, 0x53	; 83
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	80 68       	ori	r24, 0x80	; 128
    22b6:	80 83       	st	Z, r24

			/* Enable Timer0 overflow interrupt */
			TIMER_TIMSK_REG.Bits.TOIE0_Bit=1;
    22b8:	e9 e5       	ldi	r30, 0x59	; 89
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	81 60       	ori	r24, 0x01	; 1
    22c0:	80 83       	st	Z, r24
    22c2:	13 c1       	rjmp	.+550    	; 0x24ea <Timer_init+0x31a>
			/*
			 * Compare mode:
			 * 		Clear WGM00 bit in TCCR0 register
			 *      SET WGM01 bit in TCCR0 register
			 */
			TIMER0_TCCR0_REG.Bits.WGM00_Bit=0;
    22c4:	e3 e5       	ldi	r30, 0x53	; 83
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8f 7b       	andi	r24, 0xBF	; 191
    22cc:	80 83       	st	Z, r24
			TIMER0_TCCR0_REG.Bits.WGM01_Bit=1;
    22ce:	e3 e5       	ldi	r30, 0x53	; 83
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	88 60       	ori	r24, 0x08	; 8
    22d6:	80 83       	st	Z, r24

			/* SET FOC0 in any mode except PWM mode */
			TIMER0_TCCR0_REG.Bits.FOC0_Bit=1;
    22d8:	e3 e5       	ldi	r30, 0x53	; 83
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	80 68       	ori	r24, 0x80	; 128
    22e0:	80 83       	st	Z, r24

			/* set the compare value in register OCR0 & with 0xFF to make sure that it doesn't exceed 8 bits */
			TIMER0_OCR0_REG.Byte=((Config_Ptr->timer_compare_MatchValue))&0x00FF;
    22e2:	ac e5       	ldi	r26, 0x5C	; 92
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e9 81       	ldd	r30, Y+1	; 0x01
    22e8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	8c 93       	st	X, r24

			/* Enable Timer0 compare match interrupt*/
			TIMER_TIMSK_REG.Bits.OCIE0_Bit=1;
    22f0:	e9 e5       	ldi	r30, 0x59	; 89
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	82 60       	ori	r24, 0x02	; 2
    22f8:	80 83       	st	Z, r24
    22fa:	f7 c0       	rjmp	.+494    	; 0x24ea <Timer_init+0x31a>

		case Timer1:
			/*Clear registers of Timer1 And Interrupts Modules Enables before any access to prevent any mistakes
			* on changing the mode of same timer as you might forget to use deinit() before init() one more
			* & with 0xC3 to Clear 4 bits of Interrupt modules Enables for timer1 in TIMSK*/
			TIMER1_TCCR1A_REG.Byte=0;
    22fc:	ef e4       	ldi	r30, 0x4F	; 79
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	10 82       	st	Z, r1
			TIMER1_TCCR1B_REG.Byte=0;
    2302:	ee e4       	ldi	r30, 0x4E	; 78
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	10 82       	st	Z, r1
			TIMER1_TCNT1_REG.TwoBytes=0;
    2308:	ec e4       	ldi	r30, 0x4C	; 76
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	11 82       	std	Z+1, r1	; 0x01
    230e:	10 82       	st	Z, r1
			TIMER1_OCR1A_REG.TwoBytes=0;
    2310:	ea e4       	ldi	r30, 0x4A	; 74
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	11 82       	std	Z+1, r1	; 0x01
    2316:	10 82       	st	Z, r1

			/*Clear all Interrupt modules Enable of Timer1 (TICIE1=0,OCIE1A=0,OCIE1B=0,TOIE1=0)*/
			TIMER_TIMSK_REG.Byte&=0xC3;
    2318:	a9 e5       	ldi	r26, 0x59	; 89
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e9 e5       	ldi	r30, 0x59	; 89
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	83 7c       	andi	r24, 0xC3	; 195
    2324:	8c 93       	st	X, r24

			/*Set Intial Value*/
			TIMER1_TCNT1_REG.TwoBytes=(Config_Ptr->timer_InitialValue);
    2326:	ac e4       	ldi	r26, 0x4C	; 76
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e9 81       	ldd	r30, Y+1	; 0x01
    232c:	fa 81       	ldd	r31, Y+2	; 0x02
    232e:	80 81       	ld	r24, Z
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	11 96       	adiw	r26, 0x01	; 1
    2334:	9c 93       	st	X, r25
    2336:	8e 93       	st	-X, r24
			/*
			 * TIMER Prescaler value for Timer1 in TCCR1B Register
			 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
			 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
			 */
			TIMER1_TCCR1B_REG.Byte=(TIMER1_TCCR1B_REG.Byte&0xF8)|(Config_Ptr->timer_clock);
    2338:	ae e4       	ldi	r26, 0x4E	; 78
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	ee e4       	ldi	r30, 0x4E	; 78
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	98 2f       	mov	r25, r24
    2344:	98 7f       	andi	r25, 0xF8	; 248
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	fa 81       	ldd	r31, Y+2	; 0x02
    234a:	85 81       	ldd	r24, Z+5	; 0x05
    234c:	89 2b       	or	r24, r25
    234e:	8c 93       	st	X, r24
			 * Compare mode:
			 * 		OC1A/OC1B disconnected
			 *      Clear COM1A0/COM1A1 bits in TCCR1A register
			 *      Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_TCCR1A_REG.Byte&=0x0F;
    2350:	af e4       	ldi	r26, 0x4F	; 79
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ef e4       	ldi	r30, 0x4F	; 79
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8f 70       	andi	r24, 0x0F	; 15
    235c:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode)
    235e:	e9 81       	ldd	r30, Y+1	; 0x01
    2360:	fa 81       	ldd	r31, Y+2	; 0x02
    2362:	86 81       	ldd	r24, Z+6	; 0x06
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	3e 83       	std	Y+6, r19	; 0x06
    236a:	2d 83       	std	Y+5, r18	; 0x05
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	31 f0       	breq	.+12     	; 0x2380 <Timer_init+0x1b0>
    2374:	2d 81       	ldd	r18, Y+5	; 0x05
    2376:	3e 81       	ldd	r19, Y+6	; 0x06
    2378:	21 30       	cpi	r18, 0x01	; 1
    237a:	31 05       	cpc	r19, r1
    237c:	d9 f0       	breq	.+54     	; 0x23b4 <Timer_init+0x1e4>
    237e:	b5 c0       	rjmp	.+362    	; 0x24ea <Timer_init+0x31a>
				/*
				 * Normal Overflow mode:
				 * 		Clear WGM10/WMG11 bit in TCCR1A register
				 *      Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_TCCR1A_REG.Bits.WGM10_Bit=0;
    2380:	ef e4       	ldi	r30, 0x4F	; 79
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	8e 7f       	andi	r24, 0xFE	; 254
    2388:	80 83       	st	Z, r24
				TIMER1_TCCR1A_REG.Bits.WGM11_Bit=0;
    238a:	ef e4       	ldi	r30, 0x4F	; 79
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	8d 7f       	andi	r24, 0xFD	; 253
    2392:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM12_Bit=0;
    2394:	ee e4       	ldi	r30, 0x4E	; 78
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	87 7f       	andi	r24, 0xF7	; 247
    239c:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM13_Bit=0;
    239e:	ee e4       	ldi	r30, 0x4E	; 78
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8f 7e       	andi	r24, 0xEF	; 239
    23a6:	80 83       	st	Z, r24

				/* Enable Timer1 overflow interrupt */
				TIMER_TIMSK_REG.Bits.TOIE1_Bit=1;
    23a8:	e9 e5       	ldi	r30, 0x59	; 89
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	84 60       	ori	r24, 0x04	; 4
    23b0:	80 83       	st	Z, r24
    23b2:	9b c0       	rjmp	.+310    	; 0x24ea <Timer_init+0x31a>
				 *  Compare mode:
				 *  	Clear WGM10/WGM11 bits in TCCR1A register
				 *      Set WGM12 bit in TCCR1B register
				 *      Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_TCCR1A_REG.Byte&=0xFC;
    23b4:	af e4       	ldi	r26, 0x4F	; 79
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	ef e4       	ldi	r30, 0x4F	; 79
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	8c 7f       	andi	r24, 0xFC	; 252
    23c0:	8c 93       	st	X, r24
				TIMER1_TCCR1B_REG.Bits.WGM12_Bit=1;
    23c2:	ee e4       	ldi	r30, 0x4E	; 78
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	88 60       	ori	r24, 0x08	; 8
    23ca:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM13_Bit=0;
    23cc:	ee e4       	ldi	r30, 0x4E	; 78
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 7e       	andi	r24, 0xEF	; 239
    23d4:	80 83       	st	Z, r24

				/* SET FOC1A/FOC1B in any mode except PWM mode */
				TIMER1_TCCR1A_REG.Bits.FOC1A_Bit=1;
    23d6:	ef e4       	ldi	r30, 0x4F	; 79
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	84 60       	ori	r24, 0x04	; 4
    23de:	80 83       	st	Z, r24
				TIMER1_TCCR1A_REG.Bits.FOC1B_Bit=1;
    23e0:	ef e4       	ldi	r30, 0x4F	; 79
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	88 60       	ori	r24, 0x08	; 8
    23e8:	80 83       	st	Z, r24

				/* set the compare value in register OCR1A*/
				TIMER1_OCR1A_REG.TwoBytes = (Config_Ptr->timer_compare_MatchValue);
    23ea:	aa e4       	ldi	r26, 0x4A	; 74
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e9 81       	ldd	r30, Y+1	; 0x01
    23f0:	fa 81       	ldd	r31, Y+2	; 0x02
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	11 96       	adiw	r26, 0x01	; 1
    23f8:	9c 93       	st	X, r25
    23fa:	8e 93       	st	-X, r24

				/* Enable Timer1 compare match module interrupt*/
				TIMER_TIMSK_REG.Bits.OCIE1A_Bit=1;
    23fc:	e9 e5       	ldi	r30, 0x59	; 89
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	80 61       	ori	r24, 0x10	; 16
    2404:	80 83       	st	Z, r24
    2406:	71 c0       	rjmp	.+226    	; 0x24ea <Timer_init+0x31a>

			case Timer2:

				/*Clear registers of Timer2 And Interrupts Modules Enable before any access to prevent any mistakes
				 * on changing the mode of same timer as you might forget to use deinit() before init() one more*/
				TIMER2_TCCR2_REG.Byte=0;
    2408:	e5 e4       	ldi	r30, 0x45	; 69
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	10 82       	st	Z, r1
				TIMER2_TCNT2_REG.Byte=0;
    240e:	e4 e4       	ldi	r30, 0x44	; 68
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	10 82       	st	Z, r1
				TIMER2_OCR2_REG.Byte=0;
    2414:	e3 e4       	ldi	r30, 0x43	; 67
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	10 82       	st	Z, r1

				/*Clear all Interrupt modules Enable of Timer2 (OCIE2=0,TOIE2=0)*/
				TIMER_TIMSK_REG.Bits.OCIE2_Bit=0;
    241a:	e9 e5       	ldi	r30, 0x59	; 89
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8f 77       	andi	r24, 0x7F	; 127
    2422:	80 83       	st	Z, r24
				TIMER_TIMSK_REG.Bits.TOIE2_Bit=0;
    2424:	e9 e5       	ldi	r30, 0x59	; 89
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	8f 7b       	andi	r24, 0xBF	; 191
    242c:	80 83       	st	Z, r24

				/*Set Intial Value & with 0xFF to make sure that it doesn't exceed 8 bits */
				TIMER2_TCNT2_REG.Byte=((Config_Ptr->timer_InitialValue))&0x00FF;
    242e:	a4 e4       	ldi	r26, 0x44	; 68
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e9 81       	ldd	r30, Y+1	; 0x01
    2434:	fa 81       	ldd	r31, Y+2	; 0x02
    2436:	80 81       	ld	r24, Z
    2438:	91 81       	ldd	r25, Z+1	; 0x01
    243a:	8c 93       	st	X, r24
				/*
				 * TIMER2 Prescaler value for Timer0 in TCCR2 Register
				 * insert the required clock value in the first three bits (CS20, CS21 and CS22)
				 * 0XF8 to make sure that the least 3-bits in TCCR2 register=0
				 */
				TIMER2_TCCR2_REG.Byte=((TIMER2_TCCR2_REG.Byte&0xF8)|(Config_Ptr->timer_clock));
    243c:	a5 e4       	ldi	r26, 0x45	; 69
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e5 e4       	ldi	r30, 0x45	; 69
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	98 2f       	mov	r25, r24
    2448:	98 7f       	andi	r25, 0xF8	; 248
    244a:	e9 81       	ldd	r30, Y+1	; 0x01
    244c:	fa 81       	ldd	r31, Y+2	; 0x02
    244e:	85 81       	ldd	r24, Z+5	; 0x05
    2450:	89 2b       	or	r24, r25
    2452:	8c 93       	st	X, r24
				 *  Compare mode:
				 *  	OC2 disconnected
				 *      Clear COM20 bit in TCCR2 register
				 *      Clear COM21 bit in TCCR2 register
				 */
				TIMER2_TCCR2_REG.Bits.COM20_Bit=0;
    2454:	e5 e4       	ldi	r30, 0x45	; 69
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8f 7e       	andi	r24, 0xEF	; 239
    245c:	80 83       	st	Z, r24
				TIMER2_TCCR2_REG.Bits.COM21_Bit=0;
    245e:	e5 e4       	ldi	r30, 0x45	; 69
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	8f 7d       	andi	r24, 0xDF	; 223
    2466:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    2468:	e9 81       	ldd	r30, Y+1	; 0x01
    246a:	fa 81       	ldd	r31, Y+2	; 0x02
    246c:	86 81       	ldd	r24, Z+6	; 0x06
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	3c 83       	std	Y+4, r19	; 0x04
    2474:	2b 83       	std	Y+3, r18	; 0x03
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	9c 81       	ldd	r25, Y+4	; 0x04
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	31 f0       	breq	.+12     	; 0x248a <Timer_init+0x2ba>
    247e:	2b 81       	ldd	r18, Y+3	; 0x03
    2480:	3c 81       	ldd	r19, Y+4	; 0x04
    2482:	21 30       	cpi	r18, 0x01	; 1
    2484:	31 05       	cpc	r19, r1
    2486:	b1 f0       	breq	.+44     	; 0x24b4 <Timer_init+0x2e4>
    2488:	30 c0       	rjmp	.+96     	; 0x24ea <Timer_init+0x31a>
					/*
					 * Normal Overflow mode:
					 * 		Clear WGM20 bit in TCCR2 register
					 *      Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_TCCR2_REG.Bits.WGM20_Bit=0;
    248a:	e5 e4       	ldi	r30, 0x45	; 69
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	8f 7b       	andi	r24, 0xBF	; 191
    2492:	80 83       	st	Z, r24
					TIMER2_TCCR2_REG.Bits.WGM21_Bit=0;
    2494:	e5 e4       	ldi	r30, 0x45	; 69
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	87 7f       	andi	r24, 0xF7	; 247
    249c:	80 83       	st	Z, r24

					/* SET FOC2 in any mode except PWM mode */
					TIMER2_TCCR2_REG.Bits.FOC2_Bit=1;
    249e:	e5 e4       	ldi	r30, 0x45	; 69
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	80 68       	ori	r24, 0x80	; 128
    24a6:	80 83       	st	Z, r24

					/* Enable Timer2 overflow interrupt */
					TIMER_TIMSK_REG.Bits.TOIE2_Bit=1;
    24a8:	e9 e5       	ldi	r30, 0x59	; 89
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	80 64       	ori	r24, 0x40	; 64
    24b0:	80 83       	st	Z, r24
    24b2:	1b c0       	rjmp	.+54     	; 0x24ea <Timer_init+0x31a>
					/*
					 *  Compare mode:
					 *  	Clear WGM20 bit in TCCR2 register
					 *      SET WGM21 bit in TCCR2 register
					 */
					TIMER2_TCCR2_REG.Bits.WGM20_Bit=0;
    24b4:	e5 e4       	ldi	r30, 0x45	; 69
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	8f 7b       	andi	r24, 0xBF	; 191
    24bc:	80 83       	st	Z, r24
					TIMER2_TCCR2_REG.Bits.WGM21_Bit=1;
    24be:	e5 e4       	ldi	r30, 0x45	; 69
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	88 60       	ori	r24, 0x08	; 8
    24c6:	80 83       	st	Z, r24

					/* SET FOC2 in any mode except PWM mode */
					TIMER2_TCCR2_REG.Bits.FOC2_Bit=1;
    24c8:	e5 e4       	ldi	r30, 0x45	; 69
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	80 68       	ori	r24, 0x80	; 128
    24d0:	80 83       	st	Z, r24

					/* set the compare value in register OCR2 & with 0xFF to make sure that it doesn't exceed 8 bits */
					TIMER2_OCR2_REG.Byte=((Config_Ptr->timer_compare_MatchValue))&0x00FF;
    24d2:	a3 e4       	ldi	r26, 0x43	; 67
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e9 81       	ldd	r30, Y+1	; 0x01
    24d8:	fa 81       	ldd	r31, Y+2	; 0x02
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	8c 93       	st	X, r24

					/* Enable Timer2 compare match interrupt*/
					TIMER_TIMSK_REG.Bits.OCIE2_Bit=1;
    24e0:	e9 e5       	ldi	r30, 0x59	; 89
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	80 68       	ori	r24, 0x80	; 128
    24e8:	80 83       	st	Z, r24

				break; /*End of Timer2 case*/

	}/*End of the outer Super switch case*/

}/*End of the Timer_init*/
    24ea:	2a 96       	adiw	r28, 0x0a	; 10
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <Timer_DeInit>:
/*
 * Description :
 * A function to Deinitialize the timers
 */
void Timer_DeInit(Timer_ID_Type timer_type)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <Timer_DeInit+0x6>
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	3b 83       	std	Y+3, r19	; 0x03
    2512:	2a 83       	std	Y+2, r18	; 0x02
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	9b 81       	ldd	r25, Y+3	; 0x03
    2518:	81 30       	cpi	r24, 0x01	; 1
    251a:	91 05       	cpc	r25, r1
    251c:	e9 f0       	breq	.+58     	; 0x2558 <Timer_DeInit+0x5c>
    251e:	2a 81       	ldd	r18, Y+2	; 0x02
    2520:	3b 81       	ldd	r19, Y+3	; 0x03
    2522:	22 30       	cpi	r18, 0x02	; 2
    2524:	31 05       	cpc	r19, r1
    2526:	71 f1       	breq	.+92     	; 0x2584 <Timer_DeInit+0x88>
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	9b 81       	ldd	r25, Y+3	; 0x03
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	e9 f5       	brne	.+122    	; 0x25aa <Timer_DeInit+0xae>
	{
	case Timer0:

		/*Clear all register of Timer0*/
		TIMER0_TCCR0_REG.Byte=0;
    2530:	e3 e5       	ldi	r30, 0x53	; 83
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	10 82       	st	Z, r1
		TIMER0_TCNT0_REG.Byte=0;
    2536:	e2 e5       	ldi	r30, 0x52	; 82
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	10 82       	st	Z, r1
		TIMER0_OCR0_REG.Byte=0;
    253c:	ec e5       	ldi	r30, 0x5C	; 92
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer0 (OCIE0=0,TOIE0=0)*/
		TIMER_TIMSK_REG.Bits.OCIE0_Bit=0;
    2542:	e9 e5       	ldi	r30, 0x59	; 89
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	8d 7f       	andi	r24, 0xFD	; 253
    254a:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE0_Bit=0;
    254c:	e9 e5       	ldi	r30, 0x59	; 89
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	8e 7f       	andi	r24, 0xFE	; 254
    2554:	80 83       	st	Z, r24
    2556:	29 c0       	rjmp	.+82     	; 0x25aa <Timer_DeInit+0xae>
		break;

	case Timer1:

		/*Clear all register of Timer1*/
		TIMER1_TCCR1A_REG.Byte=0;
    2558:	ef e4       	ldi	r30, 0x4F	; 79
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	10 82       	st	Z, r1
		TIMER1_TCCR1B_REG.Byte=0;
    255e:	ee e4       	ldi	r30, 0x4E	; 78
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	10 82       	st	Z, r1
		TIMER1_TCNT1_REG.TwoBytes=0;
    2564:	ec e4       	ldi	r30, 0x4C	; 76
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	11 82       	std	Z+1, r1	; 0x01
    256a:	10 82       	st	Z, r1
		TIMER1_OCR1A_REG.TwoBytes=0;
    256c:	ea e4       	ldi	r30, 0x4A	; 74
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	11 82       	std	Z+1, r1	; 0x01
    2572:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer1 (TICIE1=0,OCIE1A=0,OCIE1B=0,TOIE1=0)*/
		TIMER_TIMSK_REG.Byte&=0xC3;
    2574:	a9 e5       	ldi	r26, 0x59	; 89
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e9 e5       	ldi	r30, 0x59	; 89
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	83 7c       	andi	r24, 0xC3	; 195
    2580:	8c 93       	st	X, r24
    2582:	13 c0       	rjmp	.+38     	; 0x25aa <Timer_DeInit+0xae>


	case Timer2:

		/*Clear all register of Timer2*/
		TIMER2_TCCR2_REG.Byte=0;
    2584:	e5 e4       	ldi	r30, 0x45	; 69
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	10 82       	st	Z, r1
		TIMER2_TCNT2_REG.Byte=0;
    258a:	e4 e4       	ldi	r30, 0x44	; 68
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	10 82       	st	Z, r1
		TIMER2_OCR2_REG.Byte=0;
    2590:	e3 e4       	ldi	r30, 0x43	; 67
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer2 (OCIE2=0,TOIE2=0)*/
		TIMER_TIMSK_REG.Bits.OCIE2_Bit=0;
    2596:	e9 e5       	ldi	r30, 0x59	; 89
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	8f 77       	andi	r24, 0x7F	; 127
    259e:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE2_Bit=0;
    25a0:	e9 e5       	ldi	r30, 0x59	; 89
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	8f 7b       	andi	r24, 0xBF	; 191
    25a8:	80 83       	st	Z, r24
		break;

	}

}
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <TWI_init>:

#include "twi_interface.h"
#include "twi_private.h"

void TWI_init(const I2c_ConfigType *i2c_config)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <TWI_init+0x6>
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Choose required bit rate & prescaler
	 * SCL frequency = (CPU clock frequency / ((16+2(TWBR))) * 4^TWPS)
	 * &0xFC to clear bits before insertion
	 */
	TWI_TWBR_REG.Byte = i2c_config->bit_rate;
    25c4:	a0 e2       	ldi	r26, 0x20	; 32
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ca:	fa 81       	ldd	r31, Y+2	; 0x02
    25cc:	81 81       	ldd	r24, Z+1	; 0x01
    25ce:	8c 93       	st	X, r24
	TWI_TWSR_REG.Byte = (TWI_TWSR_REG.Byte & 0xFC) |((i2c_config->i2c_prescaler)&0x03);
    25d0:	a1 e2       	ldi	r26, 0x21	; 33
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e1 e2       	ldi	r30, 0x21	; 33
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	98 2f       	mov	r25, r24
    25dc:	9c 7f       	andi	r25, 0xFC	; 252
    25de:	e9 81       	ldd	r30, Y+1	; 0x01
    25e0:	fa 81       	ldd	r31, Y+2	; 0x02
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	83 70       	andi	r24, 0x03	; 3
    25e6:	89 2b       	or	r24, r25
    25e8:	8c 93       	st	X, r24

	/* Two Wire Bus address my address if any master device want to call me:master_slave_address  (used in case this MC is a slave device)
	   General Call Recognition: Off */
	/* my address = master_slave_address :) */
	TWI_TWAR_REG.Byte = i2c_config->address;
    25ea:	a2 e2       	ldi	r26, 0x22	; 34
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e9 81       	ldd	r30, Y+1	; 0x01
    25f0:	fa 81       	ldd	r31, Y+2	; 0x02
    25f2:	80 81       	ld	r24, Z
    25f4:	8c 93       	st	X, r24

	/* enable TWI and clear all other bits in register TWCR -->0b0000 0100=0x04 */
	TWI_TWCR_REG.Byte=0x04;
    25f6:	e6 e5       	ldi	r30, 0x56	; 86
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	84 e0       	ldi	r24, 0x04	; 4
    25fc:	80 83       	st	Z, r24
}
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <TWI_start>:


void TWI_start(void)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before sending the start bit TWINT=1 in TWCR Register
	 * send the start bit by TWSTA=1 in TWCR Register
	 * Enable TWI Module TWEN=1 in TWCR Register
	 * Clear all other bits in TWCR Register --->0b1010 0100=0xA4
	 */
	TWI_TWCR_REG.Byte=0xA4;
    2610:	e6 e5       	ldi	r30, 0x56	; 86
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	84 ea       	ldi	r24, 0xA4	; 164
    2616:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(!(TWI_TWCR_REG.Bits.TWINT_BIT));
    2618:	e6 e5       	ldi	r30, 0x56	; 86
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 78       	andi	r24, 0x80	; 128
    2620:	88 23       	and	r24, r24
    2622:	d1 f3       	breq	.-12     	; 0x2618 <TWI_start+0x10>

}
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <TWI_stop>:

void TWI_stop(void)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before sending the stop bit TWINT=1 in TWCR Register
	 * send the stop bit by TWSTO=1	in TWCR Register
	 * Enable TWI Module TWEN=1	in TWCR Register
	 * Clear all other bits in register TWCR Register --->0b1001 0100=0x94
	 */
	TWI_TWCR_REG.Byte=0x94;
    2632:	e6 e5       	ldi	r30, 0x56	; 86
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	84 e9       	ldi	r24, 0x94	; 148
    2638:	80 83       	st	Z, r24
}
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <TWI_writeByte>:


void TWI_writeByte(uint8 data)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	0f 92       	push	r0
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWI_TWDR_REG.Byte = data;
    264c:	e3 e2       	ldi	r30, 0x23	; 35
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1 in Register TWCR
	 * Enable TWI Module TWEN=1	in Register TWCR
	 * Clear all other bits in register TWCR --->0b1000 0100=0x84
	 */
    TWI_TWCR_REG.Byte=0x84;
    2654:	e6 e5       	ldi	r30, 0x56	; 86
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	84 e8       	ldi	r24, 0x84	; 132
    265a:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!(TWI_TWCR_REG.Bits.TWINT_BIT));
    265c:	e6 e5       	ldi	r30, 0x56	; 86
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	80 78       	andi	r24, 0x80	; 128
    2664:	88 23       	and	r24, r24
    2666:	d1 f3       	breq	.-12     	; 0x265c <TWI_writeByte+0x1c>
}
    2668:	0f 90       	pop	r0
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <TWI_readByteWithACK>:



uint8 TWI_readByteWithACK(void)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 * Clear all other bits in register TWCR-->0b1100 0100=0xC4
	 */
    TWI_TWCR_REG.Byte=0xC4;
    2678:	e6 e5       	ldi	r30, 0x56	; 86
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	84 ec       	ldi	r24, 0xC4	; 196
    267e:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!(TWI_TWCR_REG.Bits.TWINT_BIT));
    2680:	e6 e5       	ldi	r30, 0x56	; 86
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	80 78       	andi	r24, 0x80	; 128
    2688:	88 23       	and	r24, r24
    268a:	d1 f3       	breq	.-12     	; 0x2680 <TWI_readByteWithACK+0x10>

    /* Read Data */
    return TWI_TWDR_REG.Byte;
    268c:	e3 e2       	ldi	r30, 0x23	; 35
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
}
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(void)
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 * Clear all other bits in register TWCR -->0b1000 0100=0x84
	 */
	TWI_TWCR_REG.Byte=0x84;
    26a0:	e6 e5       	ldi	r30, 0x56	; 86
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	84 e8       	ldi	r24, 0x84	; 132
    26a6:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!(TWI_TWCR_REG.Bits.TWINT_BIT));
    26a8:	e6 e5       	ldi	r30, 0x56	; 86
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	80 78       	andi	r24, 0x80	; 128
    26b0:	88 23       	and	r24, r24
    26b2:	d1 f3       	breq	.-12     	; 0x26a8 <TWI_readByteWithNACK+0x10>

    /* Read Data */
    return TWI_TWDR_REG.Byte;
    26b4:	e3 e2       	ldi	r30, 0x23	; 35
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	0f 92       	push	r0
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWI_TWSR_REG.Byte & 0xF8;
    26ca:	e1 e2       	ldi	r30, 0x21	; 33
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	88 7f       	andi	r24, 0xF8	; 248
    26d2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d6:	0f 90       	pop	r0
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *UART_Config)
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <UART_init+0x6>
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <UART_init+0x8>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    26ee:	1a 82       	std	Y+2, r1	; 0x02
    26f0:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UART_UCSRA_REG.Byte=0;
    26f2:	eb e2       	ldi	r30, 0x2B	; 43
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	10 82       	st	Z, r1
	UART_UCSRA_REG.Bits.U2X_BIT=1;
    26f8:	eb e2       	ldi	r30, 0x2B	; 43
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	82 60       	ori	r24, 0x02	; 2
    2700:	80 83       	st	Z, r24

	/*Enable Sending and transmitting TXEN=1 AND RXEN=1 in register UCSRB*/
	UART_UCSRB_REG.Bits.RXEN_BIT=1;
    2702:	ea e2       	ldi	r30, 0x2A	; 42
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	80 61       	ori	r24, 0x10	; 16
    270a:	80 83       	st	Z, r24
	UART_UCSRB_REG.Bits.TXEN_BIT=1;
    270c:	ea e2       	ldi	r30, 0x2A	; 42
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	88 60       	ori	r24, 0x08	; 8
    2714:	80 83       	st	Z, r24

	/*Set Bit URSEL (URSEL=1) to access register UCSRC as UCSRC and UBRRH Mapped on same location as  declared in uart private file  */
	UART_UCSRC_REG.Bits.URSEL_BIT=1;
    2716:	e0 e4       	ldi	r30, 0x40	; 64
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	80 68       	ori	r24, 0x80	; 128
    271e:	80 83       	st	Z, r24

	/*Write the Selected Parity*/
	UART_UCSRC_REG.Byte|=(UART_Config->parity);
    2720:	a0 e4       	ldi	r26, 0x40	; 64
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e0 e4       	ldi	r30, 0x40	; 64
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	90 81       	ld	r25, Z
    272a:	eb 81       	ldd	r30, Y+3	; 0x03
    272c:	fc 81       	ldd	r31, Y+4	; 0x04
    272e:	81 81       	ldd	r24, Z+1	; 0x01
    2730:	89 2b       	or	r24, r25
    2732:	8c 93       	st	X, r24

	/*Write the selected stop bits*/
	UART_UCSRC_REG.Byte|=(UART_Config->stop_bit);
    2734:	a0 e4       	ldi	r26, 0x40	; 64
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e0 e4       	ldi	r30, 0x40	; 64
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	90 81       	ld	r25, Z
    273e:	eb 81       	ldd	r30, Y+3	; 0x03
    2740:	fc 81       	ldd	r31, Y+4	; 0x04
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	89 2b       	or	r24, r25
    2746:	8c 93       	st	X, r24
	 * 		for example if we use 8 bit data
	 * 		(UART_Config->bit)=0011
	 * 		(UART_Config->bit)>>1=0110
	 * 		((UART_Config->bit)>>1)&6=0110 & 0110 = 0110
	 * 		  */
	UART_UCSRC_REG.Byte|=(((UART_Config->bit_data)<<1)&6);
    2748:	a0 e4       	ldi	r26, 0x40	; 64
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e0 e4       	ldi	r30, 0x40	; 64
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	28 2f       	mov	r18, r24
    2754:	eb 81       	ldd	r30, Y+3	; 0x03
    2756:	fc 81       	ldd	r31, Y+4	; 0x04
    2758:	80 81       	ld	r24, Z
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	86 70       	andi	r24, 0x06	; 6
    2764:	82 2b       	or	r24, r18
    2766:	8c 93       	st	X, r24
	UART_UCSRC_REG.Byte|=(((UART_Config->bit_data)<<2)&4);
    2768:	a0 e4       	ldi	r26, 0x40	; 64
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e0 e4       	ldi	r30, 0x40	; 64
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	28 2f       	mov	r18, r24
    2774:	eb 81       	ldd	r30, Y+3	; 0x03
    2776:	fc 81       	ldd	r31, Y+4	; 0x04
    2778:	80 81       	ld	r24, Z
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	84 70       	andi	r24, 0x04	; 4
    2788:	82 2b       	or	r24, r18
    278a:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config->baud_rate) * 8UL))) - 1);
    278c:	eb 81       	ldd	r30, Y+3	; 0x03
    278e:	fc 81       	ldd	r31, Y+4	; 0x04
    2790:	83 81       	ldd	r24, Z+3	; 0x03
    2792:	94 81       	ldd	r25, Z+4	; 0x04
    2794:	a5 81       	ldd	r26, Z+5	; 0x05
    2796:	b6 81       	ldd	r27, Z+6	; 0x06
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	aa 1f       	adc	r26, r26
    279e:	bb 1f       	adc	r27, r27
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	aa 1f       	adc	r26, r26
    27a6:	bb 1f       	adc	r27, r27
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	aa 1f       	adc	r26, r26
    27ae:	bb 1f       	adc	r27, r27
    27b0:	9c 01       	movw	r18, r24
    27b2:	ad 01       	movw	r20, r26
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	92 e1       	ldi	r25, 0x12	; 18
    27b8:	aa e7       	ldi	r26, 0x7A	; 122
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 89 14 	call	0x2912	; 0x2912 <__udivmodsi4>
    27c4:	da 01       	movw	r26, r20
    27c6:	c9 01       	movw	r24, r18
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UART_UBRRH_REG.Byte = ubrr_value>>8;
    27ce:	e0 e4       	ldi	r30, 0x40	; 64
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	89 2f       	mov	r24, r25
    27d8:	99 27       	eor	r25, r25
    27da:	80 83       	st	Z, r24
	UART_UBRRL_REG.Byte = ubrr_value;
    27dc:	e9 e2       	ldi	r30, 0x29	; 41
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	80 83       	st	Z, r24
}
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	0f 92       	push	r0
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(!(UART_UCSRA_REG.Bits.UDRE_BIT));
    27fe:	eb e2       	ldi	r30, 0x2B	; 43
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 72       	andi	r24, 0x20	; 32
    2806:	88 23       	and	r24, r24
    2808:	d1 f3       	breq	.-12     	; 0x27fe <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UART_UDR_REG.Byte = data;
    280a:	ec e2       	ldi	r30, 0x2C	; 44
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	80 83       	st	Z, r24
	UART_UDR_REG.Byte= data;
	while(!(UART_UCSRA_REG.Bits.TXC_BIT)); // Wait until the transmission is complete TXC = 1
	UART_UCSRA_REG.Bits.TXC_BIT=1; // Clear the TXC flag
	*/

}
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(!(UART_UCSRA_REG.Bits.RXC_BIT));
    2822:	eb e2       	ldi	r30, 0x2B	; 43
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	80 78       	andi	r24, 0x80	; 128
    282a:	88 23       	and	r24, r24
    282c:	d1 f3       	breq	.-12     	; 0x2822 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UART_UDR_REG.Byte;
    282e:	ec e2       	ldi	r30, 0x2C	; 44
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
}
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <UART_sendString+0x6>
    2840:	0f 92       	push	r0
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	9b 83       	std	Y+3, r25	; 0x03
    2848:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    284a:	19 82       	std	Y+1, r1	; 0x01
    284c:	0e c0       	rjmp	.+28     	; 0x286a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	9b 81       	ldd	r25, Y+3	; 0x03
    2858:	fc 01       	movw	r30, r24
    285a:	e2 0f       	add	r30, r18
    285c:	f3 1f       	adc	r31, r19
    285e:	80 81       	ld	r24, Z
    2860:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <UART_sendByte>
		i++;
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	8f 5f       	subi	r24, 0xFF	; 255
    2868:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	9b 81       	ldd	r25, Y+3	; 0x03
    2874:	fc 01       	movw	r30, r24
    2876:	e2 0f       	add	r30, r18
    2878:	f3 1f       	adc	r31, r19
    287a:	80 81       	ld	r24, Z
    287c:	88 23       	and	r24, r24
    287e:	39 f7       	brne	.-50     	; 0x284e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	00 d0       	rcall	.+0      	; 0x2896 <UART_receiveString+0xa>
    2896:	0f 92       	push	r0
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	9b 83       	std	Y+3, r25	; 0x03
    289e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28a0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	9b 81       	ldd	r25, Y+3	; 0x03
    28ac:	8c 01       	movw	r16, r24
    28ae:	02 0f       	add	r16, r18
    28b0:	13 1f       	adc	r17, r19
    28b2:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_recieveByte>
    28b6:	f8 01       	movw	r30, r16
    28b8:	80 83       	st	Z, r24
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	8f 5f       	subi	r24, 0xFF	; 255
    28c0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	8c 01       	movw	r16, r24
    28ce:	02 0f       	add	r16, r18
    28d0:	13 1f       	adc	r17, r19
    28d2:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_recieveByte>
    28d6:	f8 01       	movw	r30, r16
    28d8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	9b 81       	ldd	r25, Y+3	; 0x03
    28e4:	fc 01       	movw	r30, r24
    28e6:	e2 0f       	add	r30, r18
    28e8:	f3 1f       	adc	r31, r19
    28ea:	80 81       	ld	r24, Z
    28ec:	83 32       	cpi	r24, 0x23	; 35
    28ee:	31 f7       	brne	.-52     	; 0x28bc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	fc 01       	movw	r30, r24
    28fc:	e2 0f       	add	r30, r18
    28fe:	f3 1f       	adc	r31, r19
    2900:	10 82       	st	Z, r1
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	08 95       	ret

00002912 <__udivmodsi4>:
    2912:	a1 e2       	ldi	r26, 0x21	; 33
    2914:	1a 2e       	mov	r1, r26
    2916:	aa 1b       	sub	r26, r26
    2918:	bb 1b       	sub	r27, r27
    291a:	fd 01       	movw	r30, r26
    291c:	0d c0       	rjmp	.+26     	; 0x2938 <__udivmodsi4_ep>

0000291e <__udivmodsi4_loop>:
    291e:	aa 1f       	adc	r26, r26
    2920:	bb 1f       	adc	r27, r27
    2922:	ee 1f       	adc	r30, r30
    2924:	ff 1f       	adc	r31, r31
    2926:	a2 17       	cp	r26, r18
    2928:	b3 07       	cpc	r27, r19
    292a:	e4 07       	cpc	r30, r20
    292c:	f5 07       	cpc	r31, r21
    292e:	20 f0       	brcs	.+8      	; 0x2938 <__udivmodsi4_ep>
    2930:	a2 1b       	sub	r26, r18
    2932:	b3 0b       	sbc	r27, r19
    2934:	e4 0b       	sbc	r30, r20
    2936:	f5 0b       	sbc	r31, r21

00002938 <__udivmodsi4_ep>:
    2938:	66 1f       	adc	r22, r22
    293a:	77 1f       	adc	r23, r23
    293c:	88 1f       	adc	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	1a 94       	dec	r1
    2942:	69 f7       	brne	.-38     	; 0x291e <__udivmodsi4_loop>
    2944:	60 95       	com	r22
    2946:	70 95       	com	r23
    2948:	80 95       	com	r24
    294a:	90 95       	com	r25
    294c:	9b 01       	movw	r18, r22
    294e:	ac 01       	movw	r20, r24
    2950:	bd 01       	movw	r22, r26
    2952:	cf 01       	movw	r24, r30
    2954:	08 95       	ret

00002956 <__prologue_saves__>:
    2956:	2f 92       	push	r2
    2958:	3f 92       	push	r3
    295a:	4f 92       	push	r4
    295c:	5f 92       	push	r5
    295e:	6f 92       	push	r6
    2960:	7f 92       	push	r7
    2962:	8f 92       	push	r8
    2964:	9f 92       	push	r9
    2966:	af 92       	push	r10
    2968:	bf 92       	push	r11
    296a:	cf 92       	push	r12
    296c:	df 92       	push	r13
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	ca 1b       	sub	r28, r26
    2980:	db 0b       	sbc	r29, r27
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	09 94       	ijmp

0000298e <__epilogue_restores__>:
    298e:	2a 88       	ldd	r2, Y+18	; 0x12
    2990:	39 88       	ldd	r3, Y+17	; 0x11
    2992:	48 88       	ldd	r4, Y+16	; 0x10
    2994:	5f 84       	ldd	r5, Y+15	; 0x0f
    2996:	6e 84       	ldd	r6, Y+14	; 0x0e
    2998:	7d 84       	ldd	r7, Y+13	; 0x0d
    299a:	8c 84       	ldd	r8, Y+12	; 0x0c
    299c:	9b 84       	ldd	r9, Y+11	; 0x0b
    299e:	aa 84       	ldd	r10, Y+10	; 0x0a
    29a0:	b9 84       	ldd	r11, Y+9	; 0x09
    29a2:	c8 84       	ldd	r12, Y+8	; 0x08
    29a4:	df 80       	ldd	r13, Y+7	; 0x07
    29a6:	ee 80       	ldd	r14, Y+6	; 0x06
    29a8:	fd 80       	ldd	r15, Y+5	; 0x05
    29aa:	0c 81       	ldd	r16, Y+4	; 0x04
    29ac:	1b 81       	ldd	r17, Y+3	; 0x03
    29ae:	aa 81       	ldd	r26, Y+2	; 0x02
    29b0:	b9 81       	ldd	r27, Y+1	; 0x01
    29b2:	ce 0f       	add	r28, r30
    29b4:	d1 1d       	adc	r29, r1
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	ed 01       	movw	r28, r26
    29c2:	08 95       	ret

000029c4 <_exit>:
    29c4:	f8 94       	cli

000029c6 <__stop_program>:
    29c6:	ff cf       	rjmp	.-2      	; 0x29c6 <__stop_program>
